<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>feedtailor Inc. スタッフブログ</title>
    <link>http://staff.feedtailor.jp/</link>
    <description>Recent content on feedtailor Inc. スタッフブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 20 Jul 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://staff.feedtailor.jp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（URL編）</title>
      <link>http://staff.feedtailor.jp/2016/07/20/hugo_14</link>
      <pubDate>Wed, 20 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/07/20/hugo_14</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の &lt;strong&gt;URL&lt;/strong&gt;ついて。&lt;/p&gt;

&lt;p&gt;Hugoのデフォルト設定では、URLはコンテンツの配置によって決まりますが、フロントマターのパラメータで指定のURLに変更したり、エイリアスを配置することができます。&lt;/p&gt;

&lt;h3 id=&#34;urlの変更-ページ単位&#34;&gt;URLの変更(ページ単位)&lt;/h3&gt;

&lt;p&gt;デフォルト設定では content/post/sample.md から以下のページが生成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public/post/sample/index.html   // URL: [baseurl]/post/sample/

// uglyURLs オプションが true の場合
public/post/sample.html         // URL: [baseurl]/post/sample.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;任意のパスに変更したい場合は、フロントマターの url パラメータを使用します。&lt;/p&gt;

&lt;p&gt;content/post/sample.md&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
// YAML形式の場合
url: a/b/c
....
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成されるページは &lt;code&gt;public/a/b/c/index.html&lt;/code&gt; (または &lt;code&gt;public/a/b/c.html&lt;/code&gt;) です。&lt;br /&gt;
url パラメータについては &lt;a href=&#34;http://staff.feedtailor.jp/2016/05/11/hugo_05&#34;&gt;レイアウト編３&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;h3 id=&#34;urlの変更-セクション単位&#34;&gt;URLの変更(セクション単位)&lt;/h3&gt;

&lt;p&gt;config.toml の permalinks 設定を使用すると SECTION (コンテンツが置かれたフォルダの１階層目)単位で URL のパターンを指定する事ができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[permalinks]
  post = &amp;quot;/:year/:month/:title/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;左辺がセクション名で右辺がURLパターンです。&lt;br /&gt;
URLパターンで使用できるパラメータは以下の通りです。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;:year&lt;/th&gt;&lt;td&gt;年：数字4桁&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:month&lt;/th&gt;&lt;td&gt;月：数字2桁&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:monthname&lt;/th&gt;&lt;td&gt;月名：January, February ... December&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:day&lt;/th&gt;&lt;td&gt;日：数字2桁&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:weekday&lt;/th&gt;&lt;td&gt;曜日：日曜=0, 月曜=1 ... 土曜=6&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:weekdayname&lt;/th&gt;&lt;td&gt;曜日名：Sunday, Monday ... Saturday&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:yearday&lt;/th&gt;&lt;td&gt;年の日：1月1日=1, 1月2日=2 ... 12月31日=365 (or 366)&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:section&lt;/th&gt;&lt;td&gt;コンテンツのsection&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:title&lt;/th&gt;&lt;td&gt;コンテンツのtitle&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:slug&lt;/th&gt;&lt;td&gt;コンテンツのslug（なければtitle）&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:filename&lt;/th&gt;&lt;td&gt;コンテンツのファイル名（拡張子なし）&lt;td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;エイリアス&#34;&gt;エイリアス&lt;/h3&gt;

&lt;p&gt;サイトを移行したりHugoでリプレースした時、旧サイトとURLが変わってしまい、旧URLから新URLへリダイレクトしたい事があります。&lt;br /&gt;
alias パラメータを使用すると、旧URLにリダイレクト用ページを生成する事ができます。&lt;/p&gt;

&lt;p&gt;リダイレクト先コンテンツのフロントマターに次のような設定を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
// YAML形式の場合
aliases:
  - a/b/c.html  // 拡張子まで指定する
  - d/e/        // 複数指定可能
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の設定を追加すると、新URLのコンテンツに変更はありませんが、旧URLにリダイレクトするための以下のようなページが生成されます。&lt;br /&gt;
旧URLにアクセスすると 0 秒後に新URLにリダイレクトします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;リダイレクト先コンテンツのURL&amp;quot;/&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;content-type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot;/&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0;url=リダイレクト先コンテンツのURL&amp;quot;/&amp;gt;
  &amp;lt;/head&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;クロスリファレンス&#34;&gt;クロスリファレンス&lt;/h3&gt;

&lt;p&gt;任意のコンテンツに対するURLを生成したい場合は ref または relref ショートコードを使用するのが便利です。&lt;br /&gt;
ref は指定したコンテンツの絶対パス、relref は相対パスを生成します。&lt;/p&gt;

&lt;p&gt;ショートコードを使用して以下のように記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; ref &amp;quot;post/sample.md&amp;quot; &amp;gt;}}     =&amp;gt; [baseurl]/post/sample/
{{&amp;lt; ref &amp;quot;sample.md&amp;quot; &amp;gt;}}          =&amp;gt; [baseurl]/post/sample/
{{&amp;lt; relref &amp;quot;post/sample.md&amp;quot; &amp;gt;}}  =&amp;gt; /post/sample/
{{&amp;lt; relref &amp;quot;sample.md&amp;quot; &amp;gt;}}       =&amp;gt; /post/sample/
{{&amp;lt; relref &amp;quot;sample.md#top&amp;quot; &amp;gt;}}   =&amp;gt; /post/sample/#top
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上の２番目、４番目のようにフォルダ名は省略可能ですが、同一ファイル名のコンテンツが複数存在する場合には結果は保証されませんので注意してください。&lt;br /&gt;
５番目のように anchor 付きでも指定できます。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（データファイル編）</title>
      <link>http://staff.feedtailor.jp/2016/07/13/hugo_13</link>
      <pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/07/13/hugo_13</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の &lt;strong&gt;データファイル&lt;/strong&gt;ついて。&lt;/p&gt;

&lt;p&gt;Hugoでは、YAML / JSON / TOML形式で記述したデータをサイトに表示することができます。
自社の製品データや販売実績、トピックス等をデータファイルとして保存しておくと、レイアウトやコンテンツに手を入れることなく表示データの更新が可能になります。&lt;/p&gt;

&lt;h3 id=&#34;使用方法&#34;&gt;使用方法&lt;/h3&gt;

&lt;p&gt;データファイルは &lt;code&gt;data&lt;/code&gt; フォルダに設置します。サブフォルダを作っても良いです。&lt;br /&gt;
設置したデータファイルは、テンプレートやショートコードから &lt;code&gt;.Site.Data&lt;/code&gt; 変数を介してアクセスできます。&lt;br /&gt;
具体的には、&lt;code&gt;.Site.Data&lt;/code&gt; に続けてサブフォルダ名、ファイル名を . (ドット)でつなげた変数に格納されます。&lt;br /&gt;
サブフォルダ名に . が入っていると変数を参照できなくなるので注意してください。&lt;/p&gt;

&lt;p&gt;例えば、日本の祝日リストのデータファイルを作成する場合は以下のようになります。&lt;/p&gt;

&lt;p&gt;まず、data/calendar/holidays.toml として祝日データファイルを保存します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;year_2016 = [
&amp;quot;1/1 元日&amp;quot;,
&amp;quot;1/11 成人の日&amp;quot;,
&amp;quot;2/11 建国記念の日&amp;quot;,
...
&amp;quot;12/23 天皇誕生日&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上のデータは変数 &lt;code&gt;.Site.Data.calendar.holidays&lt;/code&gt; に格納されますので、次のような記述でリストを表示できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
{{ range .Site.Data.calendar.holidays.year_2016 }}
  &amp;lt;li&amp;gt;{{ . }}&amp;lt;/li&amp;gt;
{{ end }}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;data-driven-content&#34;&gt;Data-driven Content&lt;/h2&gt;

&lt;p&gt;Hugo ではデータファイルに加え、ローカル環境または外部サーバにある JSON / CSV ファイルをビルド時に自動取得して表示することができます。&lt;/p&gt;

&lt;p&gt;データは getJSON, getCSV 関数を使用して取得します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// JSONの場合
{{ $dataJ := getJSON &amp;quot;url&amp;quot; }}

// CSVの場合
{{ $dataC := getCSV &amp;quot;separator&amp;quot; &amp;quot;url&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引数の url はスペース区切りで分割して書くこともできます。例えば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;https://gohugo.io&amp;quot; &amp;quot;/extras&amp;quot; &amp;quot;/datadrivencontent/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は結合した一つのURL&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;https://gohugo.io/extras/datadrivencontent/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として扱われます。&lt;/p&gt;

&lt;p&gt;ローカル環境のファイルを指定する場合は、ファイルをワークフォルダ（hugoのサイトフォルダ）内に置き、url はフォルダ内の相対パスで指定してください。&lt;/p&gt;

&lt;p&gt;CSVの場合は次のように行や列を指定して表示します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;table&amp;gt;
{{ range $i, $r := getCSV &amp;quot;,&amp;quot; &amp;quot;http://.../sample.csv” }}
{{ if gt $i 0 }}
&amp;lt;tr&amp;gt;
  &amp;lt;td&amp;gt;{{ index $r 0 }}&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;{{ index $r 1 }}&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;{{ index $r 2 }}&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
{{ end }}
{{ end }}
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;変数 &lt;code&gt;$i&lt;/code&gt; には行番号（0始まり）が、&lt;code&gt;$r&lt;/code&gt; には各行のデータが格納されます。&lt;br /&gt;
データは index 関数を使用して取得します。第１引数は行全体のデータ、第２引数は列番号（0始まり）です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;キャッシュ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;リモートデータはビルドまたはプレビュー（ライブリロード）時に取得しています。一度取得したデータはキャッシュされますので注意してください。&lt;br /&gt;
キャッシュされたデータはデフォルトでは &lt;code&gt;$TMPDIR/hugo_cache/&lt;/code&gt; に保存されますが、&lt;code&gt;hugo&lt;/code&gt; コマンドのオプション &lt;code&gt;--cacheDir&lt;/code&gt; でフォルダを変更することもできます。&lt;/p&gt;

&lt;p&gt;また、&lt;code&gt;--ignoreCache&lt;/code&gt; オプションを使用すると、キャッシュを使用せずビルドの度に毎回取得することもできます。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（テーマ編）</title>
      <link>http://staff.feedtailor.jp/2016/07/06/hugo_12</link>
      <pubDate>Wed, 06 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/07/06/hugo_12</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の &lt;strong&gt;テーマ（theme）&lt;/strong&gt;ついて。&lt;/p&gt;

&lt;p&gt;Hugoでは、WordPressや他のCMS、ブログと同じようにテーマを利用してデザインを変更できます。&lt;br /&gt;
また、自分で作成したレイアウトテンプレートや画像等をテーマとして纏めておくことで、コンテンツを変更することなくサイトのデザインを変更できるようになります。&lt;/p&gt;

&lt;p&gt;Hugoにはデフォルトのテーマがありませんので、新規サイト作成時にはお好みのテーマを選択して適用してください。テーマの適用後もデザインは自由にカスタマイズ可能です。&lt;/p&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;Hugo themes&lt;/a&gt; というサイトにコミュニティで作られたテーマが多数公開されています。&lt;br /&gt;
各テーマは GitHub で公開されていますので、以下のように git コマンドでインストールしてください。「gitって何？」という方は後述の zip ファイルをダウンロードしてインストールすることもできます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;全てのテーマをインストール (git)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone --recursive https://github.com/spf13/hugoThemes.git themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;特定のテーマをインストール (git)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir themes
$ cd theme
$ git clone テーマのURL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;URLは&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;GitHubのリポジトリ&lt;/a&gt;からインストールしたいテーマを選択し、画面右上にある緑の &amp;ldquo;Clone or download&amp;rdquo; ボタンで表示できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2016/07/hugo_12_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;特定のテーマをインストール (zip)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;GitHubのリポジトリ&lt;/a&gt;からインストールしたテーマを選択し、画面右上にある緑の &amp;ldquo;Clone or download&amp;rdquo; ボタンから &amp;ldquo;Download ZIP&amp;rdquo; を実行してください。&lt;br /&gt;
config.toml と同じ階層に themes フォルダを作成し、ダウンロードしたzipファイルを展開します。
展開したフォルダは hugo-uno-4bc5f0c635995c55723284be3b0f826c86efdd13 のように末尾に長い英数字（gitのリビジョン）がついているので、最後の - 以降を削除（hugo-uno に名前を変更）します。&lt;/p&gt;

&lt;h2 id=&#34;テーマを適用する&#34;&gt;テーマを適用する&lt;/h2&gt;

&lt;p&gt;テーマを適用する方法は２つあります。一つがコマンドラインの引数、もう一つは設定ファイルで指定です。&lt;/p&gt;

&lt;p&gt;コマンドラインでは以下のように &amp;ldquo;-t テーマ名&amp;rdquo; を追加します。&lt;code&gt;hugo server&lt;/code&gt; コマンドでも同様です。テーマ名は themes フォルダ内にあるテーマのフォルダ名です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo -t テーマ名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定ファイルで指定する場合は config.toml に以下のように記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# config.toml
theme = &amp;quot;テーマ名&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;テーマをカスタマイズする&#34;&gt;テーマをカスタマイズする&lt;/h2&gt;

&lt;p&gt;テーマフォルダ（themes/テーマ名）内の構造はサイトと同様で layouts、static、archetypes フォルダがあります。&lt;/p&gt;

&lt;p&gt;カスタマイズしたい場合はテーマフォルダ内のファイルを直接変更するのではなく、変更したいファイルを対応するサイトのフォルダ（layouts等）にコピーして編集します。
例えば、themes/テーマ名/&lt;strong&gt;layouts/defaults/single.html&lt;/strong&gt; を変更したい場合は、&lt;strong&gt;layouts/defaults/single.html&lt;/strong&gt; にファイルをコピーして変更します。&lt;br /&gt;
staticやarchetypesフォルダ内のファイルも同様です。&lt;/p&gt;

&lt;h2 id=&#34;テーマを作成する&#34;&gt;テーマを作成する&lt;/h2&gt;

&lt;p&gt;新たにテーマを作成する時は以下のコマンドを使用するのが便利です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new theme テーマ名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コマンドを実行すると themes/テーマ名 フォルダにテーマのひな型が作成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;themes/
└── テーマ名
    ├── LICENSE.md
    ├── archetypes
    │   └── default.md
    ├── layouts
    │   ├── 404.html
    │   ├── _default
    │   │   ├── list.html
    │   │   └── single.html
    │   ├── index.html
    │   └── partials
    │       ├── footer.html
    │       └── header.html
    ├── static
    │   ├── css
    │   └── js
    └── theme.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先ほどの layouts、static、archetypes フォルダとtheme.toml、各フォルダにはダミーのファイルやフォルダ（archetypes/default.md, static/css &amp;hellip;）が生成されますのでそれらを変更するのが良いでしょう。&lt;/p&gt;

&lt;p&gt;theme.toml には作者やライセンス、config.toml に記載する設定のサンプル等を記載します。ページ生成には影響しません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/themes/creation/&#34;&gt;http://gohugo.io/themes/creation/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（Taxonomy編）</title>
      <link>http://staff.feedtailor.jp/2016/06/29/hugo_11</link>
      <pubDate>Wed, 29 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/06/29/hugo_11</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の Taxonomy ついて。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Taxonomy&lt;/strong&gt; （タクソノミー）とは、ざっくり言うとコンテンツをグルーピングする &lt;strong&gt;分類&lt;/strong&gt; のことです。&lt;/p&gt;

&lt;p&gt;Hugo ではデフォルトで &lt;strong&gt;tags&lt;/strong&gt; と &lt;strong&gt;categories&lt;/strong&gt; の２つの Taxonomy が定義されています。Taxonomy を使用すると Hugo は自動的に Taxonomy 自体のリスト(tags, categories, &amp;hellip;)、各Taxonomy毎のキーのリスト、各Taxonomyに紐づくコンテンツのリストを生成します。&lt;/p&gt;

&lt;h2 id=&#34;定義&#34;&gt;定義&lt;/h2&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;Taxonomy&lt;/th&gt;&lt;td&gt;コンテンツを分類するカテゴリ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Term&lt;/th&gt;&lt;td&gt;Taxonomyに含まれるキー&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Value&lt;/th&gt;&lt;td&gt;Termに紐づけられたコンテンツ&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;公式ドキュメントに記載されている俳優(Actor)というTaxonomyと出演作品（Content）の例をあげます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Actor                    &amp;lt;- Taxonomy
    Bruce Willis         &amp;lt;- Term
        The Six Sense    &amp;lt;- Content
        Unbreakable      &amp;lt;- Content
    Samuel L. Jackson    &amp;lt;- Term
        Unbreakable      &amp;lt;- Content
        The Avengers     &amp;lt;- Content
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同じ内容をContentでまとめると次のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Unbreakable                 &amp;lt;- Content
    Actors                  &amp;lt;- Taxonomy
        Bruce Willis        &amp;lt;- Term
        Samuel L. Jackson   &amp;lt;- Term
The Six Sense
    Actors                  &amp;lt;- Taxonomy
        Bruce Willis        &amp;lt;- Term
The Avengers
    Actors                  &amp;lt;- Taxonomy
        Samuel L. Jackson   &amp;lt;- Term
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#39;http://staff.feedtailor.jp/2016/05/18/hugo_06&#39;&gt;コンテンツ編１&lt;/a&gt; でも記載したように tag, category 以外の Taxonomy を利用するためには config.toml に定義を記載しなければいけません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// config.toml
[taxonomies]
tag = &amp;quot;tags&amp;quot;
category = &amp;quot;categories&amp;quot;
series = &amp;quot;series&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;左辺が Taxonomy の名前（&lt;strong&gt;SINGULAR&lt;/strong&gt; key）で、右辺がそれをコンテンツに紐づけるための値（&lt;strong&gt;PLURAL&lt;/strong&gt; value）です。&lt;br /&gt;
フロントマターには右辺の tags, categories, series を指定します。&lt;/p&gt;

&lt;h2 id=&#34;使用方法&#34;&gt;使用方法&lt;/h2&gt;

&lt;p&gt;コンテンツのテンプレートで、そのコンテンツが紐づく Taxonomy は変数 &lt;code&gt;.Params&lt;/code&gt; を介してアクセスできます。&lt;br /&gt;
例えば、自身の紐づくtags の Term リストは以下のように表示します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul id=&amp;quot;tags&amp;quot;&amp;gt;
  {{ range .Params.tags }}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt;
  {{ end }}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;全ての Taxonomy の情報は変数 &lt;code&gt;.Site.Taxonomies&lt;/code&gt; に格納されています。&lt;br /&gt;
例えば、サイト全体で使用されている tags の Term とコンテンツのリストは以下のように表示します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul id=&amp;quot;all-tags&amp;quot;&amp;gt;
  {{ range $name, $taxonomy := .Site.Taxonomies.tags }}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/tags/{{ $name | urlize }}&amp;quot;&amp;gt;{{ $name }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;ul&amp;gt;
        {{ range $taxonomy.Pages }}
        &amp;lt;li hugo-nav=&amp;quot;{{ .RelPermalink}}&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink}}&amp;quot;&amp;gt; {{ .LinkTitle }} &amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt;
        {{ end }}
    &amp;lt;/ul&amp;gt;
  {{ end }}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上の例の &lt;code&gt;$name&lt;/code&gt; には Term が、&lt;code&gt;$taxonomy&lt;/code&gt; には Term に紐づくコンテンツの情報が格納されています。&lt;/p&gt;

&lt;h2 id=&#34;リストテンプレート&#34;&gt;リストテンプレート&lt;/h2&gt;

&lt;h3 id=&#34;termのリスト&#34;&gt;Termのリスト&lt;/h3&gt;

&lt;p&gt;Taxonomy の Term のリストは /&lt;em&gt;PLURAL&lt;/em&gt;/ （PLURAL は config.toml の右辺： /tags/, /categories/）というURLで生成されます。&lt;br /&gt;
使用されるテンプレートは以下の順に検索されます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;/layouts/taxonomy/&lt;em&gt;SINGULAR&lt;/em&gt;.terms.html&lt;br /&gt;
（SINGULAR は config.toml の左辺： tag, category）&lt;/li&gt;
&lt;li&gt;/layouts/_default/terms.html&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;どちらも存在しない場合はページは生成されません。
上のテンプレートでは Term は変数 &lt;strong&gt;.Data.Terms&lt;/strong&gt; に格納されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  {{ $data := .Data }}
  {{ range $key, $value := .Data.Terms }}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ $data.Plural }}/{{ $key | urlize }}&amp;quot;&amp;gt;{{ $key }}&amp;lt;/a&amp;gt; {{ len $value }}&amp;lt;/li&amp;gt;
  {{ end }}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/templates/terms/&#34;&gt;http://gohugo.io/templates/terms/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;termに紐づくコンテンツのリスト&#34;&gt;Termに紐づくコンテンツのリスト&lt;/h3&gt;

&lt;p&gt;特定の Term に紐づくコンテンツのリストは /&lt;em&gt;PLURAL&lt;/em&gt;/Term/ (例えば /tags/hugo/) というURLで生成されます。&lt;br /&gt;
使用されるテンプレートは以下の順に検索されます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;/layouts/taxonomy/&lt;em&gt;SINGULAR&lt;/em&gt;.html (例： /layouts/taxonomy/topic.html)&lt;/li&gt;
&lt;li&gt;/layouts/_default/taxonomy.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/list.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/taxonomy/&lt;em&gt;SINGULAR&lt;/em&gt;.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/_default/taxonomy.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/_default/list.html&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上のテンプレートでは変数 &lt;code&gt;.Data.Pages&lt;/code&gt; にコンテンツの情報が格納されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages }}
&amp;lt;li&amp;gt;
&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
&amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/templates/list/&#34;&gt;http://gohugo.io/templates/list/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（リスト編）</title>
      <link>http://staff.feedtailor.jp/2016/06/22/hugo_10</link>
      <pubDate>Wed, 22 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/06/22/hugo_10</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; のリストページと並び順について。&lt;/p&gt;

&lt;h2 id=&#34;リストページ&#34;&gt;リストページ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#39;http://staff.feedtailor.jp/2016/04/20/hugo_03&#39;&gt;レイアウト編１&lt;/a&gt;でご紹介したように Hugo では Homepage や List テンプレートで全コンテンツや任意の section/type、taxonomy のリストページを作ることができます。&lt;/p&gt;

&lt;p&gt;例えば、Homepage (サイトのトップページ) では &lt;code&gt;.Data.Pages&lt;/code&gt; という変数にすべてのコンテンツの情報が格納されています。これを表示するにはテンプレートで &lt;code&gt;range&lt;/code&gt; を使用して以下のように記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages }}
&amp;lt;li&amp;gt;
&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
&amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;range&lt;/code&gt; から &lt;code&gt;end&lt;/code&gt; がループで、その間はループの現在値（ページの値）に . で直接アクセスできます。&lt;/p&gt;

&lt;p&gt;section のリストページでは &lt;code&gt;.Data.Pages&lt;/code&gt; に該当する section のコンテンツのみが格納されます。section のリストページとしてどのレイアウトが使用されるかは&lt;a href=&#39;http://staff.feedtailor.jp/2016/05/11/hugo_05&#39;&gt;レイアウト編３&lt;/a&gt;を参照ください。&lt;/p&gt;

&lt;h3 id=&#34;並び順&#34;&gt;並び順&lt;/h3&gt;

&lt;p&gt;Hugo はデフォルト（前述の例）でコンテンツのソートに &lt;strong&gt;weight&lt;/strong&gt; と &lt;strong&gt;date&lt;/strong&gt; という２つのパラメータを使用します。&lt;br /&gt;
どちらもフロントマターで指定します。必須ではありません。&lt;/p&gt;

&lt;p&gt;まず &lt;strong&gt;weight&lt;/strong&gt; でソートして、その後 &lt;strong&gt;date&lt;/strong&gt; の新しいものから順に並べます。
&lt;strong&gt;weight&lt;/strong&gt; は値が大きいほど後ろに追加（日付が古い方）へ追加されます。&lt;strong&gt;weight&lt;/strong&gt; が指定されていない場合は weight=0 と同じです。&lt;strong&gt;weight&lt;/strong&gt; と &lt;strong&gt;date&lt;/strong&gt; のどちらも指定されていない場合は、順序は保証されません。&lt;/p&gt;

&lt;p&gt;コンテンツの並び順を変更したい場合は、コンテンツ格納している配列（.Data.Pages）に並び順を指定することでソートします。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;weight -&amp;gt; date (デフォルト)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;dateのみ（weightを無視する）&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByDate }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;title&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByPublishDate }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他にも &lt;code&gt;.ByPublishDate&lt;/code&gt;, &lt;code&gt;.ByLastMod&lt;/code&gt;, &lt;code&gt;.ByLength&lt;/code&gt;, &lt;code&gt;.ByLinkTitle&lt;/code&gt;, &lt;code&gt;.Reverse&lt;/code&gt; 等が利用できます。&lt;/p&gt;

&lt;h3 id=&#34;グルーピング&#34;&gt;グルーピング&lt;/h3&gt;

&lt;p&gt;並び順だけではなく、date や任意のページ変数、ページパラメータ等でコンテンツをグルーピングすることもできます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;date&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;年月でグルーピングする場合&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.GroupByDate &amp;quot;2006-01&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;年月日でグルーピングする場合&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.GroupByDate &amp;quot;2006-01-02&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ページ変数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;sectionの部分が変数名です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.GroupBy &amp;quot;Section&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ページパラメータ&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.GroupByParam &amp;quot;param_key&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;フィルタリング&#34;&gt;フィルタリング&lt;/h3&gt;

&lt;p&gt;件数を制限したり、特定の条件で絞り込むこともできます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;件数制限&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range first 10 .Data.Pages }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;絞り込み&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range where .Data.Pages &amp;quot;Section&amp;quot; &amp;quot;post&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;組み合わせ&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range first 5 (where .Data.Pages &amp;quot;Section&amp;quot; &amp;quot;post&amp;quot;) }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;range&lt;/code&gt; の扱いは難しいところもありますが、他にも細かな設定が可能ですので是非お試しください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/templates/list/&#34;&gt;http://gohugo.io/templates/list/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（コンテンツ編３）</title>
      <link>http://staff.feedtailor.jp/2016/06/15/hugo_09</link>
      <pubDate>Wed, 15 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/06/15/hugo_09</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の &lt;strong&gt;shortcodes&lt;/strong&gt; について。&lt;/p&gt;

&lt;p&gt;Hugo はコンテンツの記述にMarkdown記法を用いますが、Markdown記法はシンプルで覚えやすい反面、対応していない事項が多数あります。&lt;br /&gt;
例えば、コンテンツにスタイルを適用したりビデオを埋め込んだりしたい場合はHTMLを直接書かなければいけません。&lt;/p&gt;

&lt;p&gt;それらを回避するために Hugo では &lt;strong&gt;shortcodes&lt;/strong&gt; という仕組みが用意されています。&lt;/p&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;p&gt;shortcode とは簡単に言うとコンテンツファイルの中で使用できるスニペットです。&lt;br /&gt;
※テンプレートファイルの中には記述できませんので注意してください。&lt;/p&gt;

&lt;p&gt;使い方は簡単で、コンテンツ内に以下のようなタグを記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% name parameters %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一つ目の単語が shortcode の名前で、それにパラメータが続きます。パラメータはスペース区切りで複数指定でき、スペースを含むパラメータはダブルクオートで括ります。
パラメータは name=&amp;ldquo;value&amp;rdquo; という形式で名前つきで指定することもできます。&lt;/p&gt;

&lt;p&gt;また、HTML と同じように終了タグが必要なものがあります。その場合は、以下のように記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% name parameters %}} shortcode&#39;s **inner** content {{% /name %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上の例は shortcode のタグに % を使っていましたが &amp;lt; &amp;gt; を使用する場合もあります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; name parameters &amp;gt;}} shortcode&#39;s &amp;lt;strong&amp;gt;inner&amp;lt;strong&amp;gt; content {{&amp;lt; /name &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;% と &amp;lt; &amp;gt; では、タグの間のコンテンツの扱いが異なります。&lt;br /&gt;
% はタグ間のコンテンツをMarkdown変換しますが、&amp;lt; &amp;gt; は変換せずそのままHTMLに出力されます。&lt;/p&gt;

&lt;h2 id=&#34;作り方&#34;&gt;作り方&lt;/h2&gt;

&lt;p&gt;shortcode は、layouts/shortcodes フォルダ内にテンプレートを配置します。&lt;br /&gt;
テンプレートのファイル名が shortcode の名前になります。&lt;/p&gt;

&lt;h4 id=&#34;パラメータの取得&#34;&gt;パラメータの取得&lt;/h4&gt;

&lt;p&gt;shortcode に渡されたパラメータを取得する方法は二つあります。&lt;/p&gt;

&lt;p&gt;名前付きでパラメータを指定した場合は、テンプレート中から以下のように取得できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Get &amp;quot;parameter_name&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パラメータが名前つきでない場合は、ポジションを指定します。0 が先頭パラメータのポジションです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Get 0 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;変数&#34;&gt;変数&lt;/h4&gt;

&lt;p&gt;開始タグと終了タグの間に記述した部分は &lt;code&gt;.Inner&lt;/code&gt; 変数に格納されます。&lt;br /&gt;
&lt;code&gt;.Inner&lt;/code&gt; を使用している shortcode の終了タグを省略する場合は以下のように記述してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; name parameters /&amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、shortcode を記述したページには &lt;code&gt;.Page&lt;/code&gt; 変数を介してアクセスできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Page.Title }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使用例&#34;&gt;使用例&lt;/h2&gt;

&lt;h4 id=&#34;例1-baseurl&#34;&gt;例1. baseurl&lt;/h4&gt;

&lt;p&gt;簡単な例として、コンテンツ内にサイトの BaseURL を埋め込む shortcode をご紹介します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;layouts/shortcodes/baseurl.html&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Page.Site.BaseURL }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテンツ内で &lt;code&gt;{{&amp;lt; baseurl &amp;gt;}}&lt;/code&gt; と記述すると、当サイトでしたらHTMLに &lt;code&gt;http://staff.feedtailor.jp/&lt;/code&gt; と出力されます。&lt;/p&gt;

&lt;h4 id=&#34;例2-div&#34;&gt;例2. div&lt;/h4&gt;

&lt;p&gt;もう少しだけ複雑な例として style 属性を指定できる div タグの shortcode を挙げます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;layouts/shortcodes/div.html&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div{{ with .Get &amp;quot;style&amp;quot; }} style=&amp;quot;{{ . | safeCSS }}&amp;quot;{{ end }}&amp;gt;{{ .Inner }}&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテンツには以下のように記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; div style=&amp;quot;color: red;&amp;quot; &amp;gt;}}red{{&amp;lt; /div &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際にこのエントリに埋め込んでみたところ、&lt;/p&gt;

&lt;div style=&#34;color: red;&#34;&gt;red&lt;/div&gt;

&lt;p&gt;が出力されています。&lt;/p&gt;

&lt;p&gt;このように shortcode を定義すると、コンテンツに複雑なHTMLを配置したり、繰り返し記述する定型文を簡単に埋め込むことができるようになります。&lt;br /&gt;
Hugo に最初から組み込まれている便利な shortcodes もありますのでぜひ活用してください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/extras/shortcodes/&#34;&gt;http://gohugo.io/extras/shortcodes/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータ「Hugo」v0.16 がリリースされました</title>
      <link>http://staff.feedtailor.jp/2016/06/08/hugo_08</link>
      <pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/06/08/hugo_08</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;2016/06/06(現地時間)に、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の v0.16 がリリースされました。&lt;br /&gt;
今回は、新バージョンの変更点をご紹介します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases/tag/v0.16&#34;&gt;リリースノーツ&lt;/a&gt; をみたところ、Hugoの開発着手からちょうど 3 年だそうです。
前バージョンである v0.15 からは約 6 ヶ月ぶりのアップデートになります。&lt;br /&gt;
バージョン番号こそ 0.16 ですが、不具合も少なく、十分に安定して使用できています。&lt;/p&gt;

&lt;h3 id=&#34;アップデート&#34;&gt;アップデート&lt;/h3&gt;

&lt;p&gt;Mac の Homebrew を利用している場合は、簡単にアップデートできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew update
$ brew upgrade hugo
$ hugo version
Hugo Static Site Generator v0.16 BuildDate: 2016-06-06T21:37:59+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;debian / ubuntu linuxは、公式リポジトリに登録されましたので、以下のコマンドでインストールできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Window版は &lt;a href=&#34;https://github.com/spf13/hugo/releases/tag/v0.16&#34;&gt;こちら&lt;/a&gt; からダウンロードして exe ファイルを置き換えてください。&lt;/p&gt;

&lt;h3 id=&#34;主な新機能&#34;&gt;主な新機能&lt;/h3&gt;

&lt;h4 id=&#34;partial-builds&#34;&gt;Partial Builds&lt;/h4&gt;

&lt;p&gt;前バージョンまでは、サイトのプレビュー中（&lt;code&gt;hugo server&lt;/code&gt;）にコンテンツの変更点を感知した時、サイト全体を再生成していましたが、今バージョンからは、ファイルシステムを監視し変更されたファイルだけを再読み込みすることで、必要な部分だけを再生成するように変更されています。&lt;br /&gt;
テストの結果、ビルド回数が 10% から最大 90% を減少したと記載されています。&lt;/p&gt;

&lt;h4 id=&#34;template-の改善&#34;&gt;Template の改善&lt;/h4&gt;

&lt;p&gt;今バージョンでは、Go 1.6 で導入された &lt;code&gt;block&lt;/code&gt; キーワードに対応しました。&lt;/p&gt;

&lt;h3 id=&#34;その他の機能改善-修正&#34;&gt;その他の機能改善・修正&lt;/h3&gt;

&lt;p&gt;その他、小さいけれども重要な機能改善・修正事項が多数記載されていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;設定ファイルの Live Reload 対応&lt;/li&gt;
&lt;li&gt;エラー終了時のエラーコード出力&lt;/li&gt;
&lt;li&gt;環境変数からオプションを取得&lt;/li&gt;
&lt;li&gt;themesDir オプションを追加&lt;/li&gt;
&lt;li&gt;ソースファイルベースの相対リンク&lt;/li&gt;
&lt;li&gt;ソート関数 ByLastmod を追加&lt;/li&gt;
&lt;li&gt;ソート関数 ByCount の一貫性改善&lt;/li&gt;
&lt;li&gt;テンプレート関数の追加 &lt;code&gt;readFile&lt;/code&gt; &lt;code&gt;countword&lt;/code&gt; &lt;code&gt;jsonify&lt;/code&gt; &lt;code&gt;slice&lt;/code&gt; &amp;hellip;&lt;/li&gt;
&lt;li&gt;404.html のページ生成無効化オプションを追加&lt;/li&gt;
&lt;li&gt;content, layout, static, theme のシンボリックリンク対応&lt;/li&gt;
&lt;li&gt;server 起動時に指定ポートが使用中の場合は起動中止&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この中ではエラーコード出力とserver起動時のポートチェックが特に嬉しいです。シェルスクリプトからの起動やエラー判定に役立ちます！&lt;br /&gt;
他には、設定ファイルのリロード、ByCountの一貫性改善、テンプレート関数の追加でしょうか。&lt;/p&gt;

&lt;p&gt;他にもまだまだ変更点がありますので、気になった点は動作検証してまた改めてご紹介したいと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（コンテンツ編２）</title>
      <link>http://staff.feedtailor.jp/2016/06/01/hugo_07</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/06/01/hugo_07</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の &lt;strong&gt;archetype&lt;/strong&gt; について。&lt;/p&gt;

&lt;p&gt;Hugo では、新しいコンテンツを追加する時、予め用意した雛形からコピー作成することができます。この雛形のことを &lt;strong&gt;archetype&lt;/strong&gt; と呼びます。&lt;/p&gt;

&lt;p&gt;archetype を使用すると毎回フロントマターに同じ項目を追加したり、同じ書き出し文を書いたりする煩わしさから解放されます。&lt;/p&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;p&gt;以下、フロントマターの categories と tags という項目と&amp;rdquo;こんにちは XXX です。&amp;rdquo;という本文を archetype で生成する方法を例示します。&lt;br /&gt;
まず、雛形ファイルを作成します。archetypes/default.md という名前で次の内容を保存してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
# YAML形式の場合
categories:
  - &amp;quot;a&amp;quot;
  - &amp;quot;b&amp;quot;
tags:
  - &amp;quot;x&amp;quot;
  - &amp;quot;y&amp;quot;
---
こんにちは XXX です。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に hugo コマンドでコンテンツを追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/test.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hugoコマンドの第２引数は content ファルダからの相対パスを指定します。この例ではファイル content/post/test.md が生成されます。&lt;br /&gt;
生成されたファイルを開くと次のような内容になっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
categories = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;]
date = &amp;quot;2016-06-01T15:25:17+09:00&amp;quot;
tags = [&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;]
title = &amp;quot;test&amp;quot;

+++
こんにちは XXX です。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで注意事項が４点あります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;生成されるコンテンツのフロントマターは archetype の形式に関係なく、デフォルトでは toml 形式になる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config.toml に metaDataFormat: &amp;ldquo;yaml&amp;rdquo; を追加すると yaml 形式に変更できます&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;項目 date と title が自動的に追加される&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;date はコンテンツを生成した日時、title はコンテンツのファイル名が自動設定されます&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;フロントマターの項目がアルファベット順に並べ替えられる&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;（YAML形式の場合）インデントが崩れる場合がある&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;あくまで雛形ですので、各項目は適宜修正してください。
因みに本エントリの archetype は以下のようになっています。ご参考まで。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
author: &amp;quot;&amp;quot;
layout: &amp;quot;post&amp;quot;
banner: &amp;quot;banners/placeholder.png&amp;quot;
archives:
  - &amp;quot;2016&amp;quot;
  - &amp;quot;2016/01&amp;quot;
  - &amp;quot;2016/01/01&amp;quot;
url: &amp;quot;/2016/01/01/xxx&amp;quot;
categories:
  - &amp;quot;&amp;quot;
tags:
  - &amp;quot;&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;archetypeの検索順&#34;&gt;archetypeの検索順&lt;/h2&gt;

&lt;p&gt;適用されるarchetypeは以下の順に検索されます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;archetypes/[コンテンツのtype].md&lt;/li&gt;
&lt;li&gt;archetypes/default.md&lt;/li&gt;
&lt;li&gt;themes/[テーマ名]/archetypes/[コンテンツのtype].md&lt;/li&gt;
&lt;li&gt;themes/[テーマ名]/archetypes/default.md&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;コンテンツのtypeは &lt;a href=&#34;http://staff.feedtailor.jp/2016/05/11/hugo_05/&#34;&gt;レイアウト編３&lt;/a&gt; でご説明したようにコンテンツが置かれたフォルダの１階層目に相当します。
従って、post/test.md を生成する場合は以下の順に検索して最初に見つかったものが適用されます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;archetypes/post.md&lt;/li&gt;
&lt;li&gt;archetypes/default.md&lt;/li&gt;
&lt;li&gt;themes/[テーマ名]/archetypes/post.md&lt;/li&gt;
&lt;li&gt;themes/[テーマ名]/archetypes/default.md&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;コンテンツの type は通常、フォルダの１階層目から決定されるのですが、hugo コマンドで直接 type を指定することもできます。&lt;br /&gt;
以下は test.md に type=post を指定する例です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new test.md -k post

または

$ hugo new test.md --kind=post
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;以上のようにコンテンツの内容や種別毎に archetype を生成しておくととても便利です。&lt;br /&gt;
毎回古いコンテンツからコピー作成している方や同じフロントマター項目を都度追加している方は archetype の導入を検討してみてはいかがでしょうか。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（コンテンツ編１）</title>
      <link>http://staff.feedtailor.jp/2016/05/18/hugo_06</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/05/18/hugo_06</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; のコンテンツのフロントマター(Front Matter)ついて。&lt;/p&gt;

&lt;p&gt;Hugo では、コンテンツ（Markdownファイル）のタイトル、日付、カテゴリや任意のパラメータ等のメタデータを追加することができます。&lt;/p&gt;

&lt;p&gt;メタデータはコンテンツファイルの先頭で指定しますが、この部分をフロントマターと呼びます。&lt;br /&gt;
フロントマターは以下の３つの形式に対応しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/minoritea/items/c0de47b8beb813c655d4&#34;&gt;TOML形式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-05-18&amp;quot;
title = &amp;quot;フロントマターTOML形式&amp;quot;
categories = [
  &amp;quot;Hugo&amp;quot;, &amp;quot;静的サイトジェネレータ&amp;quot;
] 
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/YAML&#34;&gt;YAML形式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;---
date: &amp;quot;2016-05-18&amp;quot;
title: &amp;quot;フロントマターYAML形式&amp;quot;
categories:
  - &amp;quot;Hugo&amp;quot;
  - &amp;quot;静的サイトジェネレータ&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/JavaScript_Object_Notation&#34;&gt;JSON形式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;date&amp;quot;: &amp;quot;2016-05-18&amp;quot;,
    &amp;quot;title&amp;quot;: &amp;quot;フロントマターJSON形式&amp;quot;,
    &amp;quot;categories&amp;quot;: [
        &amp;quot;Hugo&amp;quot;,
        &amp;quot;静的サイトジェネレータ&amp;quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;必須パラメータ&#34;&gt;必須パラメータ&lt;/h3&gt;

&lt;table&gt;
&lt;tr&gt;&lt;td&gt;title&lt;/td&gt;&lt;td&gt;コンテンツのタイトル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;date&lt;/td&gt;&lt;td&gt;コンテンツの日付（ソートに使用されます）&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;オプションパラメータ&#34;&gt;オプションパラメータ&lt;/h3&gt;

&lt;table&gt;
&lt;tr&gt;&lt;td&gt;description&lt;/td&gt;&lt;td&gt;コンテンツの説明文&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;draft&lt;/td&gt;&lt;td&gt;下書きフラグ&lt;br&gt;true に設定するとビルド時に --buildDrafts オプションを&lt;br&gt;つけなければページが生成されません。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;publishdate&lt;/td&gt;&lt;td&gt;発行日&lt;br&gt;true に設定するとビルド時に --buildFuture オプションを&lt;br&gt;つけなければページが生成されません。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;コンテンツのタイプ&lt;br&gt;詳しくは&lt;a href=&#34;http://staff.feedtailor.jp/2016/05/11/hugo_05/&#34;&gt;前回のエントリ&lt;/a&gt;を参照ください。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;isCKJLanguage&lt;/td&gt;&lt;td&gt;日本語韓国語中国語を含む場合は true を設定してください。&lt;br&gt;サマリーや文字数カウントに影響します。&lt;br&gt;config.toml の hasCJKLanguage を true にすると&lt;br&gt;自動判定されますので省略可能です。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;weight&lt;/td&gt;&lt;td&gt;エントリの並び順を変更する時に使用します。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;slug&lt;/td&gt;&lt;td&gt;URLの末尾、ファイル名部分を変更します。&lt;br&gt;詳しくは&lt;a href=&#34;http://staff.feedtailor.jp/2016/05/11/hugo_05/&#34;&gt;前回のエントリ&lt;/a&gt;を参照ください。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;url&lt;/td&gt;&lt;td&gt;URLを変更します。&lt;br&gt;詳しくは&lt;a href=&#34;http://staff.feedtailor.jp/2016/05/11/hugo_05/&#34;&gt;前回のエントリ&lt;/a&gt;を参照ください。&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;カテゴリ-タグについて&#34;&gt;カテゴリ・タグについて&lt;/h3&gt;

&lt;p&gt;Hugo ではコンテンツをグルーピングするカテゴリやタグ等の分類のことを taxonomies と呼びます。&lt;/p&gt;

&lt;p&gt;コンテンツで指定した taxonomies は、画面に表示したり、グルーピングしたコンテンツのリストページの生成に使用できます。&lt;/p&gt;

&lt;p&gt;以下はコンテンツにカテゴリ &amp;ldquo;開発&amp;rdquo; とタグ &amp;ldquo;Hugo&amp;rdquo; &amp;ldquo;静的サイトジェネレータ&amp;rdquo; を追加する例です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
date: &amp;quot;2016-05-18&amp;quot;
title: &amp;quot;フロントマターYAML形式&amp;quot;
categories:
  - &amp;quot;ウェブサイト&amp;quot;
tags
  - &amp;quot;Hugo&amp;quot;
  - &amp;quot;静的サイトジェネレータ&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;taxonomies にはデフォルト値として &lt;strong&gt;categories&lt;/strong&gt; と &lt;strong&gt;tags&lt;/strong&gt; が設定されていますが、自由に追加、変更することができます。&lt;br /&gt;
categories, tags 以外の taxonomies を追加する場合は config.toml に定義を追加してください。この時、追加するものだけを記述すると tags, categories が使用できなくなりますので、残したい場合は以下のように全て記述してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[taxonomies]
  tag = &amp;quot;tags&amp;quot;
  category = &amp;quot;categories&amp;quot;
  series = &amp;quot;series&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のように記述すると、コンテンツのフロントマターで ”series&amp;rdquo; が使用できるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
date: &amp;quot;2016-05-18&amp;quot;
title: &amp;quot;フロントマターYAML形式&amp;quot;
categories:
  - &amp;quot;ウェブサイト&amp;quot;
tags:
  - &amp;quot;Hugo&amp;quot;
  - &amp;quot;静的サイトジェネレータ&amp;quot;
series:
  - &amp;quot;Hugoを使ったサイト構築&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ユーザ定義パラメータ&#34;&gt;ユーザ定義パラメータ&lt;/h3&gt;

&lt;p&gt;Hugo では、コンテンツに対して上で紹介した以外の任意のパラメータを追加することができます。&lt;br /&gt;
以下は camelCase というパラメータを追加した例です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
date: &amp;quot;2016-05-18&amp;quot;
title: &amp;quot;フロントマターYAML形式&amp;quot;
camelCase: true
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;予め定義されていないパラメータは全て params という変数に格納されます。また、パラメータ名は全て小文字に変換されます。&lt;br /&gt;
従って、上の camelCase パラメータをレイアウトで使用する場合は、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Params.camelcase }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように記述してください。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（レイアウト編３）</title>
      <link>http://staff.feedtailor.jp/2016/05/11/hugo_05</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/05/11/hugo_05</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; のレイアウトの決定方法とパーマリンクについて。&lt;/p&gt;

&lt;p&gt;Hugo では、コンテンツ（Markdownファイル）のフォルダ階層や記述するフロントマターによって使用するレイアウトやパーマリンク（生成されるパス）を変更することができます。&lt;/p&gt;

&lt;p&gt;標準構成では次のように content フォルダそのままの階層で HTML が生成されます。&lt;br /&gt;
※configファイルで uglyURLs というパラメータを true に変更すると [baseURL]/post/firstpost.html という構成にもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
└── content
    ├── post
    |   ├── firstpost.md   // &amp;lt;- [baseURL]/post/firstpost/
    |   ├── happy
    |   |   └── ness.md    // &amp;lt;- [baseURL]/post/happy/ness/
    |   └── secondpost.md  // &amp;lt;- [baseURL]/post/secondpost/
    └── quote
        ├── first.md       // &amp;lt;- [baseURL]/quote/first/
        └── second.md      // &amp;lt;- [baseURL]/quote/second/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下はURLやレイアウトを決定するために使用するパラメータ、変数です。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;パラメータ&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;th&gt;フロント&lt;br&gt;マター&lt;/th&gt;&lt;th&gt;変数&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;slug&lt;/th&gt;&lt;td&gt;URLのファイル名部分を変更するパラメータ。&lt;/td&gt;&lt;td&gt;◯&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;URLを変更するパラメータ。&lt;br&gt;baseURL からのパス全体を指定する。&lt;/td&gt;&lt;td&gt;◯&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;section&lt;/th&gt;&lt;td&gt;コンテンツが置かれたフォルダの１階層目。&lt;br&gt;リストページ生成やレイアウト決定に使用される。&lt;br&gt;content 直下の場合は空。&lt;/td&gt;&lt;td&gt;×&lt;/td&gt;&lt;td&gt;.Section&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;type&lt;/th&gt;&lt;td&gt;section と同じ値だが、フロントマターで&lt;br&gt;上書き可能。&lt;br&gt;content 直下の場合は &#34;page&#34; が設定される。&lt;/td&gt;&lt;td&gt;◯&lt;/td&gt;&lt;td&gt;.Type&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;例えば、コンテンツ content/a/b/c.md の場合、各値は以下のようになります。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;permalink&lt;/th&gt;&lt;td&gt; [baseURL]/a/b/c/index.html &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;section  &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;type     &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;このコンテンツのフロントマターに slug:&amp;ldquo;d&amp;rdquo; を追加すると生成されるファイルの位置が変わります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
// YAML形式のフロントマター
date: 2016-05-11
title: &amp;quot;サンプル&amp;quot;
slug: &amp;quot;d&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;slug     &lt;/th&gt;&lt;td&gt;&lt;strong&gt; d &lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;permalink&lt;/th&gt;&lt;td&gt;&lt;strong&gt;[baseURL]/a/b/d/index.html &lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;section  &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;type     &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;更にフロントマターで url: &amp;ldquo;x/y/z&amp;rdquo; を追加すると生成されるファイルの位置が変わります。slug と url を両方指定した場合は url が優先されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
date: 2016-05-11
title: &amp;quot;サンプル&amp;quot;
slug: &amp;quot;d&amp;quot;
url: &amp;quot;x/y/z&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;slug     &lt;/th&gt;&lt;td&gt; d &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;url      &lt;/th&gt;&lt;td&gt;&lt;strong&gt; x/y/z &lt;strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;permalink&lt;/th&gt;&lt;td&gt;&lt;strong&gt; [baseURL]/x/y/z/index.html &lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;section  &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;type     &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;このコンテンツのフロントマターで type:&amp;ldquo;e&amp;rdquo; を指定してもファイルの位置は変わりませんが、後述する通りレイアウトの検索順が変わります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
date: 2016-05-11
title: &amp;quot;サンプル&amp;quot;
slug: &amp;quot;d&amp;quot;
url: &amp;quot;x/y/z&amp;quot;
type: &amp;quot;e&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;slug     &lt;/th&gt;&lt;td&gt; d &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;url      &lt;/th&gt;&lt;td&gt; x/y/z &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;permalink&lt;/th&gt;&lt;td&gt;[baseURL]/x/y/z/index.html &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;section  &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;type     &lt;/th&gt;&lt;td&gt;&lt;strong&gt; e &lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;section-type-について&#34;&gt;Section / Type について&lt;/h3&gt;

&lt;p&gt;type と section は主にレイアウトの決定に使用され、Hugo では自動的に section 毎のリストページを生成します。&lt;/p&gt;

&lt;p&gt;例えば、本エントリ先頭にあげたフォルダ構成でいうと、content 直下のフォルダ post と quote が SECTION にあたり、それぞれ [baseURL]/post/index.html [baseURL]/quote/index.html というリストページが生成されます。&lt;/p&gt;

&lt;p&gt;この時、リストページに使用するレイアウトテンプレートは以下の順で検索されます。(&lt;strong&gt;SECTION&lt;/strong&gt;がセクション名です)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/section/&lt;strong&gt;SECTION&lt;/strong&gt;.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/section.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/list.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/section/&lt;strong&gt;SECTION&lt;/strong&gt;.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/_default/section.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/_default/list.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同様に各エントリの個別ページも type（指定されていなければ section）によって使用するレイアウトテンプレートが決定されます。
(&lt;strong&gt;LAYOUT&lt;/strong&gt; はフロントマターで指定する layout パラメータです)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/&lt;strong&gt;TYPE-or-SECTION&lt;/strong&gt;/&lt;strong&gt;LAYOUT&lt;/strong&gt;.html&lt;/li&gt;
&lt;li&gt;/layouts/&lt;strong&gt;TYPE-or-SECTION&lt;/strong&gt;/single.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/single.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/&lt;strong&gt;TYPE-or-SECTION&lt;/strong&gt;/&lt;strong&gt;LAYOUT&lt;/strong&gt;.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/&lt;strong&gt;TYPE-or-SECTION&lt;/strong&gt;/single.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/_default/single.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;冒頭で述べたように Hugo では、コンテンツのフォルダ構成やパラメータによって生成される位置やレイアウトが変更されます。&lt;br /&gt;
コンテンツは目的毎に分類しておくのが良いでしょう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（レイアウト編２）</title>
      <link>http://staff.feedtailor.jp/2016/04/27/hugo_04</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/04/27/hugo_04</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; のテンプレートの書き方について。&lt;/p&gt;

&lt;p&gt;Hugo では、テンプレートの記述に Go 言語の &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; ライブラリを使用しています。
その文法や変数の扱い方等を簡単にご説明したいと思います。&lt;/p&gt;

&lt;h3 id=&#34;基本文法&#34;&gt;基本文法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;テンプレートで変数や関数を使用するときは、中括弧（波括弧）２つで括ります。括弧内で改行してはいけません。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; {{ }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;引数はスペースで区切ります&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{{ printf &amp;quot;%#v&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;関数や変数は . を使用してアクセスします&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;.Params.bar
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;コメントは /*  */ で括ります。コメント内は改行しても構いません。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{{/*
      コメント
               */}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;変数&#34;&gt;変数&lt;/h3&gt;

&lt;p&gt;変数は、前述のように .名前 という形式で記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.Title
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/2016/04/20/hugo_03/&#34;&gt;前回&lt;/a&gt;ご紹介したように Hugo ではページの種類によって使用できる変数が異なります。詳しくは &lt;a href=&#34;http://gohugo.io/templates/variables/&#34;&gt;こちら&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;p&gt;変数は自分で定義して代入、参照することもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $address := &amp;quot;東京都千代田区&amp;quot;}}
{{ $address }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;関数&#34;&gt;関数&lt;/h3&gt;

&lt;p&gt;関数は、Go 言語の text/template で定義されているものと Hugo の独自関数が使用できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang-jp.org/pkg/text/template/&#34;&gt;Go言語 text/template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/templates/functions/&#34;&gt;Hugo 独自の関数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;制御文&#34;&gt;制御文&lt;/h3&gt;

&lt;p&gt;他の多くのテンプレートと同様に条件式やループが使用できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;title&amp;quot; }}{{ .Params.title }}{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;isset は .Params に &amp;ldquo;title&amp;rdquo; という名前の要素が含まれているかどうかを返します。上の式は with を使って書き換えることもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Params.title }}{{ . }}{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with を使用すると . に引数の値がセットされます。（ここでは .Params.title の値）&lt;/p&gt;

&lt;p&gt;ループは次のように書きます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range array }}
   現在の値は {{ . }} です。
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array には配列やマップ（連想配列）を指定します。range から end の間は . にループの次の値がセットされます。&lt;/p&gt;

&lt;h3 id=&#34;パイプ&#34;&gt;パイプ&lt;/h3&gt;

&lt;p&gt;Go テンプレートではパイプライン文字 | を使って、値やコマンドの結果を次のコマンドへ渡すことができます。渡された値は最後の引数として扱われます。&lt;br /&gt;
例えば、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if eq 1 1 }} 同じ {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は、パイプを使って次のように書き換えることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ eq 1 1 | if }} 同じ {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;コンテキスト&#34;&gt;コンテキスト&lt;/h3&gt;

&lt;p&gt;. （ドット）には現在参照できる値または変数群が格納されています。&lt;br /&gt;
例えばテンプレートの最上位では、そのページで使用できるデータ・変数が全て格納されていますが、range や with の中では現在の値のみが格納されています。&lt;br /&gt;
range や with の中でサイト全体の値を参照する場合は、 $. を使ってグローバルな値を取得することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range array }}
   現在の値は {{ . }} です。
   サイトの名称は {{ $.Site.Title }} です。
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;パラメータ&#34;&gt;パラメータ&lt;/h3&gt;

&lt;p&gt;Hugo では、サイト全体またはページ単位で独自のパラメータを定義することができます。&lt;br /&gt;
定義したパラメータはテンプレートから自由に参照できます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ページパラメータ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hugo では各ページの &lt;em&gt;フロントマター&lt;/em&gt; でタイトルや日付等の属性を埋め込みます。（ &lt;a href=&#34;http://staff.feedtailor.jp/2016/04/05/hugo_01/&#34;&gt;導入編&lt;/a&gt; の &amp;ldquo;記事の追加&amp;rdquo; を参照）&lt;br /&gt;
パラメータも同じく、このフロントマターで指定します。例えば、notoc というパラメータを追加した場合、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-05T12:00:00+09:00&amp;quot;
draft = true
title = &amp;quot;hello&amp;quot;
notoc = true

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ページテンプレートでは以下のように .Params.notoc で参照できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if not .Params.notoc }}
    &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
    {{ .TableOfContents }}
    &amp;lt;/div&amp;gt;
{{ end }}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;サイトパラメータ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;サイト全体のパラメータは config.toml ファイルで指定します。&lt;br /&gt;
config.toml では params の属性として追加してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://staff.feedtailor.jp/&amp;quot;
title   = &amp;quot;feedtailor Inc. スタッフブログ&amp;quot;

...

[params]
    author = &amp;quot;feedtailor Inc.&amp;quot;
    location = &amp;quot;Osaka, Japan&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サイトパラメータは以下のように .Site.Params.名前 で参照できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Site.Params.author }}&amp;lt;meta name=&amp;quot;author&amp;quot; content=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回は Hugo レイアウトテンプレートの基本的な文法をご説明しました。&lt;br /&gt;
これらを組み合わせてテンプレートをどのように書くかを次回以降でご紹介していこうと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（レイアウト編１）</title>
      <link>http://staff.feedtailor.jp/2016/04/20/hugo_03</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/04/20/hugo_03</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; のレイアウトテンプレートについて書きたいと思います。&lt;/p&gt;

&lt;p&gt;Hugo では、テンプレートの記述に Go 言語の &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; ライブラリを使用しています。
一見複雑そうに見えますが、簡単な記法で多くのことを実現できます。&lt;/p&gt;

&lt;h3 id=&#34;テンプレートの種類&#34;&gt;テンプレートの種類&lt;/h3&gt;

&lt;p&gt;Hugo では、以下の３種類のテンプレートでサイトを構築します。&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Single&lt;/dt&gt;
&lt;dd&gt;単一のコンテンツを表示するページ&lt;/dd&gt;
&lt;dt&gt;List&lt;/dt&gt;
&lt;dd&gt;複数のコンテンツのリストを表示するページ&lt;/dd&gt;
&lt;dt&gt;Homepage&lt;/dt&gt;
&lt;dd&gt;ホームページ（トップページ）&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;多くのサイトでは、トップページからあるコンテンツのリストを表示し、そこから目的のコンテンツページを表示する構成になっていると思います。&lt;br /&gt;
上の３つを組み合わせることで複雑なサイトを構築できるようになります。&lt;/p&gt;

&lt;p&gt;Hugo では、その他に補助的なテンプレートが用意されています。何れも上のテンプレートに組み込んで（include）使用します。&lt;br /&gt;
種類によって、テンプレート内で使用出来る変数が異なります。&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Partial Templates&lt;/dt&gt;
&lt;dd&gt;ページ内の共通パーツ&lt;/dd&gt;
&lt;dt&gt;Content Views&lt;/dt&gt;
&lt;dd&gt;コンテンツを表示するパーツ&lt;/dd&gt;
&lt;dt&gt;Taxonomy Terms&lt;/dt&gt;
&lt;dd&gt;Taxonomy（カテゴリやタグなどの分類）のリストを表示するパーツ&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;トップページ&#34;&gt;トップページ&lt;/h3&gt;

&lt;p&gt;まずサイトのトップページを作りましょう。&lt;a href=&#34;http://staff.feedtailor.jp/2016/04/13/hugo_02/&#34;&gt;前回&lt;/a&gt; で config.toml に書いた baseurl で表示するページです。&lt;br /&gt;
ファイルは layouts フォルダ直下に index.html という名前で作成します。content フォルダ内ではありませんので注意してください。&lt;br /&gt;
以下は本ブログのトップページのソースコードです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;{{ with .Site.LanguageCode }}{{ . }}{{ else }}en-US{{ end }}&amp;quot;&amp;gt;

{{ partial &amp;quot;head&amp;quot; . }}

&amp;lt;body&amp;gt;
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;

&amp;lt;div id=&amp;quot;container&amp;quot;&amp;gt;
    {{ partial &amp;quot;header&amp;quot; . }}
    &amp;lt;div class=&amp;quot;outer&amp;quot;&amp;gt;
        {{ partial &amp;quot;article_list&amp;quot; . }}
        {{ partial &amp;quot;sidebar&amp;quot; . }}
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

{{ partial &amp;quot;footer&amp;quot; . }}

&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;多くの場合、ページのヘッダやフッタ等、複数のページで共通化できる部分があると思います。本ブログでは、headタグ、ページのヘッダ、ページ中央の記事のリスト、サイドバー、フッタを Partial テンプレートとして共通化しています。&lt;/p&gt;

&lt;p&gt;Partial テンプレートは layouts フォルダ内に partials フォルダを作成してそこに置きます。使用するときは、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;ファイル名(拡張子なし)&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書きます。例えば、上の {{ partial &amp;ldquo;head&amp;rdquo; . }} は layouts/partials/head.html を読み込んでいます。&lt;/p&gt;

&lt;p&gt;partial を使用する時、ファイル名の後ろの . （半角ドット）を忘れないようにしてください。&lt;br /&gt;
Go テンプレートでは . は、現在スコープのコンテキストを表しています。もう少し砕いていうと、その場で使える変数を入れている箱です。
上の Partial の例では、指定したファイルのテンプレートに . を渡している、つまりその場で使える全ての変数が Partial テンプレートでも使えますよ、ということです。
.Data のようにある変数だけを渡すこともできますが、良く分からなければ毎回 . を渡しても良いでしょう。&lt;/p&gt;

&lt;p&gt;その他のテンプレートや Partial の中身については順次ご説明します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、SSGの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽にご相談ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（フォルダ構成編）</title>
      <link>http://staff.feedtailor.jp/2016/04/13/hugo_02</link>
      <pubDate>Wed, 13 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/04/13/hugo_02</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/2016/04/05/hugo_01&#34;&gt;前回&lt;/a&gt;に引き続き、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; について書きたいと思います。今回はフォルダ構成について。&lt;/p&gt;

&lt;h3 id=&#34;フォルダ構成&#34;&gt;フォルダ構成&lt;/h3&gt;

&lt;p&gt;Hugo では、記事や画像、レイアウトを種類毎にそれぞれ決まったフォルダに配置する必要があります。&lt;br /&gt;
新規サイトを作成する &lt;strong&gt;hugo new site&lt;/strong&gt; コマンドを利用すると、デフォルト設定に準じた以下のファイル・フォルダが生成されます。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/overview/configuration/&#34; target=&#34;_blank&#34;&gt;config.toml&lt;/a&gt;&lt;/th&gt;&lt;td&gt;サイト全体の設定ファイル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/content/archetypes/&#34; target=&#34;_blank&#34;&gt;archetypes&lt;/a&gt;&lt;/th&gt;&lt;td&gt;記事の雛形を置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/content/organization/&#34; target=&#34;_blank&#34;&gt;content&lt;/a&gt;&lt;/th&gt;&lt;td&gt;記事を置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/extras/datafiles/&#34; target=&#34;_blank&#34;&gt;data&lt;/a&gt;&lt;/th&gt;&lt;td&gt;データファイルを置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/layout/overview/&#34; target=&#34;_blank&#34;&gt;layouts&lt;/a&gt;&lt;/th&gt;&lt;td&gt;レイアウトを置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/themes/creation#toc_4&#34; target=&#34;_blank&#34;&gt;static&lt;/a&gt;&lt;/th&gt;&lt;td&gt;画像等の静的素材を置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;その他に、テーマを置く &lt;strong&gt;&lt;a href=&#34;http://gohugo.io/themes/overview/&#34;&gt;themes&lt;/a&gt;&lt;/strong&gt; フォルダ、ファイルが出力される &lt;strong&gt;public&lt;/strong&gt; フォルダの位置がデフォルトで設定されています。&lt;/p&gt;

&lt;h3 id=&#34;config-tomlファイル&#34;&gt;config.tomlファイル&lt;/h3&gt;

&lt;p&gt;URLやタイトル、フォルダ構成等、サイト全体の設定を記載するファイルです。&lt;br /&gt;
デフォルトでは拡張子の通り、&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML形式&lt;/a&gt; で書きます。config.toml が存在しない場合は config.yaml、config.json の順に使用されます。&lt;/p&gt;

&lt;p&gt;生成直後は次のような内容ですので、ご利用の環境に合わせて変更してください。&lt;br /&gt;
定義されている項目は&lt;a href=&#34;http://gohugo.io/overview/configuration/&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前述のフォルダ構成を変更したり任意の項目を追加することもできます。&lt;/p&gt;

&lt;p&gt;設定値は以下のコマンドで確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo config
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;publicフォルダ&#34;&gt;publicフォルダ&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;hugo&lt;/strong&gt; コマンドで生成されるファイル群は public フォルダに出力されます。&lt;br /&gt;
このフォルダをウェブサーバに設置してサイトを公開します。&lt;/p&gt;

&lt;h3 id=&#34;archetypesフォルダ&#34;&gt;archetypesフォルダ&lt;/h3&gt;

&lt;p&gt;記事の雛形を置くフォルダです。&lt;br /&gt;
雛形ファイルは &lt;strong&gt;hugo new&lt;/strong&gt; コマンドで記事ファイルを生成する時に使用されます。雛形が見つからない場合は、日付、タイトル、下書きフラグのみの記事が生成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-13T14:31:25+09:00&amp;quot;
draft = true
title = &amp;quot;test&amp;quot;

+++


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;contentフォルダ&#34;&gt;contentフォルダ&lt;/h3&gt;

&lt;p&gt;記事を置くフォルダです。&lt;br /&gt;
このフォルダにあるファイルはHugoの変換処理を通ります。例えば、.md（Markdown形式）ファイルの内容は、HTMLに変換され、所定のレイアウトに埋め込まれてHTMLファイルとして出力されます。&lt;br /&gt;
変換処理が不要なファイルは後述する &lt;strong&gt;static&lt;/strong&gt; フォルダに置いてください。&lt;/p&gt;

&lt;h3 id=&#34;dataフォルダ&#34;&gt;dataフォルダ&lt;/h3&gt;

&lt;p&gt;データファイルを置くフォルダです。&lt;br /&gt;
データファイルは、任意の名前・値を定義することができるので、簡易なKey-Valueデータストアとして使用できます。&lt;br /&gt;
例えば、トピックスや会社の年表、製品情報等をデータファイルとして保存しておくと、レイアウトファイルを変更することなくデータのみを更新することができます。&lt;br /&gt;
因みに &lt;a href=&#34;http://www.feedtailor.jp/&#34; target=&#34;_blank&#34;&gt;弊社サイト&lt;/a&gt; の &amp;ldquo;WHAT&amp;rsquo;S NEW&amp;rdquo; の内容は、レイアウトに直接書くのではなく、以下のようにTOML形式のデータファイルに記載しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[news_row]]
  date        = &amp;quot;2016.03.14&amp;quot;
  title       = &#39;&amp;lt;a href=&amp;quot;http://staff.feedtailor.jp/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;スタッフブログ&amp;lt;/a&amp;gt;のデザインを変更しました(静的Webサイト化)&#39;

[[news_row]]
  date        = &amp;quot;2015.01.27&amp;quot;
  title       = &amp;quot;B2B向けサービス「SYNCNEL」を事業売却しました&amp;quot;
  url         = &amp;quot;http://feedtailor.jp/wp/?p=15686&amp;quot;

[[news_row]]
  date        = &amp;quot;2015.10.16&amp;quot;
  title       = &amp;quot;天気予報アプリ「そら案内」および関連全事業を無償譲渡しました&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;layoutフォルダ&#34;&gt;layoutフォルダ&lt;/h3&gt;

&lt;p&gt;HTMLのレイアウトを置くフォルダです。&lt;br /&gt;
このフォルダにあるレイアウトに &lt;strong&gt;content&lt;/strong&gt; フォルダ内の記事や &lt;strong&gt;data&lt;/strong&gt; フォルダのデータを埋め込んでHTMLを生成します。&lt;br /&gt;
レイアウト内の制御文やループはGo言語の &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/templateライブラリ&lt;/a&gt; を使って記述します。&lt;/p&gt;

&lt;h3 id=&#34;staticフォルダ&#34;&gt;staticフォルダ&lt;/h3&gt;

&lt;p&gt;JSやCSS、画像等の静的素材を置くフォルダです。&lt;br /&gt;
Hugoの変換処理が不要なファイルはこのフォルダに設置してください。&lt;strong&gt;public&lt;/strong&gt; フォルダにそのままコピーされます。&lt;/p&gt;

&lt;h3 id=&#34;themeフォルダ&#34;&gt;themeフォルダ&lt;/h3&gt;

&lt;p&gt;テーマを置くフォルダです。&lt;br /&gt;
Hugo では複数のテーマを保存しておいて、簡単に切り替えることができます。&lt;br /&gt;
&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;公開されているテーマ&lt;/a&gt; も沢山ありますので利用してみるのもよいでしょう。&lt;/p&gt;

&lt;p&gt;今回は以上です。&lt;br /&gt;
各フォルダの詳細についても順次書いていこうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（導入編）</title>
      <link>http://staff.feedtailor.jp/2016/04/05/hugo_01</link>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/04/05/hugo_01</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;これから何回かに分けて本サイト構築時に使用した静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; についてご紹介したいと思います。&lt;/p&gt;

&lt;h3 id=&#34;hugoとは&#34;&gt;Hugoとは？&lt;/h3&gt;

&lt;p&gt;Go言語で書かれた&lt;a href=&#34;http://staticgen.com&#34;&gt;静的サイトジェネレータ&lt;/a&gt;です。&lt;br /&gt;
代表的な静的サイトジェネレータとして、GitHub社が開発している&lt;a href=&#34;https://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;や&lt;a href=&#34;https://middlemanapp.com/jp/&#34;&gt;Middleman&lt;/a&gt;、
国産ではChatwork社が開発している&lt;a href=&#34;https://github.com/chatwork/Phest&#34;&gt;Phest&lt;/a&gt;等がありますが、Hugoを選んだ大きな理由は以下の３つです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;インストールが楽&lt;/li&gt;
&lt;li&gt;クロスプラットフォーム対応&lt;/li&gt;
&lt;li&gt;ページ生成が速い&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Win/Mac/Linux環境に対応していて、どの環境も実行ファイル１つです。簡易HTTPサーバも内蔵しているのでRubyやPHPのインストールはもちろんApacheさえも不要です。&lt;br /&gt;
ページ生成も高速で本ブログの規模であれば0.3秒くらいで生成されます。&lt;/p&gt;

&lt;h3 id=&#34;インストール&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;各プラットフォーム用の実行ファイルが提供されているので&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;リリース情報のページ&lt;/a&gt;からダウンロードしてください。
Windows 64bit版はhugo_0.15_windows_amd64.zip、MacOSX版はhugo_0.15_darwin_amd64.zipです。zipファイルから展開した実行ファイルは hugo（Winは hugo.exe）という名前に変更しておきましょう。&lt;br /&gt;
Mac版であれば&lt;a href=&#34;http://brew.sh/index_ja.html&#34;&gt;Homebrew&lt;/a&gt;からもインストールできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
$ brew update
$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;サイト作成&#34;&gt;サイト作成&lt;/h3&gt;

&lt;p&gt;新規サイトを作成するには以下のコマンドを実行します。hugo(.exe)を環境変数PATHに登録していない場合はダウンロードしたhugo(.exe)があるフォルダで実行しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site サイト名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで空のサイトが出来上がります。生成されたのはサイトの情報を入力する config.toml ファイルと空のフォルダ５つ（&lt;strong&gt;archetypes&lt;/strong&gt;, &lt;strong&gt;content&lt;/strong&gt;, &lt;strong&gt;data&lt;/strong&gt;, &lt;strong&gt;layouts&lt;/strong&gt;, &lt;strong&gt;static&lt;/strong&gt;）だけで中身はありません。
以降、hugo コマンドは config.toml ファイルのあるフォルダで実行しますので、hugo(.exe)を同じ場所に移動しておくとよいでしょう。&lt;/p&gt;

&lt;p&gt;生成された config.toml ファイルは以下のようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;baseurlがこのサイトを公開するURL、languageCodeはRSS出力に付与する文字コード、titleはサイトのタイトルです。環境に合わせて変更してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://example.com/&amp;quot;
languageCode = &amp;quot;ja&amp;quot;
title = &amp;quot;Hugo入門&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;テーマのインストール&#34;&gt;テーマのインストール&lt;/h3&gt;

&lt;p&gt;レイアウトを１から作るのは時間がかかるので、一般公開されているテーマを利用してみましょう。&lt;br /&gt;
Hugo公式サイトの&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;テーマ一覧のページ&lt;/a&gt;から好きなデザインを選択します。ここでは公式サイトの&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;クイックスタート&lt;/a&gt;と同じく &lt;a href=&#34;http://themes.gohugo.io/hugo-uno/&#34;&gt;hugo-uno&lt;/a&gt; テーマを使ってみます。
まずはサイトのトップフォルダ（config.tomlがあるフォルダ）に themes というフォルダを作って、そこにhugo-unoテーマを設置します。gitコマンドが使える方は以下で。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir themes
$ cd themes
$ git clone https://github.com/SenjinDarashiva/hugo-uno.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git コマンドが使えない方は &lt;a href=&#34;https://github.com/SenjinDarashiva/hugo-uno/archive/master.zip&#34;&gt;ここ&lt;/a&gt; からzipファイルをダウンロードして展開してください。フォルダ名は hugo-uno に変更してください。&lt;/p&gt;

&lt;h3 id=&#34;記事の追加&#34;&gt;記事の追加&lt;/h3&gt;

&lt;p&gt;記事は content フォルダに置きます。以下のコマンドでからの記事ファイルを作ることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new ファイル名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは post/hello.md という名前で作ってみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/hello.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コマンドを実行すると content フォルダ内に post フォルダが作成され、その中に hello.md ファイルが作られます。&lt;br /&gt;
標準設定ではファイルの場所・名前がそのままURLのパス部分になるので、この記事は http://サーバ名/post/hello/ というURLで公開されることになります。&lt;/p&gt;

&lt;p&gt;テキストエディタで hello.md を編集しましょう。生成された直後の hello.md ファイルの中身は以下のようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-05T12:00:00+09:00&amp;quot;
draft = true
title = &amp;quot;hello&amp;quot;

+++

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先頭の半角 + 3文字から次の + 3文字の行までを &lt;strong&gt;フロントマター&lt;/strong&gt; と呼び、記事のタイトルや日付、カテゴリ等ページの属性を指定します。&lt;br /&gt;
title がページのタイトルです。draft は下書きかどうかの状態で true が指定されているとプレビューやページ生成がされませんので false に指定するか削除しましょう。本文はフロントマター以降（この場合は７行目以降）に &lt;a href=&#34;https://ja.wikipedia.org/wiki/Markdown&#34;&gt;Markdown記法&lt;/a&gt; で記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-05T12:00:00+09:00&amp;quot;
title = &amp;quot;Hugoを始めました&amp;quot;

+++

こんにちは、**Hugo** を始めました。

### Markdown記法

Markdownの書き方は以下のサイトが参考になります。

- [Wikipedia](https://ja.wikipedia.org/wiki/Markdown)
- [Qiita](http://qiita.com/Qiita/items/c686397e4a0f4f11683d)
- [日本語Markdownユーザー会](http://www.markdown.jp/what-is-markdown/#markdown-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;プレビュー&#34;&gt;プレビュー&lt;/h3&gt;

&lt;p&gt;hugo は簡易HTTPサーバを内蔵していていつでもプレビューできます。プレビュー中は自動的にリロードがかかるため何もしなくても表示が逐次更新されます。
プレビュー機能を実行するには &lt;strong&gt;hugo server&lt;/strong&gt; コマンドを使用します。-t の後ろはテーマのフォルダ名を指定してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -t hugo-uno -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで &lt;a href=&#34;http://127.0.0.1:1313/&#34;&gt;http://127.0.0.1:1313/&lt;/a&gt; にアクセスすると作成したサイトが表示されます。終了するときは Ctrl+C を押してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2016/04/hugo_01_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;ページ生成&#34;&gt;ページ生成&lt;/h3&gt;

&lt;p&gt;プレビューで問題がないことを確認できたらページ生成です。以下のコマンドを実行してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo -t hugo-uno
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ウェブサイトとして公開するファイル一式が &lt;strong&gt;public&lt;/strong&gt; フォルダに出力されますので、このままウェブサーバに設置してください。&lt;/p&gt;

&lt;p&gt;今回はインストールからページ生成、ウェブサーバの公開までの流れを急ぎでご紹介しましたが、次回以降は各項目についてもう少し掘り下げていこうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第2回静的Webサイト勉強会を開催しました</title>
      <link>http://staff.feedtailor.jp/2016/03/30/swebmtg2</link>
      <pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/03/30/swebmtg2</guid>
      <description>&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今週 2016/03/28(月) に東京高円寺にある &lt;a href=&#34;http://www.val.co.jp&#34;&gt;ヴァル研究所様&lt;/a&gt; で &lt;a href=&#34;http://connpass.com/event/26420/&#34;&gt;第2回 静的Webサイト 勉強会&lt;/a&gt; を開催しました。&lt;/p&gt;

&lt;p&gt;勉強会は約60名様、その後の懇親会も半数の方が参加くださって大盛況でした。ありがとうございました。&lt;/p&gt;

&lt;p&gt;今回はゲストスピーカーとして &lt;a href=&#34;https://www.alleyoop.co.jp&#34;&gt;株式会社アリウープ&lt;/a&gt; の河野様 に講演いただきました。&lt;br /&gt;
名だたる大手企業のサイトを多数手掛けていらっしゃるので説得力が違います。静的サイトと動的要素の組み合わせ例とか今後の予測とか本当に勉強になりました。
弊社では現状フリーの静的サイトジェネレータしか実績がありませんので、機会があれば商用静的CMSについても調査、比較検討してみたいと思います。&lt;/p&gt;

&lt;p&gt;ライトニングトークの１つ目は &lt;a href=&#34;http://m2mtech.jp/&#34;&gt;M2Mテクノロジーズ株式会社&lt;/a&gt; 内山様からウェブサイトの改竄検知について。
シンプルな方法ですが、HTMLや画像をファイルレベルで差分を取るって有効だと感じました。&lt;/p&gt;

&lt;p&gt;２つ目は &lt;a href=&#34;http://classmethod.jp/&#34;&gt;クラスメソッド株式会社&lt;/a&gt; 鈴木様 からCloudFrontの利用について。
静的サイトはCDNと相性がいいので積極的に利用するのも良いかも。安めのサーバと組み合わせるとトータルコストが下がる可能性もありそうです。&lt;/p&gt;

&lt;p&gt;さて、私は大阪で行った &lt;a href=&#34;http://connpass.com/event/25507/&#34;&gt;第1回&lt;/a&gt; と同じく「静的サイトジェネレータHugoを使ったサイト運用」という題目で話してきました。&lt;br /&gt;
&lt;a href=&#34;http://staff.feedtailor.jp/2016/03/25/migration&#34;&gt;前回のエントリ&lt;/a&gt; でも書きましたが、既に６つほど静的サイトを構築していますので、その際に感じたことをざっくりでも共有できたらと思いまして。
話した内容は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;構築したサイトのご紹介

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.syncnel.biz/&#34;&gt;SYNCNELオフィシャルサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;弊社コーポレートサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.feedtailor.jp&#34;&gt;弊社社長ブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hitokoto.feedtailor.jp&#34;&gt;弊社スタッフのひとことブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;当ブログ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hugoでブログエントリの追加の実演&lt;/li&gt;
&lt;li&gt;構築／運用上の課題、メリット&lt;/li&gt;
&lt;li&gt;自作GUIのチラ見せ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;br /&gt;
個人的に非技術者の方が &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; を利用する上で１番の障害になっているのが黒い画面（コマンドライン）だと感じておりまして、私のプレゼンではそれをフォローするために作成したGUIをご紹介しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2016/03/swebmtg2_gui.png&#34; alt=&#34;GUI&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上段左から順に操作するとエントリの追加、バージョン管理からサーバへの反映まで出来るようになっています。各ボタンの機能を簡単にご紹介します。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;フォルダを開く&lt;/th&gt;&lt;td&gt;プロジェクトのフォルダを開く&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;更新&lt;/th&gt;&lt;td&gt;git pull コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;コンテンツを追加&lt;/th&gt;&lt;td&gt;hugo new コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;画像を追加&lt;/th&gt;&lt;td&gt;指定した画像のサムネイルを作成&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;プレビュー&lt;/th&gt;&lt;td&gt;hugo server コマンドの実行、ブラウザの起動&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;ビルド&lt;/th&gt;&lt;td&gt;hugo コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;登録&lt;/th&gt;&lt;td&gt;git add / commit / push コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;アップロード&lt;/th&gt;&lt;td&gt;サーバへのファイル転送&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;JavaFXで作成したUIから、直接コマンドを実行したりシェルスクリプトを呼び出しているだけの簡単なものですが、黒い画面を排除するには十分で、
先に紹介した弊社の&lt;a href=&#34;http://hitokoto.feedtailor.jp/&#34;&gt;ひとことブログ&lt;/a&gt;はこれを使用して更新しています。&lt;/p&gt;

&lt;p&gt;懇親会でもいろんな方と話しましたが、まだまだ静的サイトの有用性や&lt;a href=&#34;http://staticgen.com&#34;&gt;静的サイトジェネレータ&lt;/a&gt;の存在が広まってないな、と感じました。
ご紹介したGUIのようなものや日本語の情報が増えて一般の方にも利用してもらいやすい環境ができれば良いなと思います。&lt;/p&gt;

&lt;p&gt;サイトの静的化に興味がある方や既に運用しているがコマンドラインの操作が煩わしい、というような方は是非ご相談ください。&lt;/p&gt;

&lt;p&gt;2016/3/31 一部加筆・修正しました。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
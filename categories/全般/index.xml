<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>全般 on feedtailor Inc. スタッフブログ</title>
    <link>http://staff.feedtailor.jp/categories/%E5%85%A8%E8%88%AC/</link>
    <description>Recent content in 全般 on feedtailor Inc. スタッフブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://staff.feedtailor.jp/categories/%E5%85%A8%E8%88%AC/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（レイアウト編１）</title>
      <link>http://staff.feedtailor.jp/2016/04/20/hugo_03</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/04/20/hugo_03</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; のレイアウトテンプレートについて書きたいと思います。&lt;/p&gt;

&lt;p&gt;Hugo では、テンプレートの記述に Go 言語の &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; ライブラリを使用しています。
一見複雑そうに見えますが、簡単な記法で多くのことを実現できます。&lt;/p&gt;

&lt;h3 id=&#34;テンプレートの種類:4c2585f1ab85585af71601f47af31217&#34;&gt;テンプレートの種類&lt;/h3&gt;

&lt;p&gt;Hugo では、以下の３種類のテンプレートでサイトを構築します。&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Single&lt;/dt&gt;
&lt;dd&gt;単一のコンテンツを表示するページ&lt;/dd&gt;
&lt;dt&gt;List&lt;/dt&gt;
&lt;dd&gt;複数のコンテンツのリストを表示するページ&lt;/dd&gt;
&lt;dt&gt;Homepage&lt;/dt&gt;
&lt;dd&gt;ホームページ（トップページ）&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;多くのサイトでは、トップページからあるコンテンツのリストを表示し、そこから目的のコンテンツページを表示する構成になっていると思います。&lt;br /&gt;
上の３つを組み合わせることで複雑なサイトを構築できるようになります。&lt;/p&gt;

&lt;p&gt;Hugo では、その他に補助的なテンプレートが用意されています。何れも上のテンプレートに組み込んで（include）使用します。&lt;br /&gt;
種類によって、テンプレート内で使用出来る変数が異なります。&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Partial Templates&lt;/dt&gt;
&lt;dd&gt;ページ内の共通パーツ&lt;/dd&gt;
&lt;dt&gt;Content Views&lt;/dt&gt;
&lt;dd&gt;コンテンツを表示するパーツ&lt;/dd&gt;
&lt;dt&gt;Taxonomy Terms&lt;/dt&gt;
&lt;dd&gt;Taxonomy（カテゴリやタグなどの分類）のリストを表示するパーツ&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;トップページ:4c2585f1ab85585af71601f47af31217&#34;&gt;トップページ&lt;/h3&gt;

&lt;p&gt;まずサイトのトップページを作りましょう。&lt;a href=&#34;http://staff.feedtailor.jp/2016/04/13/hugo_02/&#34;&gt;前回&lt;/a&gt; で config.toml に書いた baseurl で表示するページです。&lt;br /&gt;
ファイルは layouts フォルダ直下に index.html という名前で作成します。content フォルダ内ではありませんので注意してください。&lt;br /&gt;
以下は本ブログのトップページのソースコードです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;{{ with .Site.LanguageCode }}{{ . }}{{ else }}en-US{{ end }}&amp;quot;&amp;gt;

{{ partial &amp;quot;head&amp;quot; . }}

&amp;lt;body&amp;gt;
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;

&amp;lt;div id=&amp;quot;container&amp;quot;&amp;gt;
    {{ partial &amp;quot;header&amp;quot; . }}
    &amp;lt;div class=&amp;quot;outer&amp;quot;&amp;gt;
        {{ partial &amp;quot;article_list&amp;quot; . }}
        {{ partial &amp;quot;sidebar&amp;quot; . }}
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

{{ partial &amp;quot;footer&amp;quot; . }}

&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;多くの場合、ページのヘッダやフッタ等、複数のページで共通化できる部分があると思います。本ブログでは、headタグ、ページのヘッダ、ページ中央の記事のリスト、サイドバー、フッタを Partial テンプレートとして共通化しています。&lt;/p&gt;

&lt;p&gt;Partial テンプレートは layouts フォルダ内に partials フォルダを作成してそこに置きます。使用するときは、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;ファイル名(拡張子なし)&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書きます。例えば、上の {{ partial &amp;ldquo;head&amp;rdquo; . }} は layouts/partials/head.html を読み込んでいます。&lt;/p&gt;

&lt;p&gt;partial を使用する時、ファイル名の後ろの . （半角ドット）を忘れないようにしてください。&lt;br /&gt;
Go テンプレートでは . は、現在スコープのコンテキストを表しています。もう少し砕いていうと、その場で使える変数を入れている箱です。
上の Partial の例では、指定したファイルのテンプレートに . を渡している、つまりその場で使える全ての変数が Partial テンプレートでも使えますよ、ということです。
.Data のようにある変数だけを渡すこともできますが、良く分からなければ毎回 . を渡しても良いでしょう。&lt;/p&gt;

&lt;p&gt;その他のテンプレートや Partial の中身については順次ご説明します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、SSGの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽にご相談ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（フォルダ構成編）</title>
      <link>http://staff.feedtailor.jp/2016/04/13/hugo_02</link>
      <pubDate>Wed, 13 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/04/13/hugo_02</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/2016/04/05/hugo_01&#34;&gt;前回&lt;/a&gt;に引き続き、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; について書きたいと思います。今回はフォルダ構成について。&lt;/p&gt;

&lt;h3 id=&#34;フォルダ構成:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;フォルダ構成&lt;/h3&gt;

&lt;p&gt;Hugo では、記事や画像、レイアウトを種類毎にそれぞれ決まったフォルダに配置する必要があります。&lt;br /&gt;
新規サイトを作成する &lt;strong&gt;hugo new site&lt;/strong&gt; コマンドを利用すると、デフォルト設定に準じた以下のファイル・フォルダが生成されます。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/overview/configuration/&#34; target=&#34;_blank&#34;&gt;config.toml&lt;/a&gt;&lt;/th&gt;&lt;td&gt;サイト全体の設定ファイル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/content/archetypes/&#34; target=&#34;_blank&#34;&gt;archetypes&lt;/a&gt;&lt;/th&gt;&lt;td&gt;記事の雛形を置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/content/organization/&#34; target=&#34;_blank&#34;&gt;content&lt;/a&gt;&lt;/th&gt;&lt;td&gt;記事を置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/extras/datafiles/&#34; target=&#34;_blank&#34;&gt;data&lt;/a&gt;&lt;/th&gt;&lt;td&gt;データファイルを置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/layout/overview/&#34; target=&#34;_blank&#34;&gt;layouts&lt;/a&gt;&lt;/th&gt;&lt;td&gt;レイアウトを置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/themes/creation#toc_4&#34; target=&#34;_blank&#34;&gt;static&lt;/a&gt;&lt;/th&gt;&lt;td&gt;画像等の静的素材を置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;その他に、テーマを置く &lt;strong&gt;&lt;a href=&#34;http://gohugo.io/themes/overview/&#34;&gt;themes&lt;/a&gt;&lt;/strong&gt; フォルダ、ファイルが出力される &lt;strong&gt;public&lt;/strong&gt; フォルダの位置がデフォルトで設定されています。&lt;/p&gt;

&lt;h3 id=&#34;config-tomlファイル:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;config.tomlファイル&lt;/h3&gt;

&lt;p&gt;URLやタイトル、フォルダ構成等、サイト全体の設定を記載するファイルです。&lt;br /&gt;
デフォルトでは拡張子の通り、&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML形式&lt;/a&gt; で書きます。config.toml が存在しない場合は config.yaml、config.json の順に使用されます。&lt;/p&gt;

&lt;p&gt;生成直後は次のような内容ですので、ご利用の環境に合わせて変更してください。&lt;br /&gt;
定義されている項目は&lt;a href=&#34;http://gohugo.io/overview/configuration/&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前述のフォルダ構成を変更したり任意の項目を追加することもできます。&lt;/p&gt;

&lt;p&gt;設定値は以下のコマンドで確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo config
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;publicフォルダ:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;publicフォルダ&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;hugo&lt;/strong&gt; コマンドで生成されるファイル群は public フォルダに出力されます。&lt;br /&gt;
このフォルダをウェブサーバに設置してサイトを公開します。&lt;/p&gt;

&lt;h3 id=&#34;archetypesフォルダ:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;archetypesフォルダ&lt;/h3&gt;

&lt;p&gt;記事の雛形を置くフォルダです。&lt;br /&gt;
雛形ファイルは &lt;strong&gt;hugo new&lt;/strong&gt; コマンドで記事ファイルを生成する時に使用されます。雛形が見つからない場合は、日付、タイトル、下書きフラグのみの記事が生成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-13T14:31:25+09:00&amp;quot;
draft = true
title = &amp;quot;test&amp;quot;

+++


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;contentフォルダ:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;contentフォルダ&lt;/h3&gt;

&lt;p&gt;記事を置くフォルダです。&lt;br /&gt;
このフォルダにあるファイルはHugoの変換処理を通ります。例えば、.md（Markdown形式）ファイルの内容は、HTMLに変換され、所定のレイアウトに埋め込まれてHTMLファイルとして出力されます。&lt;br /&gt;
変換処理が不要なファイルは後述する &lt;strong&gt;static&lt;/strong&gt; フォルダに置いてください。&lt;/p&gt;

&lt;h3 id=&#34;dataフォルダ:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;dataフォルダ&lt;/h3&gt;

&lt;p&gt;データファイルを置くフォルダです。&lt;br /&gt;
データファイルは、任意の名前・値を定義することができるので、簡易なKey-Valueデータストアとして使用できます。&lt;br /&gt;
例えば、トピックスや会社の年表、製品情報等をデータファイルとして保存しておくと、レイアウトファイルを変更することなくデータのみを更新することができます。&lt;br /&gt;
因みに &lt;a href=&#34;http://www.feedtailor.jp/&#34; target=&#34;_blank&#34;&gt;弊社サイト&lt;/a&gt; の &amp;ldquo;WHAT&amp;rsquo;S NEW&amp;rdquo; の内容は、レイアウトに直接書くのではなく、以下のようにTOML形式のデータファイルに記載しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[news_row]]
  date        = &amp;quot;2016.03.14&amp;quot;
  title       = &#39;&amp;lt;a href=&amp;quot;http://staff.feedtailor.jp/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;スタッフブログ&amp;lt;/a&amp;gt;のデザインを変更しました(静的Webサイト化)&#39;

[[news_row]]
  date        = &amp;quot;2015.01.27&amp;quot;
  title       = &amp;quot;B2B向けサービス「SYNCNEL」を事業売却しました&amp;quot;
  url         = &amp;quot;http://feedtailor.jp/wp/?p=15686&amp;quot;

[[news_row]]
  date        = &amp;quot;2015.10.16&amp;quot;
  title       = &amp;quot;天気予報アプリ「そら案内」および関連全事業を無償譲渡しました&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;layoutフォルダ:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;layoutフォルダ&lt;/h3&gt;

&lt;p&gt;HTMLのレイアウトを置くフォルダです。&lt;br /&gt;
このフォルダにあるレイアウトに &lt;strong&gt;content&lt;/strong&gt; フォルダ内の記事や &lt;strong&gt;data&lt;/strong&gt; フォルダのデータを埋め込んでHTMLを生成します。&lt;br /&gt;
レイアウト内の制御文やループはGo言語の &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/templateライブラリ&lt;/a&gt; を使って記述します。&lt;/p&gt;

&lt;h3 id=&#34;staticフォルダ:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;staticフォルダ&lt;/h3&gt;

&lt;p&gt;JSやCSS、画像等の静的素材を置くフォルダです。&lt;br /&gt;
Hugoの変換処理が不要なファイルはこのフォルダに設置してください。&lt;strong&gt;public&lt;/strong&gt; フォルダにそのままコピーされます。&lt;/p&gt;

&lt;h3 id=&#34;themeフォルダ:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;themeフォルダ&lt;/h3&gt;

&lt;p&gt;テーマを置くフォルダです。&lt;br /&gt;
Hugo では複数のテーマを保存しておいて、簡単に切り替えることができます。&lt;br /&gt;
&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;公開されているテーマ&lt;/a&gt; も沢山ありますので利用してみるのもよいでしょう。&lt;/p&gt;

&lt;p&gt;今回は以上です。&lt;br /&gt;
各フォルダの詳細についても順次書いていこうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（導入編）</title>
      <link>http://staff.feedtailor.jp/2016/04/05/hugo_01</link>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/04/05/hugo_01</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;これから何回かに分けて本サイト構築時に使用した静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; についてご紹介したいと思います。&lt;/p&gt;

&lt;h3 id=&#34;hugoとは:54279ffd0468d4c436fbfa877d58da8e&#34;&gt;Hugoとは？&lt;/h3&gt;

&lt;p&gt;Go言語で書かれた&lt;a href=&#34;http://staticgen.com&#34;&gt;静的サイトジェネレータ&lt;/a&gt;です。&lt;br /&gt;
代表的な静的サイトジェネレータとして、GitHub社が開発している&lt;a href=&#34;https://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;や&lt;a href=&#34;https://middlemanapp.com/jp/&#34;&gt;Middleman&lt;/a&gt;、
国産ではChatwork社が開発している&lt;a href=&#34;https://github.com/chatwork/Phest&#34;&gt;Phest&lt;/a&gt;等がありますが、Hugoを選んだ大きな理由は以下の３つです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;インストールが楽&lt;/li&gt;
&lt;li&gt;クロスプラットフォーム対応&lt;/li&gt;
&lt;li&gt;ページ生成が速い&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Win/Mac/Linux環境に対応していて、どの環境も実行ファイル１つです。簡易HTTPサーバも内蔵しているのでRubyやPHPのインストールはもちろんApacheさえも不要です。&lt;br /&gt;
ページ生成も高速で本ブログの規模であれば0.3秒くらいで生成されます。&lt;/p&gt;

&lt;h3 id=&#34;インストール:54279ffd0468d4c436fbfa877d58da8e&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;各プラットフォーム用の実行ファイルが提供されているので&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;リリース情報のページ&lt;/a&gt;からダウンロードしてください。
Windows 64bit版はhugo_0.15_windows_amd64.zip、MacOSX版はhugo_0.15_darwin_amd64.zipです。zipファイルから展開した実行ファイルは hugo（Winは hugo.exe）という名前に変更しておきましょう。&lt;br /&gt;
Mac版であれば&lt;a href=&#34;http://brew.sh/index_ja.html&#34;&gt;Homebrew&lt;/a&gt;からもインストールできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
$ brew update
$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;サイト作成:54279ffd0468d4c436fbfa877d58da8e&#34;&gt;サイト作成&lt;/h3&gt;

&lt;p&gt;新規サイトを作成するには以下のコマンドを実行します。hugo(.exe)を環境変数PATHに登録していない場合はダウンロードしたhugo(.exe)があるフォルダで実行しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site サイト名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで空のサイトが出来上がります。生成されたのはサイトの情報を入力する config.toml ファイルと空のフォルダ５つ（&lt;strong&gt;archetypes&lt;/strong&gt;, &lt;strong&gt;content&lt;/strong&gt;, &lt;strong&gt;data&lt;/strong&gt;, &lt;strong&gt;layouts&lt;/strong&gt;, &lt;strong&gt;static&lt;/strong&gt;）だけで中身はありません。
以降、hugo コマンドは config.toml ファイルのあるフォルダで実行しますので、hugo(.exe)を同じ場所に移動しておくとよいでしょう。&lt;/p&gt;

&lt;p&gt;生成された config.toml ファイルは以下のようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;baseurlがこのサイトを公開するURL、languageCodeはRSS出力に付与する文字コード、titleはサイトのタイトルです。環境に合わせて変更してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://example.com/&amp;quot;
languageCode = &amp;quot;ja&amp;quot;
title = &amp;quot;Hugo入門&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;テーマのインストール:54279ffd0468d4c436fbfa877d58da8e&#34;&gt;テーマのインストール&lt;/h3&gt;

&lt;p&gt;レイアウトを１から作るのは時間がかかるので、一般公開されているテーマを利用してみましょう。&lt;br /&gt;
Hugo公式サイトの&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;テーマ一覧のページ&lt;/a&gt;から好きなデザインを選択します。ここでは公式サイトの&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;クイックスタート&lt;/a&gt;と同じく &lt;a href=&#34;http://themes.gohugo.io/hugo-uno/&#34;&gt;hugo-uno&lt;/a&gt; テーマを使ってみます。
まずはサイトのトップフォルダ（config.tomlがあるフォルダ）に themes というフォルダを作って、そこにhugo-unoテーマを設置します。gitコマンドが使える方は以下で。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir themes
$ cd themes
$ git clone https://github.com/SenjinDarashiva/hugo-uno.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git コマンドが使えない方は &lt;a href=&#34;https://github.com/SenjinDarashiva/hugo-uno/archive/master.zip&#34;&gt;ここ&lt;/a&gt; からzipファイルをダウンロードして展開してください。フォルダ名は hugo-uno に変更してください。&lt;/p&gt;

&lt;h3 id=&#34;記事の追加:54279ffd0468d4c436fbfa877d58da8e&#34;&gt;記事の追加&lt;/h3&gt;

&lt;p&gt;記事は content フォルダに置きます。以下のコマンドでからの記事ファイルを作ることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new ファイル名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは post/hello.md という名前で作ってみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/hello.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コマンドを実行すると content フォルダ内に post フォルダが作成され、その中に hello.md ファイルが作られます。&lt;br /&gt;
標準設定ではファイルの場所・名前がそのままURLのパス部分になるので、この記事は http://サーバ名/post/hello/ というURLで公開されることになります。&lt;/p&gt;

&lt;p&gt;テキストエディタで hello.md を編集しましょう。生成された直後の hello.md ファイルの中身は以下のようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-05T12:00:00+09:00&amp;quot;
draft = true
title = &amp;quot;hello&amp;quot;

+++

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先頭の半角 + 3文字から次の + 3文字の行までを &lt;strong&gt;フロントマター&lt;/strong&gt; と呼び、記事のタイトルや日付、カテゴリ等ページの属性を指定します。&lt;br /&gt;
title がページのタイトルです。draft は下書きかどうかの状態で true が指定されているとプレビューやページ生成がされませんので false に指定するか削除しましょう。本文はフロントマター以降（この場合は７行目以降）に &lt;a href=&#34;https://ja.wikipedia.org/wiki/Markdown&#34;&gt;Markdown記法&lt;/a&gt; で記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-05T12:00:00+09:00&amp;quot;
title = &amp;quot;Hugoを始めました&amp;quot;

+++

こんにちは、**Hugo** を始めました。

### Markdown記法

Markdownの書き方は以下のサイトが参考になります。

- [Wikipedia](https://ja.wikipedia.org/wiki/Markdown)
- [Qiita](http://qiita.com/Qiita/items/c686397e4a0f4f11683d)
- [日本語Markdownユーザー会](http://www.markdown.jp/what-is-markdown/#markdown-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;プレビュー:54279ffd0468d4c436fbfa877d58da8e&#34;&gt;プレビュー&lt;/h3&gt;

&lt;p&gt;hugo は簡易HTTPサーバを内蔵していていつでもプレビューできます。プレビュー中は自動的にリロードがかかるため何もしなくても表示が逐次更新されます。
プレビュー機能を実行するには &lt;strong&gt;hugo server&lt;/strong&gt; コマンドを使用します。-t の後ろはテーマのフォルダ名を指定してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -t hugo-uno -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで &lt;a href=&#34;http://127.0.0.1:1313/&#34;&gt;http://127.0.0.1:1313/&lt;/a&gt; にアクセスすると作成したサイトが表示されます。終了するときは Ctrl+C を押してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2016/04/hugo_01_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;ページ生成:54279ffd0468d4c436fbfa877d58da8e&#34;&gt;ページ生成&lt;/h3&gt;

&lt;p&gt;プレビューで問題がないことを確認できたらページ生成です。以下のコマンドを実行してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo -t hugo-uno
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ウェブサイトとして公開するファイル一式が &lt;strong&gt;public&lt;/strong&gt; フォルダに出力されますので、このままウェブサーバに設置してください。&lt;/p&gt;

&lt;p&gt;今回はインストールからページ生成、ウェブサーバの公開までの流れを急ぎでご紹介しましたが、次回以降は各項目についてもう少し掘り下げていこうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第2回静的Webサイト勉強会を開催しました</title>
      <link>http://staff.feedtailor.jp/2016/03/30/swebmtg2</link>
      <pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/03/30/swebmtg2</guid>
      <description>&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今週 2016/03/28(月) に東京高円寺にある &lt;a href=&#34;http://www.val.co.jp&#34;&gt;ヴァル研究所様&lt;/a&gt; で &lt;a href=&#34;http://connpass.com/event/26420/&#34;&gt;第2回 静的Webサイト 勉強会&lt;/a&gt; を開催しました。&lt;/p&gt;

&lt;p&gt;勉強会は約60名様、その後の懇親会も半数の方が参加くださって大盛況でした。ありがとうございました。&lt;/p&gt;

&lt;p&gt;今回はゲストスピーカーとして &lt;a href=&#34;https://www.alleyoop.co.jp&#34;&gt;株式会社アリウープ&lt;/a&gt; の河野様 に講演いただきました。&lt;br /&gt;
名だたる大手企業のサイトを多数手掛けていらっしゃるので説得力が違います。静的サイトと動的要素の組み合わせ例とか今後の予測とか本当に勉強になりました。
弊社では現状フリーの静的サイトジェネレータしか実績がありませんので、機会があれば商用静的CMSについても調査、比較検討してみたいと思います。&lt;/p&gt;

&lt;p&gt;ライトニングトークの１つ目は &lt;a href=&#34;http://m2mtech.jp/&#34;&gt;M2Mテクノロジーズ株式会社&lt;/a&gt; 内山様からウェブサイトの改竄検知について。
シンプルな方法ですが、HTMLや画像をファイルレベルで差分を取るって有効だと感じました。&lt;/p&gt;

&lt;p&gt;２つ目は &lt;a href=&#34;http://classmethod.jp/&#34;&gt;クラスメソッド株式会社&lt;/a&gt; 鈴木様 からCloudFrontの利用について。
静的サイトはCDNと相性がいいので積極的に利用するのも良いかも。安めのサーバと組み合わせるとトータルコストが下がる可能性もありそうです。&lt;/p&gt;

&lt;p&gt;さて、私は大阪で行った &lt;a href=&#34;http://connpass.com/event/25507/&#34;&gt;第1回&lt;/a&gt; と同じく「静的サイトジェネレータHugoを使ったサイト運用」という題目で話してきました。&lt;br /&gt;
&lt;a href=&#34;http://staff.feedtailor.jp/2016/03/25/migration&#34;&gt;前回のエントリ&lt;/a&gt; でも書きましたが、既に６つほど静的サイトを構築していますので、その際に感じたことをざっくりでも共有できたらと思いまして。
話した内容は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;構築したサイトのご紹介

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.syncnel.biz/&#34;&gt;SYNCNELオフィシャルサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;弊社コーポレートサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.feedtailor.jp&#34;&gt;弊社社長ブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hitokoto.feedtailor.jp&#34;&gt;弊社スタッフのひとことブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;当ブログ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hugoでブログエントリの追加の実演&lt;/li&gt;
&lt;li&gt;構築／運用上の課題、メリット&lt;/li&gt;
&lt;li&gt;自作GUIのチラ見せ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;br /&gt;
個人的に非技術者の方が &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; を利用する上で１番の障害になっているのが黒い画面（コマンドライン）だと感じておりまして、私のプレゼンではそれをフォローするために作成したGUIをご紹介しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2016/03/swebmtg2_gui.png&#34; alt=&#34;GUI&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上段左から順に操作するとエントリの追加、バージョン管理からサーバへの反映まで出来るようになっています。各ボタンの機能を簡単にご紹介します。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;フォルダを開く&lt;/th&gt;&lt;td&gt;プロジェクトのフォルダを開く&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;更新&lt;/th&gt;&lt;td&gt;git pull コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;コンテンツを追加&lt;/th&gt;&lt;td&gt;hugo new コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;画像を追加&lt;/th&gt;&lt;td&gt;指定した画像のサムネイルを作成&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;プレビュー&lt;/th&gt;&lt;td&gt;hugo server コマンドの実行、ブラウザの起動&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;ビルド&lt;/th&gt;&lt;td&gt;hugo コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;登録&lt;/th&gt;&lt;td&gt;git add / commit / push コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;アップロード&lt;/th&gt;&lt;td&gt;サーバへのファイル転送&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;JavaFXで作成したUIから、直接コマンドを実行したりシェルスクリプトを呼び出しているだけの簡単なものですが、黒い画面を排除するには十分で、
先に紹介した弊社の&lt;a href=&#34;http://hitokoto.feedtailor.jp/&#34;&gt;ひとことブログ&lt;/a&gt;はこれを使用して更新しています。&lt;/p&gt;

&lt;p&gt;懇親会でもいろんな方と話しましたが、まだまだ静的サイトの有用性や&lt;a href=&#34;http://staticgen.com&#34;&gt;静的サイトジェネレータ&lt;/a&gt;の存在が広まってないな、と感じました。
ご紹介したGUIのようなものや日本語の情報が増えて一般の方にも利用してもらいやすい環境ができれば良いなと思います。&lt;/p&gt;

&lt;p&gt;サイトの静的化に興味がある方や既に運用しているがコマンドラインの操作が煩わしい、というような方は是非ご相談ください。&lt;/p&gt;

&lt;p&gt;2016/3/31 一部加筆・修正しました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>スタッフブログを静的サイトに移行しました</title>
      <link>http://staff.feedtailor.jp/2016/03/25/migration</link>
      <pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/03/25/migration</guid>
      <description>&lt;p&gt;久しぶりの投稿になります、 tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/2014/04/18/45/&#34;&gt;2014年4月の開設&lt;/a&gt; からずっと &lt;a href=&#34;https://ja.wordpress.org/&#34;&gt;WordPress&lt;/a&gt; で運用していた本スタッフブログを静的サイトに移行しました。&lt;/p&gt;

&lt;p&gt;昨年末から弊社が管理しているウェブサイトを徐々に静的サイトに移行していて、これで既に６サイト目。今回も静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; を使用しています。&lt;/p&gt;

&lt;p&gt;既存のテーマを拝借して、&lt;a href=&#34;https://ja.wordpress.org/&#34;&gt;WordPress&lt;/a&gt; から記事をエクスポートしたり何やかんや手を入れてトータル３日くらいで設置しました。その後も少しずつ修正してますが。
ちなみに本サイトは &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; で運用。ソースコードも &lt;a href=&#34;https://github.com/feedtailor/StaffBlog&#34;&gt;弊社のGitHub&lt;/a&gt; で公開しています。&lt;/p&gt;

&lt;p&gt;というわけで、構築した時のノウハウとか課題とか、本サイトを更新しながら備忘録的に書いていく予定です。静的Webサイトに関する勉強会もやってますので、興味のある方は是非ご参加ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://connpass.com/event/26420/&#34;&gt;第2回 静的Webサイト 勉強会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://connpass.com/event/25507/&#34;&gt;第1回 静的Webサイト 勉強会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;静的サイトへの移行については「なんでそんな面倒臭いことを？」とか「わざわざ移行する必要ある？」とか意見はあると思いますが、好きなテキストエディタを使って &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown記法&lt;/a&gt; で書けるので個人的にはとても気に入ってます。&lt;/p&gt;

&lt;p&gt;もちろん動的サイトじゃないと無理って言うところもあるので、全部置き換えることはできないしその必要もありませんが、Markdownで記事を書いてサクッと投稿、みたいな運用をしたい方は移行を検討してみても良いのではないでしょうか。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>フィードテイラーのここが変わってる！「今日の新発見」編</title>
      <link>http://staff.feedtailor.jp/2015/04/30/908</link>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2015/04/30/908</guid>
      <description>

&lt;p&gt;はじめまして、&lt;a href=&#34;http://feedtailor.jp&#34;&gt;フィードテイラー&lt;/a&gt;の新人／最年長の tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;新人と言っても既に4ヶ月経ってしまいました。世間の新入社員は4ヶ月でどれくらい成長するんでしょうか。&lt;/p&gt;

&lt;p&gt;それはともかくとして、今回は弊社の一日の流れをご紹介したいと思います。&lt;/p&gt;

&lt;p&gt;このブログをご覧になっている方でしたらご存じかもしれませんが、&lt;a href=&#34;http://feedtailor.jp/wp/&#34;&gt;弊社代表の大石&lt;/a&gt;はかなり就労環境に対して先進的な考えを持っており、各所で&lt;a href=&#34;http://gmba.jp/2015-02-19-15-20-41/44-opinions/1219-opinion-oishi-vol2.html&#34;&gt;情報発信&lt;/a&gt;したりメディアに取り上げられています。&lt;/p&gt;

&lt;p&gt;変わった制度は色々ありますが、&lt;strong&gt;残業禁止&lt;/strong&gt;、&lt;strong&gt;副業推奨&lt;/strong&gt;、&lt;strong&gt;SNS推奨&lt;/strong&gt;、&lt;strong&gt;エンジニアの電話／メール禁止&lt;/strong&gt;、&lt;a href=&#34;http://feedtailor.jp/wp/?p=178&#34;&gt;Mac&lt;/a&gt;や[iPad]()、最近では&lt;a href=&#34;http://feedtailor.jp/wp/?p=14361&#34;&gt;&lt;strong&gt;Apple Watchの購入支援&lt;/strong&gt;&lt;/a&gt;など。Windows禁止の時期もあったようです（今も？）。&lt;/p&gt;

&lt;h4 id=&#34;残業禁止:6b111f05cd8857919eb10378d5dac2f6&#34;&gt;残業禁止&lt;/h4&gt;

&lt;p&gt;最近、耳にする機会が増えたIT系での残業禁止ですが、弊社ではかなり前から取り組んでいます。&lt;/p&gt;

&lt;p&gt;実際に（緊急時を除き）ほとんど&lt;strong&gt;毎日 17:50 には誰もいません！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;残業禁止といっても残業代が支払われないだけでサービス残業しているケースはよくありますが、本当に帰ってます。&lt;/p&gt;

&lt;p&gt;それを支えているのが、&lt;strong&gt;毎日朝夕２回のミーティング&lt;/strong&gt;です。&lt;/p&gt;

&lt;h4 id=&#34;朝ミーティング:6b111f05cd8857919eb10378d5dac2f6&#34;&gt;朝ミーティング〜&lt;/h4&gt;

&lt;p&gt;毎朝9:00から5分程度全員でその日やるべき事、御客様からのフィードバックや打合せの時間調整／報告などを確認します。&lt;/p&gt;

&lt;p&gt;終わったら直ぐに各自仕事を始めます。社内の会話は slack や twitter、場合によっては Redmine のチケット上で行われるのでほとんど会話はありません。当然電話もメールも来ないのでひたすらコードを書き続けています。&lt;/p&gt;

&lt;p&gt;12:00〜12:45 の昼休みを挟んで午後ももくもくと作業を続けます。&lt;/p&gt;

&lt;p&gt;その後、17:00 頃から各自日報を slack に投げ始め、17:15 から夕方ミーティング。終わったら定時に帰るという流れです。&lt;/p&gt;

&lt;h4 id=&#34;夕方ミーティング:6b111f05cd8857919eb10378d5dac2f6&#34;&gt;夕方ミーティング&lt;/h4&gt;

&lt;p&gt;入社して一番驚いたのがこの夕方ミーティングです。&lt;/p&gt;

&lt;p&gt;各自3分間程度、その日の作業内容を報告（発表）します。日報を出すことは普通にあると思いますが、&lt;strong&gt;発表&lt;/strong&gt;というのが肝で。&lt;/p&gt;

&lt;p&gt;その日の作業でこんな物作りましたとか、ここまで動くようになりましたとか、画面に映して発表します。ほぼ毎日、みんな動く物を出してくるのであまり作業が進まなかった日はなかなかつらいです。16:00頃から何を発表しようか考え出して、何もなければ何とか見せられるものを作ろうと追い込みを掛けます。もしかしたら15:00〜17:00が一番集中している時間帯かも知れません。&lt;/p&gt;

&lt;h4 id=&#34;今日の新発見:6b111f05cd8857919eb10378d5dac2f6&#34;&gt;今日の新発見&lt;/h4&gt;

&lt;p&gt;夕方ミーティングではもう一つ「&lt;a href=&#34;http://feedtailor.jp/wp/?p=8384&#34;&gt;今日の新発見&lt;/a&gt;」というものを発表しなければいけません。&lt;/p&gt;

&lt;p&gt;発表する内容は技術的な事柄であれば何でもいいのですが、みなさん&lt;strong&gt;毎日発見はありますか？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;毎日はないですよね。私もないです。&lt;/p&gt;

&lt;p&gt;作業中に気づいたちょっとしたTipsでもあればいいのですが、そんなもの毎日は見つかりません。なのでSNS、技術系ポータルサイトやブログを普段から見まくって話すネタを探しています。&lt;/p&gt;

&lt;p&gt;これだけ書くとなんだか面倒くさいことをやっているようにしか聞こえませんが、なれてくると案外コレが楽しくって。むしろすごく重要な事ではないかと思えてきます。&lt;/p&gt;

&lt;p&gt;同僚と話題がかぶらないように、&lt;strong&gt;自分の得意分野を探すきっかけ&lt;/strong&gt;にもなります。&lt;/p&gt;

&lt;p&gt;毎日同じ物を作り続けていると、どうしても頭の中がソレだけになったりしませんか?&lt;/p&gt;

&lt;p&gt;今使っている技術や手法に縛られて視野が狭くなってしまいがちです。私は以前そうでした。&lt;/p&gt;

&lt;p&gt;が、技術は日々進歩しています。&lt;/p&gt;

&lt;p&gt;一度遅れをとると、追いつくには相当な努力が必要だと思います。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;普段からアンテナを張っておくと自然と色々なことに興味がわいてきて、作りたいモノや試したいことが増えます&lt;/strong&gt;（たぶん）。&lt;/p&gt;

&lt;p&gt;こうなるともはや発表は関係ないです。見事に術中にはまってます(?)。&lt;/p&gt;

&lt;p&gt;弊社が&lt;a href=&#34;https://itunes.apple.com/us/app/sora-youjin/id910413680?l=ja&amp;amp;ls=1&amp;amp;mt=8&#34;&gt;アレ&lt;/a&gt;や&lt;a href=&#34;https://itunes.apple.com/jp/app/8bitter/id600772761?mt=8&#34;&gt;コレ&lt;/a&gt;や&lt;a href=&#34;https://itunes.apple.com/jp/app/fu-haobukku-zhenno-jian-kaiki/id576560440?mt=8&#34;&gt;ソレ&lt;/a&gt;や幾つもネタアプリを作っている源の一つはコレかも知れません。&lt;/p&gt;

&lt;p&gt;長くなりましたが、技術のフォローアップはもちろん、就労時間にメリハリを付けるためにも、朝／夕方ミーティングや「今日の新発見」を導入してみてはいかがでしょうか？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>feedtailor スタッフブログを始めます</title>
      <link>http://staff.feedtailor.jp/2014/04/18/45</link>
      <pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2014/04/18/45</guid>
      <description>&lt;p&gt;feedtailor代表の oishi です。&lt;/p&gt;

&lt;p&gt;これまで&lt;a href=&#34;http://feedtailor.jp/&#34;&gt;(株)フィードテイラー&lt;/a&gt;のブログは僕の個人ブログ的(?)な&lt;a href=&#34;http://feedtailor.jp/wp/&#34;&gt;社長ブログ&lt;/a&gt;のみだったのですが、この度、エンジニアを含む弊社スタッフが自ら発信する場として別ブログを立ち上げる事にしました。名付けて &lt;strong&gt;feedtailor スタッフブログ&lt;/strong&gt; &amp;#8230;ってそのままですね  &lt;img src=&#34;http://staff.feedtailor.jp/images/smilies/icon_smile.gif&#34; alt=&#34;:-)&#34; class=&#34;wp-smiley&#34; /&gt;&lt;/p&gt;

&lt;p&gt;例えばアプリの話。これまでは僕が社長ブログでアプリ紹介を書いていたのですが、アップデートには余り言及出来ていなかったりとか、あるアプリの実は面白い機能や活用方が紹介しきれていなかったりとか、ちょっと勿体ない事になっていたのです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/feedtailor&#34;&gt;github&lt;/a&gt;に公開しているモノの話とかもそうですね。実は超便利なツールが密やかに追加されているのですが一切言及してなかったりとか、ライブラリの&lt;a href=&#34;https://github.com/feedtailor/FTFoundation&#34;&gt;FTFoundation&lt;/a&gt;に便利なクラスが追加されてます&amp;#8230;的な話とか。このへんはエンジニアの生の声が外にでる方が良いと思ってたのです、前々から。&lt;/p&gt;

&lt;p&gt;他にもウチの社内の雑多なネタ、今週のお菓子とか(笑)、&lt;a href=&#34;http://feedtailor.jp/wp/?p=8384&#34;&gt;毎日夕方にやってる新発見&lt;/a&gt;ネタとか、そんな話題もありかも知れないですね。まぁまぁ色々考えられるのでいわゆる開発ブログ的な位置付けではなく、緩い感じでスタッフブログとしました。&lt;/p&gt;

&lt;p&gt;基本的に執筆陣は僕以外がメインになると思います。月に数回更新できれば&amp;#8230;ぐらいの頻度でやっていく予定ですので御覧頂ければ幸いです。そんな訳で &lt;a href=&#34;http://staff.feedtailor.jp/&#34;&gt;feedtailorスタッフブログ&lt;/a&gt; をどうぞ宜しくお願い致します。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2015/07 on feedtailor Inc. スタッフブログ</title>
    <link>http://staff.feedtailor.jp/archives/2015/07/</link>
    <description>Recent content in 2015/07 on feedtailor Inc. スタッフブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 31 Jul 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://staff.feedtailor.jp/archives/2015/07/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>超聖域：SYNCNEL KAIZEN</title>
      <link>http://staff.feedtailor.jp/2015/07/31/988</link>
      <pubDate>Fri, 31 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2015/07/31/988</guid>
      <description>

&lt;p&gt;サーバサイド担当のくまくら (&lt;a href=&#34;https://twitter.com/kumatch&#34;&gt;@kumatch&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;7/1 から 7/7 まで社内で行われた&lt;a href=&#34;http://feedtailor.jp/wp/?p=14425&#34;&gt;「超聖域」&lt;/a&gt; の成果報告のブログ記事となります。&lt;/p&gt;

&lt;p&gt;私はこれまで &lt;a href=&#34;https://www.syncnel.biz/&#34;&gt;SYNCNEL&lt;/a&gt; のサーバサイドの実装と構築を担当し続けているのですが、今回自由に使っていい一週間あるということで、その SYNCNEL サービスの運用のなか Issue として挙げられている事柄のうち個人的に関心あるものをピックアップして、ある程度の方針決定、あるいは解決に至るまでできるかに時間を充てることにしました。&lt;/p&gt;

&lt;h2 id=&#34;1-サブドメインベースアプリケーション&#34;&gt;1. サブドメインベースアプリケーション&lt;/h2&gt;

&lt;p&gt;SYNCNEL では、サービス契約されたお客様ごとに固有の名前を持った識別子を発行して運用しているのですが、この識別子をサービスのサブドメイン部分に据えてより良いサービス提供ができないかという機能案がありましたので、その可能性について調査と仮実装を行ってみました。&lt;/p&gt;

&lt;h3 id=&#34;ドメインをワイルドカードで運用する&#34;&gt;ドメインをワイルドカードで運用する&lt;/h3&gt;

&lt;p&gt;何はともあれ、任意のサブドメインを持つドメインアドレスで特定のエントリサーバへリクエストしてもらう必要がありますので、ドメインはワイルドカードで運用することになります。&lt;/p&gt;

&lt;p&gt;たとえば Amazon Route53 では &lt;a href=&#34;http://aws.amazon.com/jp/route53/faqs/#Support_for_wildcard_entries&#34;&gt;全てのレコードタイプによるワイルドカードエントリがサポートされている&lt;/a&gt; ので、これを利用すれば簡単に実現可能です。&lt;/p&gt;

&lt;p&gt;www.example.com という A レコードと *.example.com というワイルドカードな CNAME レコードが存在している場合でも、www.example.com の解決はきちんと A レコードの方になりますので、公式サイトサーバとアプリケーションサーバとを区別して備えるといったことも容易ではないでしょうか。&lt;/p&gt;

&lt;p&gt;ただ、利用している DNS サービスによってはワイルドカードエントリが定義不可能なものもあるようです。&lt;/p&gt;

&lt;h3 id=&#34;アクセスコントロール-と-サービスコントロール&#34;&gt;「アクセスコントロール」と「サービスコントロール」&lt;/h3&gt;

&lt;p&gt;リクエストを受け付けるサーバ側はどんな構成になるべきかと考えた際に、結論として「サブドメイン部分にあたる会社識別子を用いて会社を特定した上で、どのような問題を解決したいのか」という点でやるべきことが異なるということに至りました。&lt;/p&gt;

&lt;p&gt;たとえば、特定した会社によってシャーディングしたり、リクエスト元の制限や認証方式の切り替えなどを統括して行いたいというのであれば、エントリサーバでそれらの処理を行った上で後ろに控えるアプリケーションサーバへ Proxy するといった体制が考えられます。この体制のポイントとしてアプリケーションサーバで備えているサービス固有の振る舞いとは切り離されていて、アプリケーションレイヤには直接関係のないインフラストラクチャやセキュリティの解決が行えているというところです。アクセスコントロールが主たる目的となります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/07/3e571536dc03bb3a152da5af748424e2.png&#34; alt=&#34;access control&#34; width=&#34;743&#34; height=&#34;490&#34; class=&#34;alignnone size-full wp-image-993&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一方、アプリケーション内で特定した会社ごとに固有な内容に基づく振る舞いを行いたい場合は、アプリケーションサーバ上で直接サブドメイン名による会社の特定と処理を行う必要があります。たとえば簡単な例だとページトップのロゴを変更したりですとか、特定した会社による名前空間内でサービスのための処理を施すなどが考えられます。こういったケースだと、この振る舞いそのものはアプリケーションレイヤに組み込まれるべき実装になっていくことでしょう。こちらは実際のサービス内容を決定する、サービスコントロールが主の目的になります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/07/009c9f7a4c31e2ce5119767977c90e13.png&#34; alt=&#34;service control&#34; width=&#34;775&#34; height=&#34;388&#34; class=&#34;alignnone size-full wp-image-994&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上で目的がはっきりとしました。&lt;/p&gt;

&lt;p&gt;今回私は、前者のアクセスコントロールのパターンのためのサーバを Node を使って実装してみました。HTTP アクセスしてきたクライアントのリクエストソースからサブドメイン部を抽出して、サーバプロセス内で保持しているルーティング情報に基づいて転送を行うというものです。転送には &lt;a href=&#34;https://github.com/nodejitsu/node-http-proxy&#34;&gt;http-proxy&lt;/a&gt; や &lt;a href=&#34;https://github.com/substack/bouncy&#34;&gt;bouncy&lt;/a&gt; などを利用して、同じことを行ういくつかのサーバプログラムコードを書きました。&lt;/p&gt;

&lt;p&gt;以下のコードは http-proxy を使った例です。ここでは静的に持った情報を元に転送先を決定する処理のみを行っていますが、前述したとおり転送前に個別に設けられたアクセス制限処理を合わせて行うこともできます。またここでは会社情報自体がコードに埋め込まれていますが、別途任意のデータベースに保持しておいてそこから参照すれば情報更新後もサーバの再起動なしに反映、利用することができることでしょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;br /&amp;gt;var http = require(&amp;quot;http&amp;quot;);
var httpProxy = require(&amp;quot;http-proxy&amp;quot;);
var headerHostname = require(&amp;quot;header-hostname&amp;quot;);

var routes = {
    foo: {
        host: &amp;quot;172.16.0.1&amp;quot;, port: 8000
    },
    bar: {
        host: &amp;quot;172.16.10.1&amp;quot;, port: 8000
    }
};


var proxy = httpProxy.createProxyServer({ xfwd: true });
var server = http.createServer(function(req, res) {
    var hostname = headerHostname(req.headers);
    var company = hostname.match(/^([a-z0-9-]+).example.com$/);
    var route = routes[company] || undefined;

    if (route) {
        proxy.web(req, res, route);
    } else {
        res.writeHead(404, {&#39;Content-Type&#39;: &#39;text/plain&#39;});
        res.end();
    }
});

server.listen(80);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;後者のサービスコントロールパターンの方も実際のアプリケーションサーバ側のコードとして実装して、初アクセス時に会社名を表示したりなどの会社固有の振る舞いを実装してみました。こちらはコード例は割愛します。&lt;/p&gt;

&lt;h2 id=&#34;2-php-5-3-から-php-5-6-への環境移行テスト&#34;&gt;2. PHP 5.3 から PHP 5.6 への環境移行テスト&lt;/h2&gt;

&lt;p&gt;SYNCNEL のアプリケーションサーバの一部は PHP で書かれているのですが、その箇所は古い実装体系から継続的に進めてきたため、内部の一部ではより古い PHP コードが残っています。その都合上 PHP 5.3 へのアップグレードを最後に、それ以上のアップグレードを行うことをこれまで行うことができていませんでした。&lt;/p&gt;

&lt;p&gt;今回まとまった時間が用意されたということで、現行のコードを PHP 5.4 以降のものへアップグレードするための考慮点の調査と、実際にアップグレードしてみての移行テストを行いました。やはり古いコードがベースになっているということもあり、PHP の設定値および直接コード側の改変が若干必要でしたが、ひとまずは最新バージョンである PHP 5.6 でアプリケーションサーバの稼働やテストコードによる動作（green）に成功しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://php.net/manual/ja/migration54.new-features.php&#34;&gt;PHP 5.4 の新機能&lt;/a&gt;でコードが比較的楽に書けるようになる（配列は言わずもがなですが、個人的にはクロージャ内での $this 参照が嬉しい）恩恵もありますが、セキュリティアップデートの考慮や、最近では Composer で管理している各 module が requirement している PHP バージョンが 5.4 以降になりはじめていたりなどもあり、すみやかにバージョンアップを行いたいところです。&lt;/p&gt;

&lt;p&gt;表面上動いているように見えるだけという可能性はまだまだ捨てきれないので、今後継続して動作確認を行った上で是非とも本番系への反映を済ませたいと考えています。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>超聖域：そら案内</title>
      <link>http://staff.feedtailor.jp/2015/07/30/950</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2015/07/30/950</guid>
      <description>&lt;p&gt;こんにちは、そら案内担当のitokです。&lt;/p&gt;

&lt;p&gt;超聖域ということで私が選んだ題材は「そら案内」でした。WWDCで発表されたiOS9 / watchOS2 / Swift2.0、これらをふんだんに使った新しい「そら案内」を、ということで調査含めてがっつりと時間を使わせてもらいました。&lt;/p&gt;

&lt;p&gt;ものすごくざっくりというともともとiOS6で書かれていた現行のそら案内をiOS8で、そしてもちろんSwift2.0で書き直そうという取り組みです。&lt;/p&gt;

&lt;p&gt;さて、そら案内は予報を取り扱う共通ライブラリ的なものがありまして、それでもってiOS/Mac版、あるいはほかのそらシリーズのアプリとの共通化を図っています。&lt;/p&gt;

&lt;p&gt;というわけで、まずはその部分の作り直しです。もともと後付けの機能やらなにやらでごちゃごちゃしてきたところもあって、そのあたりをすっきりとさせました。そのあたりはAndroid / Windows版を新規に作ってきた上でのフィードバックって感じですね。&lt;/p&gt;

&lt;p&gt;データベースにはRealmを採用し、予報のパースにはHimotokiを。JSONマッパーは初めて使う（面倒そうで躊躇していた）のですが、定義さえしてしまえばすごくすっきりしたので大満足です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://realm.io/&#34; target=&#34;_blank&#34;&gt;Realm is a mobile database: a replacement for SQLite &amp;amp; Core Data&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ikesyo/Himotoki&#34; target=&#34;_blank&#34;&gt;ikesyo/Himotoki · GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;通信部分はもともとAFNetworkingだったんですが、そもそも単純なGETくらいしか使っていないので、素でNSURLSessionを使うことにしました。&lt;/p&gt;

&lt;p&gt;日程の前半を使って共通部分を書き直し、後半でちょっとした動作デモでも、、、と思ってwatchOS2に手を出したのですが・・・&lt;/p&gt;

&lt;p&gt;当時はそもそもCocoaPodsがwatchOS2に対応していなかったり（週をまたぐと対応されていた）、ほかのライブラリ群が対応していなかったりということであえなく断念。このあたりがβ環境を突き進んでいるときの弊害ですね。仕方ない。（2015.7.29時点ではおおむね対応されているようです。ライブラリ作者の皆様ありがとうございます）&lt;/p&gt;

&lt;p&gt;そのかわりといってはなんですが、watchOS2のcomplicationまわりをいろいろと触っていまして、各CLKComplicationTemplateで必要とされているアイコンのサイズが複雑過ぎたので一覧を作ってみました。参考までにどうぞ。（外にお見せできる成果はこのくらいなんで）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/07/CLKComplication_list.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/07/CLKComplication_list-300x174.png&#34; alt=&#34;CLKComplication_list&#34; width=&#34;300&#34; height=&#34;174&#34; class=&#34;alignnone size-medium wp-image-954&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;全体として、こういう大がかりな作り込みはまとまった時間をしっかり使わないと難しい（いつものように複数プロジェクトを平行して作業していると難しい）ので、ちょうどいい機会でした。1本に集中しきれなかったのは残念でしたがそれはそれとしてそれだけ手間取ることができたのも時間があったからというところもありますし、もし次の機会があればそれに生かしたいと思います。&lt;/p&gt;

&lt;p&gt;さてさて、次期バージョンのそら案内、iOS9に間に合わせるべく熱意作業中ですのでお楽しみに。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
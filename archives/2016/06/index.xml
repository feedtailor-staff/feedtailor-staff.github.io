<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2016/06 on feedtailor Inc. スタッフブログ</title>
    <link>http://staff.feedtailor.jp/archives/2016/06/</link>
    <description>Recent content in 2016/06 on feedtailor Inc. スタッフブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 15 Jun 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://staff.feedtailor.jp/archives/2016/06/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（コンテンツ編３）</title>
      <link>http://staff.feedtailor.jp/2016/06/15/hugo_09</link>
      <pubDate>Wed, 15 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/06/15/hugo_09</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の &lt;strong&gt;shortcodes&lt;/strong&gt; について。&lt;/p&gt;

&lt;p&gt;Hugo はコンテンツの記述にMarkdown記法を用いますが、Markdown記法はシンプルで覚えやすい反面、対応していない事項が多数あります。&lt;br /&gt;
例えば、コンテンツにスタイルを適用したりビデオを埋め込んだりしたい場合はHTMLを直接書かなければいけません。&lt;/p&gt;

&lt;p&gt;それらを回避するために Hugo では &lt;strong&gt;shortcodes&lt;/strong&gt; という仕組みが用意されています。&lt;/p&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;p&gt;shortcode とは簡単に言うとコンテンツファイルの中で使用できるスニペットです。&lt;br /&gt;
※テンプレートファイルの中には記述できませんので注意してください。&lt;/p&gt;

&lt;p&gt;使い方は簡単で、コンテンツ内に以下のようなタグを記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% name parameters %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一つ目の単語が shortcode の名前で、それにパラメータが続きます。パラメータはスペース区切りで複数指定でき、スペースを含むパラメータはダブルクオートで括ります。
パラメータは name=&amp;ldquo;value&amp;rdquo; という形式で名前つきで指定することもできます。&lt;/p&gt;

&lt;p&gt;また、HTML と同じように終了タグが必要なものがあります。その場合は、以下のように記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% name parameters %}} shortcode&#39;s **inner** content {{% /name %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上の例は shortcode のタグに % を使っていましたが &amp;lt; &amp;gt; を使用する場合もあります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; name parameters &amp;gt;}} shortcode&#39;s &amp;lt;strong&amp;gt;inner&amp;lt;strong&amp;gt; content {{&amp;lt; /name &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;% と &amp;lt; &amp;gt; では、タグの間のコンテンツの扱いが異なります。&lt;br /&gt;
% はタグ間のコンテンツをMarkdown変換しますが、&amp;lt; &amp;gt; は変換せずそのままHTMLに出力されます。&lt;/p&gt;

&lt;h2 id=&#34;作り方&#34;&gt;作り方&lt;/h2&gt;

&lt;p&gt;shortcode は、layouts/shortcodes フォルダ内にテンプレートを配置します。&lt;br /&gt;
テンプレートのファイル名が shortcode の名前になります。&lt;/p&gt;

&lt;h4 id=&#34;パラメータの取得&#34;&gt;パラメータの取得&lt;/h4&gt;

&lt;p&gt;shortcode に渡されたパラメータを取得する方法は二つあります。&lt;/p&gt;

&lt;p&gt;名前付きでパラメータを指定した場合は、テンプレート中から以下のように取得できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Get &amp;quot;parameter_name&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パラメータが名前つきでない場合は、ポジションを指定します。0 が先頭パラメータのポジションです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Get 0 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;変数&#34;&gt;変数&lt;/h4&gt;

&lt;p&gt;開始タグと終了タグの間に記述した部分は &lt;code&gt;.Inner&lt;/code&gt; 変数に格納されます。&lt;br /&gt;
&lt;code&gt;.Inner&lt;/code&gt; を使用している shortcode の終了タグを省略する場合は以下のように記述してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; name parameters /&amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、shortcode を記述したページには &lt;code&gt;.Page&lt;/code&gt; 変数を介してアクセスできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Page.Title }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使用例&#34;&gt;使用例&lt;/h2&gt;

&lt;h4 id=&#34;例1-baseurl&#34;&gt;例1. baseurl&lt;/h4&gt;

&lt;p&gt;簡単な例として、コンテンツ内にサイトの BaseURL を埋め込む shortcode をご紹介します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;layouts/shortcodes/baseurl.html&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Page.Site.BaseURL }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテンツ内で &lt;code&gt;{{&amp;lt; baseurl &amp;gt;}}&lt;/code&gt; と記述すると、当サイトでしたらHTMLに &lt;code&gt;http://staff.feedtailor.jp/&lt;/code&gt; と出力されます。&lt;/p&gt;

&lt;h4 id=&#34;例2-div&#34;&gt;例2. div&lt;/h4&gt;

&lt;p&gt;もう少しだけ複雑な例として style 属性を指定できる div タグの shortcode を挙げます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;layouts/shortcodes/div.html&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div{{ with .Get &amp;quot;style&amp;quot; }} style=&amp;quot;{{ . | safeCSS }}&amp;quot;{{ end }}&amp;gt;{{ .Inner }}&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテンツには以下のように記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; div style=&amp;quot;color: red;&amp;quot; &amp;gt;}}red{{&amp;lt; /div &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際にこのエントリに埋め込んでみたところ、&lt;/p&gt;

&lt;div style=&#34;color: red;&#34;&gt;red&lt;/div&gt;

&lt;p&gt;が出力されています。&lt;/p&gt;

&lt;p&gt;このように shortcode を定義すると、コンテンツに複雑なHTMLを配置したり、繰り返し記述する定型文を簡単に埋め込むことができるようになります。&lt;br /&gt;
Hugo に最初から組み込まれている便利な shortcodes もありますのでぜひ活用してください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/extras/shortcodes/&#34;&gt;http://gohugo.io/extras/shortcodes/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータ「Hugo」v0.16 がリリースされました</title>
      <link>http://staff.feedtailor.jp/2016/06/08/hugo_08</link>
      <pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/06/08/hugo_08</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;2016/06/06(現地時間)に、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の v0.16 がリリースされました。&lt;br /&gt;
今回は、新バージョンの変更点をご紹介します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases/tag/v0.16&#34;&gt;リリースノーツ&lt;/a&gt; をみたところ、Hugoの開発着手からちょうど 3 年だそうです。
前バージョンである v0.15 からは約 6 ヶ月ぶりのアップデートになります。&lt;br /&gt;
バージョン番号こそ 0.16 ですが、不具合も少なく、十分に安定して使用できています。&lt;/p&gt;

&lt;h3 id=&#34;アップデート&#34;&gt;アップデート&lt;/h3&gt;

&lt;p&gt;Mac の Homebrew を利用している場合は、簡単にアップデートできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew update
$ brew upgrade hugo
$ hugo version
Hugo Static Site Generator v0.16 BuildDate: 2016-06-06T21:37:59+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;debian / ubuntu linuxは、公式リポジトリに登録されましたので、以下のコマンドでインストールできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Window版は &lt;a href=&#34;https://github.com/spf13/hugo/releases/tag/v0.16&#34;&gt;こちら&lt;/a&gt; からダウンロードして exe ファイルを置き換えてください。&lt;/p&gt;

&lt;h3 id=&#34;主な新機能&#34;&gt;主な新機能&lt;/h3&gt;

&lt;h4 id=&#34;partial-builds&#34;&gt;Partial Builds&lt;/h4&gt;

&lt;p&gt;前バージョンまでは、サイトのプレビュー中（&lt;code&gt;hugo server&lt;/code&gt;）にコンテンツの変更点を感知した時、サイト全体を再生成していましたが、今バージョンからは、ファイルシステムを監視し変更されたファイルだけを再読み込みすることで、必要な部分だけを再生成するように変更されています。&lt;br /&gt;
テストの結果、ビルド回数が 10% から最大 90% を減少したと記載されています。&lt;/p&gt;

&lt;h4 id=&#34;template-の改善&#34;&gt;Template の改善&lt;/h4&gt;

&lt;p&gt;今バージョンでは、Go 1.6 で導入された &lt;code&gt;block&lt;/code&gt; キーワードに対応しました。&lt;/p&gt;

&lt;h3 id=&#34;その他の機能改善-修正&#34;&gt;その他の機能改善・修正&lt;/h3&gt;

&lt;p&gt;その他、小さいけれども重要な機能改善・修正事項が多数記載されていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;設定ファイルの Live Reload 対応&lt;/li&gt;
&lt;li&gt;エラー終了時のエラーコード出力&lt;/li&gt;
&lt;li&gt;環境変数からオプションを取得&lt;/li&gt;
&lt;li&gt;themesDir オプションを追加&lt;/li&gt;
&lt;li&gt;ソースファイルベースの相対リンク&lt;/li&gt;
&lt;li&gt;ソート関数 ByLastmod を追加&lt;/li&gt;
&lt;li&gt;ソート関数 ByCount の一貫性改善&lt;/li&gt;
&lt;li&gt;テンプレート関数の追加 &lt;code&gt;readFile&lt;/code&gt; &lt;code&gt;countword&lt;/code&gt; &lt;code&gt;jsonify&lt;/code&gt; &lt;code&gt;slice&lt;/code&gt; &amp;hellip;&lt;/li&gt;
&lt;li&gt;404.html のページ生成無効化オプションを追加&lt;/li&gt;
&lt;li&gt;content, layout, static, theme のシンボリックリンク対応&lt;/li&gt;
&lt;li&gt;server 起動時に指定ポートが使用中の場合は起動中止&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この中ではエラーコード出力とserver起動時のポートチェックが特に嬉しいです。シェルスクリプトからの起動やエラー判定に役立ちます！&lt;br /&gt;
他には、設定ファイルのリロード、ByCountの一貫性改善、テンプレート関数の追加でしょうか。&lt;/p&gt;

&lt;p&gt;他にもまだまだ変更点がありますので、気になった点は動作検証してまた改めてご紹介したいと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（コンテンツ編２）</title>
      <link>http://staff.feedtailor.jp/2016/06/01/hugo_07</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/06/01/hugo_07</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の &lt;strong&gt;archetype&lt;/strong&gt; について。&lt;/p&gt;

&lt;p&gt;Hugo では、新しいコンテンツを追加する時、予め用意した雛形からコピー作成することができます。この雛形のことを &lt;strong&gt;archetype&lt;/strong&gt; と呼びます。&lt;/p&gt;

&lt;p&gt;archetype を使用すると毎回フロントマターに同じ項目を追加したり、同じ書き出し文を書いたりする煩わしさから解放されます。&lt;/p&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;p&gt;以下、フロントマターの categories と tags という項目と&amp;rdquo;こんにちは XXX です。&amp;rdquo;という本文を archetype で生成する方法を例示します。&lt;br /&gt;
まず、雛形ファイルを作成します。archetypes/default.md という名前で次の内容を保存してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
# YAML形式の場合
categories:
  - &amp;quot;a&amp;quot;
  - &amp;quot;b&amp;quot;
tags:
  - &amp;quot;x&amp;quot;
  - &amp;quot;y&amp;quot;
---
こんにちは XXX です。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に hugo コマンドでコンテンツを追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/test.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hugoコマンドの第２引数は content ファルダからの相対パスを指定します。この例ではファイル content/post/test.md が生成されます。&lt;br /&gt;
生成されたファイルを開くと次のような内容になっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
categories = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;]
date = &amp;quot;2016-06-01T15:25:17+09:00&amp;quot;
tags = [&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;]
title = &amp;quot;test&amp;quot;

+++
こんにちは XXX です。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで注意事項が４点あります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;生成されるコンテンツのフロントマターは archetype の形式に関係なく、デフォルトでは toml 形式になる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config.toml に metaDataFormat: &amp;ldquo;yaml&amp;rdquo; を追加すると yaml 形式に変更できます&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;項目 date と title が自動的に追加される&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;date はコンテンツを生成した日時、title はコンテンツのファイル名が自動設定されます&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;フロントマターの項目がアルファベット順に並べ替えられる&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;（YAML形式の場合）インデントが崩れる場合がある&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;あくまで雛形ですので、各項目は適宜修正してください。
因みに本エントリの archetype は以下のようになっています。ご参考まで。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
author: &amp;quot;&amp;quot;
layout: &amp;quot;post&amp;quot;
banner: &amp;quot;banners/placeholder.png&amp;quot;
archives:
  - &amp;quot;2016&amp;quot;
  - &amp;quot;2016/01&amp;quot;
  - &amp;quot;2016/01/01&amp;quot;
url: &amp;quot;/2016/01/01/xxx&amp;quot;
categories:
  - &amp;quot;&amp;quot;
tags:
  - &amp;quot;&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;archetypeの検索順&#34;&gt;archetypeの検索順&lt;/h2&gt;

&lt;p&gt;適用されるarchetypeは以下の順に検索されます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;archetypes/[コンテンツのtype].md&lt;/li&gt;
&lt;li&gt;archetypes/default.md&lt;/li&gt;
&lt;li&gt;themes/[テーマ名]/archetypes/[コンテンツのtype].md&lt;/li&gt;
&lt;li&gt;themes/[テーマ名]/archetypes/default.md&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;コンテンツのtypeは &lt;a href=&#34;http://staff.feedtailor.jp/2016/05/11/hugo_05/&#34;&gt;レイアウト編３&lt;/a&gt; でご説明したようにコンテンツが置かれたフォルダの１階層目に相当します。
従って、post/test.md を生成する場合は以下の順に検索して最初に見つかったものが適用されます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;archetypes/post.md&lt;/li&gt;
&lt;li&gt;archetypes/default.md&lt;/li&gt;
&lt;li&gt;themes/[テーマ名]/archetypes/post.md&lt;/li&gt;
&lt;li&gt;themes/[テーマ名]/archetypes/default.md&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;コンテンツの type は通常、フォルダの１階層目から決定されるのですが、hugo コマンドで直接 type を指定することもできます。&lt;br /&gt;
以下は test.md に type=post を指定する例です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new test.md -k post

または

$ hugo new test.md --kind=post
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;以上のようにコンテンツの内容や種別毎に archetype を生成しておくととても便利です。&lt;br /&gt;
毎回古いコンテンツからコピー作成している方や同じフロントマター項目を都度追加している方は archetype の導入を検討してみてはいかがでしょうか。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2016 on feedtailor Inc. スタッフブログ</title>
    <link>http://staff.feedtailor.jp/archives/2016/</link>
    <description>Recent content in 2016 on feedtailor Inc. スタッフブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 18 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://staff.feedtailor.jp/archives/2016/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（コンテンツ編１）</title>
      <link>http://staff.feedtailor.jp/2016/05/18/hugo_06</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/05/18/hugo_06</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; のコンテンツのフロントマター(Front Matter)ついて。&lt;/p&gt;

&lt;p&gt;Hugo では、コンテンツ（Markdownファイル）のタイトル、日付、カテゴリや任意のパラメータ等のメタデータを追加することができます。&lt;/p&gt;

&lt;p&gt;メタデータはコンテンツファイルの先頭で指定しますが、この部分をフロントマターと呼びます。&lt;br /&gt;
フロントマターは以下の３つの形式に対応しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/minoritea/items/c0de47b8beb813c655d4&#34;&gt;TOML形式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-05-18&amp;quot;
title = &amp;quot;フロントマターTOML形式&amp;quot;
categories = [
  &amp;quot;Hugo&amp;quot;, &amp;quot;静的サイトジェネレータ&amp;quot;
] 
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/YAML&#34;&gt;YAML形式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;---
date: &amp;quot;2016-05-18&amp;quot;
title: &amp;quot;フロントマターYAML形式&amp;quot;
categories:
  - &amp;quot;Hugo&amp;quot;
  - &amp;quot;静的サイトジェネレータ&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/JavaScript_Object_Notation&#34;&gt;JSON形式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;date&amp;quot;: &amp;quot;2016-05-18&amp;quot;,
    &amp;quot;title&amp;quot;: &amp;quot;フロントマターJSON形式&amp;quot;,
    &amp;quot;categories&amp;quot;: [
        &amp;quot;Hugo&amp;quot;,
        &amp;quot;静的サイトジェネレータ&amp;quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;必須パラメータ:8ede24df0bb5942341e9f66136792af4&#34;&gt;必須パラメータ&lt;/h3&gt;

&lt;table&gt;
&lt;tr&gt;&lt;td&gt;title&lt;/td&gt;&lt;td&gt;コンテンツのタイトル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;date&lt;/td&gt;&lt;td&gt;コンテンツの日付（ソートに使用されます）&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;オプションパラメータ:8ede24df0bb5942341e9f66136792af4&#34;&gt;オプションパラメータ&lt;/h3&gt;

&lt;table&gt;
&lt;tr&gt;&lt;td&gt;description&lt;/td&gt;&lt;td&gt;コンテンツの説明文&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;draft&lt;/td&gt;&lt;td&gt;下書きフラグ&lt;br&gt;true に設定するとビルド時に --buildDrafts オプションを&lt;br&gt;つけなければページが生成されません。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;publishdate&lt;/td&gt;&lt;td&gt;発行日&lt;br&gt;true に設定するとビルド時に --buildFuture オプションを&lt;br&gt;つけなければページが生成されません。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;コンテンツのタイプ&lt;br&gt;詳しくは&lt;a href=&#34;http://staff.feedtailor.jp/2016/05/11/hugo_05/&#34;&gt;前回のエントリ&lt;/a&gt;を参照ください。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;isCKJLanguage&lt;/td&gt;&lt;td&gt;日本語韓国語中国語を含む場合は true を設定してください。&lt;br&gt;サマリーや文字数カウントに影響します。&lt;br&gt;config.toml の hasCJKLanguage を true にすると&lt;br&gt;自動判定されますので省略可能です。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;weight&lt;/td&gt;&lt;td&gt;エントリの並び順を変更する時に使用します。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;slug&lt;/td&gt;&lt;td&gt;URLの末尾、ファイル名部分を変更します。&lt;br&gt;詳しくは&lt;a href=&#34;http://staff.feedtailor.jp/2016/05/11/hugo_05/&#34;&gt;前回のエントリ&lt;/a&gt;を参照ください。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;url&lt;/td&gt;&lt;td&gt;URLを変更します。&lt;br&gt;詳しくは&lt;a href=&#34;http://staff.feedtailor.jp/2016/05/11/hugo_05/&#34;&gt;前回のエントリ&lt;/a&gt;を参照ください。&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;カテゴリ-タグについて:8ede24df0bb5942341e9f66136792af4&#34;&gt;カテゴリ・タグについて&lt;/h3&gt;

&lt;p&gt;Hugo ではコンテンツをグルーピングするカテゴリやタグ等の分類のことを taxonomies と呼びます。&lt;/p&gt;

&lt;p&gt;コンテンツで指定した taxonomies は、画面に表示したり、グルーピングしたコンテンツのリストページの生成に使用できます。&lt;/p&gt;

&lt;p&gt;以下はコンテンツにカテゴリ &amp;ldquo;開発&amp;rdquo; とタグ &amp;ldquo;Hugo&amp;rdquo; &amp;ldquo;静的サイトジェネレータ&amp;rdquo; を追加する例です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
date: &amp;quot;2016-05-18&amp;quot;
title: &amp;quot;フロントマターYAML形式&amp;quot;
categories:
  - &amp;quot;ウェブサイト&amp;quot;
tags
  - &amp;quot;Hugo&amp;quot;
  - &amp;quot;静的サイトジェネレータ&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;taxonomies にはデフォルト値として &lt;strong&gt;categories&lt;/strong&gt; と &lt;strong&gt;tags&lt;/strong&gt; が設定されていますが、自由に追加、変更することができます。&lt;br /&gt;
categories, tags 以外の taxonomies を追加する場合は config.toml に定義を追加してください。この時、追加するものだけを記述すると tags, categories が使用できなくなりますので、残したい場合は以下のように全て記述してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[taxonomies]
  tag = &amp;quot;tags&amp;quot;
  category = &amp;quot;categories&amp;quot;
  series = &amp;quot;series&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のように記述すると、コンテンツのフロントマターで ”series&amp;rdquo; が使用できるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
date: &amp;quot;2016-05-18&amp;quot;
title: &amp;quot;フロントマターYAML形式&amp;quot;
categories:
  - &amp;quot;ウェブサイト&amp;quot;
tags:
  - &amp;quot;Hugo&amp;quot;
  - &amp;quot;静的サイトジェネレータ&amp;quot;
series:
  - &amp;quot;Hugoを使ったサイト構築&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ユーザ定義パラメータ:8ede24df0bb5942341e9f66136792af4&#34;&gt;ユーザ定義パラメータ&lt;/h3&gt;

&lt;p&gt;Hugo では、コンテンツに対して上で紹介した以外の任意のパラメータを追加することができます。&lt;br /&gt;
以下は camelCase というパラメータを追加した例です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
date: &amp;quot;2016-05-18&amp;quot;
title: &amp;quot;フロントマターYAML形式&amp;quot;
camelCase: true
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;予め定義されていないパラメータは全て params という変数に格納されます。また、パラメータ名は全て小文字に変換されます。&lt;br /&gt;
従って、上の camelCase パラメータをレイアウトで使用する場合は、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Params.camelcase }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように記述してください。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（レイアウト編３）</title>
      <link>http://staff.feedtailor.jp/2016/05/11/hugo_05</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/05/11/hugo_05</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; のレイアウトの決定方法とパーマリンクについて。&lt;/p&gt;

&lt;p&gt;Hugo では、コンテンツ（Markdownファイル）のフォルダ階層や記述するフロントマターによって使用するレイアウトやパーマリンク（生成されるパス）を変更することができます。&lt;/p&gt;

&lt;p&gt;標準構成では次のように content フォルダそのままの階層で HTML が生成されます。&lt;br /&gt;
※configファイルで uglyURLs というパラメータを true に変更すると [baseURL]/post/firstpost.html という構成にもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
└── content
    ├── post
    |   ├── firstpost.md   // &amp;lt;- [baseURL]/post/firstpost/
    |   ├── happy
    |   |   └── ness.md    // &amp;lt;- [baseURL]/post/happy/ness/
    |   └── secondpost.md  // &amp;lt;- [baseURL]/post/secondpost/
    └── quote
        ├── first.md       // &amp;lt;- [baseURL]/quote/first/
        └── second.md      // &amp;lt;- [baseURL]/quote/second/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下はURLやレイアウトを決定するために使用するパラメータ、変数です。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;パラメータ&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;th&gt;フロント&lt;br&gt;マター&lt;/th&gt;&lt;th&gt;変数&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;slug&lt;/th&gt;&lt;td&gt;URLのファイル名部分を変更するパラメータ。&lt;/td&gt;&lt;td&gt;◯&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;URLを変更するパラメータ。&lt;br&gt;baseURL からのパス全体を指定する。&lt;/td&gt;&lt;td&gt;◯&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;section&lt;/th&gt;&lt;td&gt;コンテンツが置かれたフォルダの１階層目。&lt;br&gt;リストページ生成やレイアウト決定に使用される。&lt;br&gt;content 直下の場合は空。&lt;/td&gt;&lt;td&gt;×&lt;/td&gt;&lt;td&gt;.Section&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;type&lt;/th&gt;&lt;td&gt;section と同じ値だが、フロントマターで&lt;br&gt;上書き可能。&lt;br&gt;content 直下の場合は &#34;page&#34; が設定される。&lt;/td&gt;&lt;td&gt;◯&lt;/td&gt;&lt;td&gt;.Type&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;例えば、コンテンツ content/a/b/c.md の場合、各値は以下のようになります。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;permalink&lt;/th&gt;&lt;td&gt; [baseURL]/a/b/c/index.html &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;section  &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;type     &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;このコンテンツのフロントマターに slug:&amp;ldquo;d&amp;rdquo; を追加すると生成されるファイルの位置が変わります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
// YAML形式のフロントマター
date: 2016-05-11
title: &amp;quot;サンプル&amp;quot;
slug: &amp;quot;d&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;slug     &lt;/th&gt;&lt;td&gt;&lt;strong&gt; d &lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;permalink&lt;/th&gt;&lt;td&gt;&lt;strong&gt;[baseURL]/a/b/d/index.html &lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;section  &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;type     &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;更にフロントマターで url: &amp;ldquo;x/y/z&amp;rdquo; を追加すると生成されるファイルの位置が変わります。slug と url を両方指定した場合は url が優先されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
date: 2016-05-11
title: &amp;quot;サンプル&amp;quot;
slug: &amp;quot;d&amp;quot;
url: &amp;quot;x/y/z&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;slug     &lt;/th&gt;&lt;td&gt; d &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;url      &lt;/th&gt;&lt;td&gt;&lt;strong&gt; x/y/z &lt;strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;permalink&lt;/th&gt;&lt;td&gt;&lt;strong&gt; [baseURL]/x/y/z/index.html &lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;section  &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;type     &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;このコンテンツのフロントマターで type:&amp;ldquo;e&amp;rdquo; を指定してもファイルの位置は変わりませんが、後述する通りレイアウトの検索順が変わります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
date: 2016-05-11
title: &amp;quot;サンプル&amp;quot;
slug: &amp;quot;d&amp;quot;
url: &amp;quot;x/y/z&amp;quot;
type: &amp;quot;e&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;slug     &lt;/th&gt;&lt;td&gt; d &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;url      &lt;/th&gt;&lt;td&gt; x/y/z &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;permalink&lt;/th&gt;&lt;td&gt;[baseURL]/x/y/z/index.html &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;section  &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;type     &lt;/th&gt;&lt;td&gt;&lt;strong&gt; e &lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;section-type-について:86eb3326f00585c43a278d04aa86698c&#34;&gt;Section / Type について&lt;/h3&gt;

&lt;p&gt;type と section は主にレイアウトの決定に使用され、Hugo では自動的に section 毎のリストページを生成します。&lt;/p&gt;

&lt;p&gt;例えば、本エントリ先頭にあげたフォルダ構成でいうと、content 直下のフォルダ post と quote が SECTION にあたり、それぞれ [baseURL]/post/index.html [baseURL]/quote/index.html というリストページが生成されます。&lt;/p&gt;

&lt;p&gt;この時、リストページに使用するレイアウトテンプレートは以下の順で検索されます。(&lt;strong&gt;SECTION&lt;/strong&gt;がセクション名です)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/section/&lt;strong&gt;SECTION&lt;/strong&gt;.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/section.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/list.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/section/&lt;strong&gt;SECTION&lt;/strong&gt;.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/_default/section.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/_default/list.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同様に各エントリの個別ページも type（指定されていなければ section）によって使用するレイアウトテンプレートが決定されます。
(&lt;strong&gt;LAYOUT&lt;/strong&gt; はフロントマターで指定する layout パラメータです)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/&lt;strong&gt;TYPE-or-SECTION&lt;/strong&gt;/&lt;strong&gt;LAYOUT&lt;/strong&gt;.html&lt;/li&gt;
&lt;li&gt;/layouts/&lt;strong&gt;TYPE-or-SECTION&lt;/strong&gt;/single.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/single.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/&lt;strong&gt;TYPE-or-SECTION&lt;/strong&gt;/&lt;strong&gt;LAYOUT&lt;/strong&gt;.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/&lt;strong&gt;TYPE-or-SECTION&lt;/strong&gt;/single.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/_default/single.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;冒頭で述べたように Hugo では、コンテンツのフォルダ構成やパラメータによって生成される位置やレイアウトが変更されます。&lt;br /&gt;
コンテンツは目的毎に分類しておくのが良いでしょう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（レイアウト編２）</title>
      <link>http://staff.feedtailor.jp/2016/04/27/hugo_04</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/04/27/hugo_04</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; のテンプレートの書き方について。&lt;/p&gt;

&lt;p&gt;Hugo では、テンプレートの記述に Go 言語の &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; ライブラリを使用しています。
その文法や変数の扱い方等を簡単にご説明したいと思います。&lt;/p&gt;

&lt;h3 id=&#34;基本文法:4afe71ad9c1b88ac3ae88837f5863813&#34;&gt;基本文法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;テンプレートで変数や関数を使用するときは、中括弧（波括弧）２つで括ります。括弧内で改行してはいけません。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; {{ }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;引数はスペースで区切ります&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{{ printf &amp;quot;%#v&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;関数や変数は . を使用してアクセスします&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;.Params.bar
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;コメントは /*  */ で括ります。コメント内は改行しても構いません。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{{/*
      コメント
               */}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;変数:4afe71ad9c1b88ac3ae88837f5863813&#34;&gt;変数&lt;/h3&gt;

&lt;p&gt;変数は、前述のように .名前 という形式で記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.Title
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/2016/04/20/hugo_03/&#34;&gt;前回&lt;/a&gt;ご紹介したように Hugo ではページの種類によって使用できる変数が異なります。詳しくは &lt;a href=&#34;http://gohugo.io/templates/variables/&#34;&gt;こちら&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;p&gt;変数は自分で定義して代入、参照することもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $address := &amp;quot;東京都千代田区&amp;quot;}}
{{ $address }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;関数:4afe71ad9c1b88ac3ae88837f5863813&#34;&gt;関数&lt;/h3&gt;

&lt;p&gt;関数は、Go 言語の text/template で定義されているものと Hugo の独自関数が使用できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang-jp.org/pkg/text/template/&#34;&gt;Go言語 text/template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/templates/functions/&#34;&gt;Hugo 独自の関数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;制御文:4afe71ad9c1b88ac3ae88837f5863813&#34;&gt;制御文&lt;/h3&gt;

&lt;p&gt;他の多くのテンプレートと同様に条件式やループが使用できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;title&amp;quot; }}{{ .Params.title }}{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;isset は .Params に &amp;ldquo;title&amp;rdquo; という名前の要素が含まれているかどうかを返します。上の式は with を使って書き換えることもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Params.title }}{{ . }}{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with を使用すると . に引数の値がセットされます。（ここでは .Params.title の値）&lt;/p&gt;

&lt;p&gt;ループは次のように書きます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range array }}
   現在の値は {{ . }} です。
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array には配列やマップ（連想配列）を指定します。range から end の間は . にループの次の値がセットされます。&lt;/p&gt;

&lt;h3 id=&#34;パイプ:4afe71ad9c1b88ac3ae88837f5863813&#34;&gt;パイプ&lt;/h3&gt;

&lt;p&gt;Go テンプレートではパイプライン文字 | を使って、値やコマンドの結果を次のコマンドへ渡すことができます。渡された値は最後の引数として扱われます。&lt;br /&gt;
例えば、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if eq 1 1 }} 同じ {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は、パイプを使って次のように書き換えることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ eq 1 1 | if }} 同じ {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;コンテキスト:4afe71ad9c1b88ac3ae88837f5863813&#34;&gt;コンテキスト&lt;/h3&gt;

&lt;p&gt;. （ドット）には現在参照できる値または変数群が格納されています。&lt;br /&gt;
例えばテンプレートの最上位では、そのページで使用できるデータ・変数が全て格納されていますが、range や with の中では現在の値のみが格納されています。&lt;br /&gt;
range や with の中でサイト全体の値を参照する場合は、 $. を使ってグローバルな値を取得することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range array }}
   現在の値は {{ . }} です。
   サイトの名称は {{ $.Site.Title }} です。
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;パラメータ:4afe71ad9c1b88ac3ae88837f5863813&#34;&gt;パラメータ&lt;/h3&gt;

&lt;p&gt;Hugo では、サイト全体またはページ単位で独自のパラメータを定義することができます。&lt;br /&gt;
定義したパラメータはテンプレートから自由に参照できます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ページパラメータ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hugo では各ページの &lt;em&gt;フロントマター&lt;/em&gt; でタイトルや日付等の属性を埋め込みます。（ &lt;a href=&#34;http://staff.feedtailor.jp/2016/04/05/hugo_01/&#34;&gt;導入編&lt;/a&gt; の &amp;ldquo;記事の追加&amp;rdquo; を参照）&lt;br /&gt;
パラメータも同じく、このフロントマターで指定します。例えば、notoc というパラメータを追加した場合、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-05T12:00:00+09:00&amp;quot;
draft = true
title = &amp;quot;hello&amp;quot;
notoc = true

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ページテンプレートでは以下のように .Params.notoc で参照できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if not .Params.notoc }}
    &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
    {{ .TableOfContents }}
    &amp;lt;/div&amp;gt;
{{ end }}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;サイトパラメータ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;サイト全体のパラメータは config.toml ファイルで指定します。&lt;br /&gt;
config.toml では params の属性として追加してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://staff.feedtailor.jp/&amp;quot;
title   = &amp;quot;feedtailor Inc. スタッフブログ&amp;quot;

...

[params]
    author = &amp;quot;feedtailor Inc.&amp;quot;
    location = &amp;quot;Osaka, Japan&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サイトパラメータは以下のように .Site.Params.名前 で参照できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Site.Params.author }}&amp;lt;meta name=&amp;quot;author&amp;quot; content=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回は Hugo レイアウトテンプレートの基本的な文法をご説明しました。&lt;br /&gt;
これらを組み合わせてテンプレートをどのように書くかを次回以降でご紹介していこうと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（レイアウト編１）</title>
      <link>http://staff.feedtailor.jp/2016/04/20/hugo_03</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/04/20/hugo_03</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; のレイアウトテンプレートについて書きたいと思います。&lt;/p&gt;

&lt;p&gt;Hugo では、テンプレートの記述に Go 言語の &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; ライブラリを使用しています。
一見複雑そうに見えますが、簡単な記法で多くのことを実現できます。&lt;/p&gt;

&lt;h3 id=&#34;テンプレートの種類:4c2585f1ab85585af71601f47af31217&#34;&gt;テンプレートの種類&lt;/h3&gt;

&lt;p&gt;Hugo では、以下の３種類のテンプレートでサイトを構築します。&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Single&lt;/dt&gt;
&lt;dd&gt;単一のコンテンツを表示するページ&lt;/dd&gt;
&lt;dt&gt;List&lt;/dt&gt;
&lt;dd&gt;複数のコンテンツのリストを表示するページ&lt;/dd&gt;
&lt;dt&gt;Homepage&lt;/dt&gt;
&lt;dd&gt;ホームページ（トップページ）&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;多くのサイトでは、トップページからあるコンテンツのリストを表示し、そこから目的のコンテンツページを表示する構成になっていると思います。&lt;br /&gt;
上の３つを組み合わせることで複雑なサイトを構築できるようになります。&lt;/p&gt;

&lt;p&gt;Hugo では、その他に補助的なテンプレートが用意されています。何れも上のテンプレートに組み込んで（include）使用します。&lt;br /&gt;
種類によって、テンプレート内で使用出来る変数が異なります。&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Partial Templates&lt;/dt&gt;
&lt;dd&gt;ページ内の共通パーツ&lt;/dd&gt;
&lt;dt&gt;Content Views&lt;/dt&gt;
&lt;dd&gt;コンテンツを表示するパーツ&lt;/dd&gt;
&lt;dt&gt;Taxonomy Terms&lt;/dt&gt;
&lt;dd&gt;Taxonomy（カテゴリやタグなどの分類）のリストを表示するパーツ&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;トップページ:4c2585f1ab85585af71601f47af31217&#34;&gt;トップページ&lt;/h3&gt;

&lt;p&gt;まずサイトのトップページを作りましょう。&lt;a href=&#34;http://staff.feedtailor.jp/2016/04/13/hugo_02/&#34;&gt;前回&lt;/a&gt; で config.toml に書いた baseurl で表示するページです。&lt;br /&gt;
ファイルは layouts フォルダ直下に index.html という名前で作成します。content フォルダ内ではありませんので注意してください。&lt;br /&gt;
以下は本ブログのトップページのソースコードです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;{{ with .Site.LanguageCode }}{{ . }}{{ else }}en-US{{ end }}&amp;quot;&amp;gt;

{{ partial &amp;quot;head&amp;quot; . }}

&amp;lt;body&amp;gt;
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;

&amp;lt;div id=&amp;quot;container&amp;quot;&amp;gt;
    {{ partial &amp;quot;header&amp;quot; . }}
    &amp;lt;div class=&amp;quot;outer&amp;quot;&amp;gt;
        {{ partial &amp;quot;article_list&amp;quot; . }}
        {{ partial &amp;quot;sidebar&amp;quot; . }}
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

{{ partial &amp;quot;footer&amp;quot; . }}

&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;多くの場合、ページのヘッダやフッタ等、複数のページで共通化できる部分があると思います。本ブログでは、headタグ、ページのヘッダ、ページ中央の記事のリスト、サイドバー、フッタを Partial テンプレートとして共通化しています。&lt;/p&gt;

&lt;p&gt;Partial テンプレートは layouts フォルダ内に partials フォルダを作成してそこに置きます。使用するときは、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;ファイル名(拡張子なし)&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書きます。例えば、上の {{ partial &amp;ldquo;head&amp;rdquo; . }} は layouts/partials/head.html を読み込んでいます。&lt;/p&gt;

&lt;p&gt;partial を使用する時、ファイル名の後ろの . （半角ドット）を忘れないようにしてください。&lt;br /&gt;
Go テンプレートでは . は、現在スコープのコンテキストを表しています。もう少し砕いていうと、その場で使える変数を入れている箱です。
上の Partial の例では、指定したファイルのテンプレートに . を渡している、つまりその場で使える全ての変数が Partial テンプレートでも使えますよ、ということです。
.Data のようにある変数だけを渡すこともできますが、良く分からなければ毎回 . を渡しても良いでしょう。&lt;/p&gt;

&lt;p&gt;その他のテンプレートや Partial の中身については順次ご説明します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、SSGの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽にご相談ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（フォルダ構成編）</title>
      <link>http://staff.feedtailor.jp/2016/04/13/hugo_02</link>
      <pubDate>Wed, 13 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/04/13/hugo_02</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/2016/04/05/hugo_01&#34;&gt;前回&lt;/a&gt;に引き続き、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; について書きたいと思います。今回はフォルダ構成について。&lt;/p&gt;

&lt;h3 id=&#34;フォルダ構成:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;フォルダ構成&lt;/h3&gt;

&lt;p&gt;Hugo では、記事や画像、レイアウトを種類毎にそれぞれ決まったフォルダに配置する必要があります。&lt;br /&gt;
新規サイトを作成する &lt;strong&gt;hugo new site&lt;/strong&gt; コマンドを利用すると、デフォルト設定に準じた以下のファイル・フォルダが生成されます。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/overview/configuration/&#34; target=&#34;_blank&#34;&gt;config.toml&lt;/a&gt;&lt;/th&gt;&lt;td&gt;サイト全体の設定ファイル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/content/archetypes/&#34; target=&#34;_blank&#34;&gt;archetypes&lt;/a&gt;&lt;/th&gt;&lt;td&gt;記事の雛形を置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/content/organization/&#34; target=&#34;_blank&#34;&gt;content&lt;/a&gt;&lt;/th&gt;&lt;td&gt;記事を置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/extras/datafiles/&#34; target=&#34;_blank&#34;&gt;data&lt;/a&gt;&lt;/th&gt;&lt;td&gt;データファイルを置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/layout/overview/&#34; target=&#34;_blank&#34;&gt;layouts&lt;/a&gt;&lt;/th&gt;&lt;td&gt;レイアウトを置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/themes/creation#toc_4&#34; target=&#34;_blank&#34;&gt;static&lt;/a&gt;&lt;/th&gt;&lt;td&gt;画像等の静的素材を置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;その他に、テーマを置く &lt;strong&gt;&lt;a href=&#34;http://gohugo.io/themes/overview/&#34;&gt;themes&lt;/a&gt;&lt;/strong&gt; フォルダ、ファイルが出力される &lt;strong&gt;public&lt;/strong&gt; フォルダの位置がデフォルトで設定されています。&lt;/p&gt;

&lt;h3 id=&#34;config-tomlファイル:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;config.tomlファイル&lt;/h3&gt;

&lt;p&gt;URLやタイトル、フォルダ構成等、サイト全体の設定を記載するファイルです。&lt;br /&gt;
デフォルトでは拡張子の通り、&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML形式&lt;/a&gt; で書きます。config.toml が存在しない場合は config.yaml、config.json の順に使用されます。&lt;/p&gt;

&lt;p&gt;生成直後は次のような内容ですので、ご利用の環境に合わせて変更してください。&lt;br /&gt;
定義されている項目は&lt;a href=&#34;http://gohugo.io/overview/configuration/&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前述のフォルダ構成を変更したり任意の項目を追加することもできます。&lt;/p&gt;

&lt;p&gt;設定値は以下のコマンドで確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo config
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;publicフォルダ:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;publicフォルダ&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;hugo&lt;/strong&gt; コマンドで生成されるファイル群は public フォルダに出力されます。&lt;br /&gt;
このフォルダをウェブサーバに設置してサイトを公開します。&lt;/p&gt;

&lt;h3 id=&#34;archetypesフォルダ:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;archetypesフォルダ&lt;/h3&gt;

&lt;p&gt;記事の雛形を置くフォルダです。&lt;br /&gt;
雛形ファイルは &lt;strong&gt;hugo new&lt;/strong&gt; コマンドで記事ファイルを生成する時に使用されます。雛形が見つからない場合は、日付、タイトル、下書きフラグのみの記事が生成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-13T14:31:25+09:00&amp;quot;
draft = true
title = &amp;quot;test&amp;quot;

+++


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;contentフォルダ:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;contentフォルダ&lt;/h3&gt;

&lt;p&gt;記事を置くフォルダです。&lt;br /&gt;
このフォルダにあるファイルはHugoの変換処理を通ります。例えば、.md（Markdown形式）ファイルの内容は、HTMLに変換され、所定のレイアウトに埋め込まれてHTMLファイルとして出力されます。&lt;br /&gt;
変換処理が不要なファイルは後述する &lt;strong&gt;static&lt;/strong&gt; フォルダに置いてください。&lt;/p&gt;

&lt;h3 id=&#34;dataフォルダ:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;dataフォルダ&lt;/h3&gt;

&lt;p&gt;データファイルを置くフォルダです。&lt;br /&gt;
データファイルは、任意の名前・値を定義することができるので、簡易なKey-Valueデータストアとして使用できます。&lt;br /&gt;
例えば、トピックスや会社の年表、製品情報等をデータファイルとして保存しておくと、レイアウトファイルを変更することなくデータのみを更新することができます。&lt;br /&gt;
因みに &lt;a href=&#34;http://www.feedtailor.jp/&#34; target=&#34;_blank&#34;&gt;弊社サイト&lt;/a&gt; の &amp;ldquo;WHAT&amp;rsquo;S NEW&amp;rdquo; の内容は、レイアウトに直接書くのではなく、以下のようにTOML形式のデータファイルに記載しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[news_row]]
  date        = &amp;quot;2016.03.14&amp;quot;
  title       = &#39;&amp;lt;a href=&amp;quot;http://staff.feedtailor.jp/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;スタッフブログ&amp;lt;/a&amp;gt;のデザインを変更しました(静的Webサイト化)&#39;

[[news_row]]
  date        = &amp;quot;2015.01.27&amp;quot;
  title       = &amp;quot;B2B向けサービス「SYNCNEL」を事業売却しました&amp;quot;
  url         = &amp;quot;http://feedtailor.jp/wp/?p=15686&amp;quot;

[[news_row]]
  date        = &amp;quot;2015.10.16&amp;quot;
  title       = &amp;quot;天気予報アプリ「そら案内」および関連全事業を無償譲渡しました&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;layoutフォルダ:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;layoutフォルダ&lt;/h3&gt;

&lt;p&gt;HTMLのレイアウトを置くフォルダです。&lt;br /&gt;
このフォルダにあるレイアウトに &lt;strong&gt;content&lt;/strong&gt; フォルダ内の記事や &lt;strong&gt;data&lt;/strong&gt; フォルダのデータを埋め込んでHTMLを生成します。&lt;br /&gt;
レイアウト内の制御文やループはGo言語の &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/templateライブラリ&lt;/a&gt; を使って記述します。&lt;/p&gt;

&lt;h3 id=&#34;staticフォルダ:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;staticフォルダ&lt;/h3&gt;

&lt;p&gt;JSやCSS、画像等の静的素材を置くフォルダです。&lt;br /&gt;
Hugoの変換処理が不要なファイルはこのフォルダに設置してください。&lt;strong&gt;public&lt;/strong&gt; フォルダにそのままコピーされます。&lt;/p&gt;

&lt;h3 id=&#34;themeフォルダ:b6ad6915c304ed346981b48c19a03aa1&#34;&gt;themeフォルダ&lt;/h3&gt;

&lt;p&gt;テーマを置くフォルダです。&lt;br /&gt;
Hugo では複数のテーマを保存しておいて、簡単に切り替えることができます。&lt;br /&gt;
&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;公開されているテーマ&lt;/a&gt; も沢山ありますので利用してみるのもよいでしょう。&lt;/p&gt;

&lt;p&gt;今回は以上です。&lt;br /&gt;
各フォルダの詳細についても順次書いていこうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（導入編）</title>
      <link>http://staff.feedtailor.jp/2016/04/05/hugo_01</link>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/04/05/hugo_01</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;これから何回かに分けて本サイト構築時に使用した静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; についてご紹介したいと思います。&lt;/p&gt;

&lt;h3 id=&#34;hugoとは:54279ffd0468d4c436fbfa877d58da8e&#34;&gt;Hugoとは？&lt;/h3&gt;

&lt;p&gt;Go言語で書かれた&lt;a href=&#34;http://staticgen.com&#34;&gt;静的サイトジェネレータ&lt;/a&gt;です。&lt;br /&gt;
代表的な静的サイトジェネレータとして、GitHub社が開発している&lt;a href=&#34;https://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;や&lt;a href=&#34;https://middlemanapp.com/jp/&#34;&gt;Middleman&lt;/a&gt;、
国産ではChatwork社が開発している&lt;a href=&#34;https://github.com/chatwork/Phest&#34;&gt;Phest&lt;/a&gt;等がありますが、Hugoを選んだ大きな理由は以下の３つです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;インストールが楽&lt;/li&gt;
&lt;li&gt;クロスプラットフォーム対応&lt;/li&gt;
&lt;li&gt;ページ生成が速い&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Win/Mac/Linux環境に対応していて、どの環境も実行ファイル１つです。簡易HTTPサーバも内蔵しているのでRubyやPHPのインストールはもちろんApacheさえも不要です。&lt;br /&gt;
ページ生成も高速で本ブログの規模であれば0.3秒くらいで生成されます。&lt;/p&gt;

&lt;h3 id=&#34;インストール:54279ffd0468d4c436fbfa877d58da8e&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;各プラットフォーム用の実行ファイルが提供されているので&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;リリース情報のページ&lt;/a&gt;からダウンロードしてください。
Windows 64bit版はhugo_0.15_windows_amd64.zip、MacOSX版はhugo_0.15_darwin_amd64.zipです。zipファイルから展開した実行ファイルは hugo（Winは hugo.exe）という名前に変更しておきましょう。&lt;br /&gt;
Mac版であれば&lt;a href=&#34;http://brew.sh/index_ja.html&#34;&gt;Homebrew&lt;/a&gt;からもインストールできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
$ brew update
$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;サイト作成:54279ffd0468d4c436fbfa877d58da8e&#34;&gt;サイト作成&lt;/h3&gt;

&lt;p&gt;新規サイトを作成するには以下のコマンドを実行します。hugo(.exe)を環境変数PATHに登録していない場合はダウンロードしたhugo(.exe)があるフォルダで実行しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site サイト名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで空のサイトが出来上がります。生成されたのはサイトの情報を入力する config.toml ファイルと空のフォルダ５つ（&lt;strong&gt;archetypes&lt;/strong&gt;, &lt;strong&gt;content&lt;/strong&gt;, &lt;strong&gt;data&lt;/strong&gt;, &lt;strong&gt;layouts&lt;/strong&gt;, &lt;strong&gt;static&lt;/strong&gt;）だけで中身はありません。
以降、hugo コマンドは config.toml ファイルのあるフォルダで実行しますので、hugo(.exe)を同じ場所に移動しておくとよいでしょう。&lt;/p&gt;

&lt;p&gt;生成された config.toml ファイルは以下のようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;baseurlがこのサイトを公開するURL、languageCodeはRSS出力に付与する文字コード、titleはサイトのタイトルです。環境に合わせて変更してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://example.com/&amp;quot;
languageCode = &amp;quot;ja&amp;quot;
title = &amp;quot;Hugo入門&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;テーマのインストール:54279ffd0468d4c436fbfa877d58da8e&#34;&gt;テーマのインストール&lt;/h3&gt;

&lt;p&gt;レイアウトを１から作るのは時間がかかるので、一般公開されているテーマを利用してみましょう。&lt;br /&gt;
Hugo公式サイトの&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;テーマ一覧のページ&lt;/a&gt;から好きなデザインを選択します。ここでは公式サイトの&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;クイックスタート&lt;/a&gt;と同じく &lt;a href=&#34;http://themes.gohugo.io/hugo-uno/&#34;&gt;hugo-uno&lt;/a&gt; テーマを使ってみます。
まずはサイトのトップフォルダ（config.tomlがあるフォルダ）に themes というフォルダを作って、そこにhugo-unoテーマを設置します。gitコマンドが使える方は以下で。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir themes
$ cd themes
$ git clone https://github.com/SenjinDarashiva/hugo-uno.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git コマンドが使えない方は &lt;a href=&#34;https://github.com/SenjinDarashiva/hugo-uno/archive/master.zip&#34;&gt;ここ&lt;/a&gt; からzipファイルをダウンロードして展開してください。フォルダ名は hugo-uno に変更してください。&lt;/p&gt;

&lt;h3 id=&#34;記事の追加:54279ffd0468d4c436fbfa877d58da8e&#34;&gt;記事の追加&lt;/h3&gt;

&lt;p&gt;記事は content フォルダに置きます。以下のコマンドでからの記事ファイルを作ることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new ファイル名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは post/hello.md という名前で作ってみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/hello.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コマンドを実行すると content フォルダ内に post フォルダが作成され、その中に hello.md ファイルが作られます。&lt;br /&gt;
標準設定ではファイルの場所・名前がそのままURLのパス部分になるので、この記事は http://サーバ名/post/hello/ というURLで公開されることになります。&lt;/p&gt;

&lt;p&gt;テキストエディタで hello.md を編集しましょう。生成された直後の hello.md ファイルの中身は以下のようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-05T12:00:00+09:00&amp;quot;
draft = true
title = &amp;quot;hello&amp;quot;

+++

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先頭の半角 + 3文字から次の + 3文字の行までを &lt;strong&gt;フロントマター&lt;/strong&gt; と呼び、記事のタイトルや日付、カテゴリ等ページの属性を指定します。&lt;br /&gt;
title がページのタイトルです。draft は下書きかどうかの状態で true が指定されているとプレビューやページ生成がされませんので false に指定するか削除しましょう。本文はフロントマター以降（この場合は７行目以降）に &lt;a href=&#34;https://ja.wikipedia.org/wiki/Markdown&#34;&gt;Markdown記法&lt;/a&gt; で記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-05T12:00:00+09:00&amp;quot;
title = &amp;quot;Hugoを始めました&amp;quot;

+++

こんにちは、**Hugo** を始めました。

### Markdown記法

Markdownの書き方は以下のサイトが参考になります。

- [Wikipedia](https://ja.wikipedia.org/wiki/Markdown)
- [Qiita](http://qiita.com/Qiita/items/c686397e4a0f4f11683d)
- [日本語Markdownユーザー会](http://www.markdown.jp/what-is-markdown/#markdown-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;プレビュー:54279ffd0468d4c436fbfa877d58da8e&#34;&gt;プレビュー&lt;/h3&gt;

&lt;p&gt;hugo は簡易HTTPサーバを内蔵していていつでもプレビューできます。プレビュー中は自動的にリロードがかかるため何もしなくても表示が逐次更新されます。
プレビュー機能を実行するには &lt;strong&gt;hugo server&lt;/strong&gt; コマンドを使用します。-t の後ろはテーマのフォルダ名を指定してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -t hugo-uno -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで &lt;a href=&#34;http://127.0.0.1:1313/&#34;&gt;http://127.0.0.1:1313/&lt;/a&gt; にアクセスすると作成したサイトが表示されます。終了するときは Ctrl+C を押してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2016/04/hugo_01_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;ページ生成:54279ffd0468d4c436fbfa877d58da8e&#34;&gt;ページ生成&lt;/h3&gt;

&lt;p&gt;プレビューで問題がないことを確認できたらページ生成です。以下のコマンドを実行してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo -t hugo-uno
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ウェブサイトとして公開するファイル一式が &lt;strong&gt;public&lt;/strong&gt; フォルダに出力されますので、このままウェブサーバに設置してください。&lt;/p&gt;

&lt;p&gt;今回はインストールからページ生成、ウェブサーバの公開までの流れを急ぎでご紹介しましたが、次回以降は各項目についてもう少し掘り下げていこうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第2回静的Webサイト勉強会を開催しました</title>
      <link>http://staff.feedtailor.jp/2016/03/30/swebmtg2</link>
      <pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/03/30/swebmtg2</guid>
      <description>&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今週 2016/03/28(月) に東京高円寺にある &lt;a href=&#34;http://www.val.co.jp&#34;&gt;ヴァル研究所様&lt;/a&gt; で &lt;a href=&#34;http://connpass.com/event/26420/&#34;&gt;第2回 静的Webサイト 勉強会&lt;/a&gt; を開催しました。&lt;/p&gt;

&lt;p&gt;勉強会は約60名様、その後の懇親会も半数の方が参加くださって大盛況でした。ありがとうございました。&lt;/p&gt;

&lt;p&gt;今回はゲストスピーカーとして &lt;a href=&#34;https://www.alleyoop.co.jp&#34;&gt;株式会社アリウープ&lt;/a&gt; の河野様 に講演いただきました。&lt;br /&gt;
名だたる大手企業のサイトを多数手掛けていらっしゃるので説得力が違います。静的サイトと動的要素の組み合わせ例とか今後の予測とか本当に勉強になりました。
弊社では現状フリーの静的サイトジェネレータしか実績がありませんので、機会があれば商用静的CMSについても調査、比較検討してみたいと思います。&lt;/p&gt;

&lt;p&gt;ライトニングトークの１つ目は &lt;a href=&#34;http://m2mtech.jp/&#34;&gt;M2Mテクノロジーズ株式会社&lt;/a&gt; 内山様からウェブサイトの改竄検知について。
シンプルな方法ですが、HTMLや画像をファイルレベルで差分を取るって有効だと感じました。&lt;/p&gt;

&lt;p&gt;２つ目は &lt;a href=&#34;http://classmethod.jp/&#34;&gt;クラスメソッド株式会社&lt;/a&gt; 鈴木様 からCloudFrontの利用について。
静的サイトはCDNと相性がいいので積極的に利用するのも良いかも。安めのサーバと組み合わせるとトータルコストが下がる可能性もありそうです。&lt;/p&gt;

&lt;p&gt;さて、私は大阪で行った &lt;a href=&#34;http://connpass.com/event/25507/&#34;&gt;第1回&lt;/a&gt; と同じく「静的サイトジェネレータHugoを使ったサイト運用」という題目で話してきました。&lt;br /&gt;
&lt;a href=&#34;http://staff.feedtailor.jp/2016/03/25/migration&#34;&gt;前回のエントリ&lt;/a&gt; でも書きましたが、既に６つほど静的サイトを構築していますので、その際に感じたことをざっくりでも共有できたらと思いまして。
話した内容は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;構築したサイトのご紹介

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.syncnel.biz/&#34;&gt;SYNCNELオフィシャルサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;弊社コーポレートサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.feedtailor.jp&#34;&gt;弊社社長ブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hitokoto.feedtailor.jp&#34;&gt;弊社スタッフのひとことブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;当ブログ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hugoでブログエントリの追加の実演&lt;/li&gt;
&lt;li&gt;構築／運用上の課題、メリット&lt;/li&gt;
&lt;li&gt;自作GUIのチラ見せ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;br /&gt;
個人的に非技術者の方が &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; を利用する上で１番の障害になっているのが黒い画面（コマンドライン）だと感じておりまして、私のプレゼンではそれをフォローするために作成したGUIをご紹介しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2016/03/swebmtg2_gui.png&#34; alt=&#34;GUI&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上段左から順に操作するとエントリの追加、バージョン管理からサーバへの反映まで出来るようになっています。各ボタンの機能を簡単にご紹介します。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;フォルダを開く&lt;/th&gt;&lt;td&gt;プロジェクトのフォルダを開く&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;更新&lt;/th&gt;&lt;td&gt;git pull コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;コンテンツを追加&lt;/th&gt;&lt;td&gt;hugo new コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;画像を追加&lt;/th&gt;&lt;td&gt;指定した画像のサムネイルを作成&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;プレビュー&lt;/th&gt;&lt;td&gt;hugo server コマンドの実行、ブラウザの起動&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;ビルド&lt;/th&gt;&lt;td&gt;hugo コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;登録&lt;/th&gt;&lt;td&gt;git add / commit / push コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;アップロード&lt;/th&gt;&lt;td&gt;サーバへのファイル転送&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;JavaFXで作成したUIから、直接コマンドを実行したりシェルスクリプトを呼び出しているだけの簡単なものですが、黒い画面を排除するには十分で、
先に紹介した弊社の&lt;a href=&#34;http://hitokoto.feedtailor.jp/&#34;&gt;ひとことブログ&lt;/a&gt;はこれを使用して更新しています。&lt;/p&gt;

&lt;p&gt;懇親会でもいろんな方と話しましたが、まだまだ静的サイトの有用性や&lt;a href=&#34;http://staticgen.com&#34;&gt;静的サイトジェネレータ&lt;/a&gt;の存在が広まってないな、と感じました。
ご紹介したGUIのようなものや日本語の情報が増えて一般の方にも利用してもらいやすい環境ができれば良いなと思います。&lt;/p&gt;

&lt;p&gt;サイトの静的化に興味がある方や既に運用しているがコマンドラインの操作が煩わしい、というような方は是非ご相談ください。&lt;/p&gt;

&lt;p&gt;2016/3/31 一部加筆・修正しました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>スタッフブログを静的サイトに移行しました</title>
      <link>http://staff.feedtailor.jp/2016/03/25/migration</link>
      <pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/03/25/migration</guid>
      <description>&lt;p&gt;久しぶりの投稿になります、 tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/2014/04/18/45/&#34;&gt;2014年4月の開設&lt;/a&gt; からずっと &lt;a href=&#34;https://ja.wordpress.org/&#34;&gt;WordPress&lt;/a&gt; で運用していた本スタッフブログを静的サイトに移行しました。&lt;/p&gt;

&lt;p&gt;昨年末から弊社が管理しているウェブサイトを徐々に静的サイトに移行していて、これで既に６サイト目。今回も静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; を使用しています。&lt;/p&gt;

&lt;p&gt;既存のテーマを拝借して、&lt;a href=&#34;https://ja.wordpress.org/&#34;&gt;WordPress&lt;/a&gt; から記事をエクスポートしたり何やかんや手を入れてトータル３日くらいで設置しました。その後も少しずつ修正してますが。
ちなみに本サイトは &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; で運用。ソースコードも &lt;a href=&#34;https://github.com/feedtailor/StaffBlog&#34;&gt;弊社のGitHub&lt;/a&gt; で公開しています。&lt;/p&gt;

&lt;p&gt;というわけで、構築した時のノウハウとか課題とか、本サイトを更新しながら備忘録的に書いていく予定です。静的Webサイトに関する勉強会もやってますので、興味のある方は是非ご参加ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://connpass.com/event/26420/&#34;&gt;第2回 静的Webサイト 勉強会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://connpass.com/event/25507/&#34;&gt;第1回 静的Webサイト 勉強会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;静的サイトへの移行については「なんでそんな面倒臭いことを？」とか「わざわざ移行する必要ある？」とか意見はあると思いますが、好きなテキストエディタを使って &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown記法&lt;/a&gt; で書けるので個人的にはとても気に入ってます。&lt;/p&gt;

&lt;p&gt;もちろん動的サイトじゃないと無理って言うところもあるので、全部置き換えることはできないしその必要もありませんが、Markdownで記事を書いてサクッと投稿、みたいな運用をしたい方は移行を検討してみても良いのではないでしょうか。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
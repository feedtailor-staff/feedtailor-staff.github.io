<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2016/07 on feedtailor Inc. スタッフブログ</title>
    <link>http://staff.feedtailor.jp/archives/2016/07/</link>
    <description>Recent content in 2016/07 on feedtailor Inc. スタッフブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 27 Jul 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://staff.feedtailor.jp/archives/2016/07/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（メニュー編）</title>
      <link>http://staff.feedtailor.jp/2016/07/27/hugo_15</link>
      <pubDate>Wed, 27 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/07/27/hugo_15</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;br /&gt;
今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の &lt;strong&gt;メニュー&lt;/strong&gt; について解説します。&lt;/p&gt;

&lt;h3 id=&#34;メニューとは&#34;&gt;メニューとは？&lt;/h3&gt;

&lt;p&gt;Hugoにはシンプルなメニュー構築機能が備わっています。メニュー機能は以下のような特徴があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コンテンツを任意のメニュー（複数可）に追加できる&lt;/li&gt;
&lt;li&gt;メニューを階層化できる&lt;/li&gt;
&lt;li&gt;コンテンツなしでもメニューを追加できる&lt;/li&gt;
&lt;li&gt;選択中のメニュー表示を変更できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内部構造的に言うとメニューとは .Site.Menu という変数でアクセスできる連想配列のようなものです。&lt;br /&gt;
例えば main というメニューは &lt;code&gt;.Site.Menu.main&lt;/code&gt; でアクセスします。&lt;/p&gt;

&lt;p&gt;メニューには以下のようなプロパティがあります。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;URL&lt;/th&gt;&lt;td&gt;コンテンツのパーマリンク、または指定URL&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;td&gt;表示名&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Menu&lt;/th&gt;&lt;td&gt;所属メニュー&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Identifier&lt;/th&gt;&lt;td&gt;セクション名、または指定文字列&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Pre&lt;/th&gt;&lt;td&gt;指定HTML&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Post&lt;/th&gt;&lt;td&gt;指定HTML&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Weight&lt;/th&gt;&lt;td&gt;並び順&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Parent&lt;/th&gt;&lt;td&gt;親メニュー名&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Children&lt;/th&gt;&lt;td&gt;子メニュー&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;また、&lt;code&gt;HasChildren&lt;/code&gt; という関数で子メニューが存在するか確認できます。&lt;/p&gt;

&lt;h3 id=&#34;メニューの追加&#34;&gt;メニューの追加&lt;/h3&gt;

&lt;p&gt;メニューを追加する方法は二つあります。一つはコンテンツのフロントマターで指定する方法、もう一つは config.toml で指定する方法です。&lt;/p&gt;

&lt;h4 id=&#34;コンテンツをメニューに追加&#34;&gt;コンテンツをメニューに追加&lt;/h4&gt;

&lt;p&gt;コンテンツのフロントマターにメニュー項目を書くだけで、メニュー定義の追加とメニューへのコンテンツ登録が行われます。&lt;br /&gt;
フロントマターには以下のように記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
// YAML形式の場合
menu: &amp;quot;main&amp;quot;

// 複数のメニューに追加する場合
menu: [&amp;quot;main&amp;quot;, &amp;quot;footer&amp;quot;]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次のように親メニュー項目を指定して階層化したり、weight で並べ替えをすることもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
// YAML形式の場合
menu:
  main:
    parent: &#39;extras&#39;
    weight: 20
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;config-toml-でメニューを追加&#34;&gt;config.toml でメニューを追加&lt;/h4&gt;

&lt;p&gt;menuの表示順を変更したり、リンク等のコンテンツに紐付かないメニューを追加する場合は config.toml に定義を記載します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[menu.main]]
    name = &amp;quot;about hugo&amp;quot;
    pre = &amp;quot;&amp;lt;i class=&#39;fa fa-heart&#39;&amp;gt;&amp;lt;/i&amp;gt;&amp;quot;
    weight = -110
    identifier = &amp;quot;about&amp;quot;
    url = &amp;quot;http://gohugo.io/&amp;quot;
[[menu.main]]
    name = &amp;quot;getting started&amp;quot;
    pre = &amp;quot;&amp;lt;i class=&#39;fa fa-road&#39;&amp;gt;&amp;lt;/i&amp;gt;&amp;quot;
    weight = -100
    url = &amp;quot;/getting-started/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;各項目は前述の通りです。url は絶対パスまたはbaseURLからの相対パスで指定してください。&lt;/p&gt;

&lt;h3 id=&#34;メニューを表示&#34;&gt;メニューを表示&lt;/h3&gt;

&lt;p&gt;冒頭で記した通りテンプレートからは .Site.Menus 変数を介してアクセスします。&lt;br /&gt;
例えば、メニュー項目 main を表示するには以下のように記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul class=&amp;quot;menu&amp;quot;&amp;gt;
  {{ $currentNode := . }}
  {{ range .Site.Menus.main }}
    {{ if .HasChildren }}
      &amp;lt;li class=&amp;quot;sub-menu{{if $currentNode.HasMenuCurrent &amp;quot;main&amp;quot; . }} active{{end}}&amp;quot;&amp;gt;
      &amp;lt;a href=&amp;quot;javascript:;&amp;quot; class=&amp;quot;&amp;quot;&amp;gt;
          {{ .Pre }}
          &amp;lt;span&amp;gt;{{ .Name }}&amp;lt;/span&amp;gt;
          &amp;lt;span class=&amp;quot;menu-arrow arrow_carrot-right&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;/a&amp;gt;
      &amp;lt;ul class=&amp;quot;sub&amp;quot;&amp;gt;
          {{ range .Children }}
          &amp;lt;li{{if $currentNode.IsMenuCurrent &amp;quot;main&amp;quot; . }} class=&amp;quot;active&amp;quot;{{end}}&amp;gt;&amp;lt;a href=&amp;quot;{{.URL}}&amp;quot;&amp;gt; {{ .Name }} &amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt;
          {{ end }}
      &amp;lt;/ul&amp;gt;
      &amp;lt;/li&amp;gt;
    {{else}}
      &amp;lt;li&amp;gt;
      &amp;lt;a class=&amp;quot;&amp;quot; href=&amp;quot;{{.URL}}&amp;quot;&amp;gt;
          {{ .Pre }}
          &amp;lt;span&amp;gt;{{ .Name }}&amp;lt;/span&amp;gt;
      &amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
    {{end}}
  {{end}}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2行目は range の中から現在の表示ページ情報を参照するため、$currentNode に . を代入しています。&lt;br /&gt;
&lt;code&gt;.Site.Menus.main&lt;/code&gt; に対して階層化されているかどうかで処理を切り替えています。&lt;code&gt;$currentNode.HasMenuCurrent&lt;/code&gt;, &lt;code&gt;$currentNode.IsMenuCurrent&lt;/code&gt; でそれぞれ表示中のコンテンツが当該メニューの配下にいるか、当該メニューであるか、を判定しています。&lt;/p&gt;

&lt;h3 id=&#34;セクションをメニューに登録&#34;&gt;セクションをメニューに登録&lt;/h3&gt;

&lt;p&gt;次の設定を config.toml に記載すると全セクション、コンテンツが main メニューに一括登録されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SectionPagesMenu = &amp;quot;main&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;デフォルトでは、セクション名が表示名になります。表示名や並び順を変更したい場合は config.toml に定義を追加してください。この時、&lt;code&gt;identifier&lt;/code&gt; をセクション名にしてください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; [[menu.main]]
        name = &amp;quot;This is the post section&amp;quot;
        weight = -110
        identifier = &amp;quot;post&amp;quot;
        url = &amp;quot;/post/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（URL編）</title>
      <link>http://staff.feedtailor.jp/2016/07/20/hugo_14</link>
      <pubDate>Wed, 20 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/07/20/hugo_14</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の &lt;strong&gt;URL&lt;/strong&gt; について。&lt;/p&gt;

&lt;p&gt;Hugoのデフォルト設定では、URLはコンテンツの配置によって決まりますが、フロントマターのパラメータで指定のURLに変更したり、エイリアスを配置することができます。&lt;/p&gt;

&lt;h3 id=&#34;urlの変更-ページ単位&#34;&gt;URLの変更(ページ単位)&lt;/h3&gt;

&lt;p&gt;デフォルト設定では content/post/sample.md から以下のページが生成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public/post/sample/index.html   // URL: [baseurl]/post/sample/

// uglyURLs オプションが true の場合
public/post/sample.html         // URL: [baseurl]/post/sample.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;任意のパスに変更したい場合は、フロントマターの url パラメータを使用します。&lt;/p&gt;

&lt;p&gt;content/post/sample.md&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
// YAML形式の場合
url: a/b/c
....
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成されるページは &lt;code&gt;public/a/b/c/index.html&lt;/code&gt; (または &lt;code&gt;public/a/b/c.html&lt;/code&gt;) です。&lt;br /&gt;
url パラメータについては &lt;a href=&#34;http://staff.feedtailor.jp/2016/05/11/hugo_05&#34;&gt;レイアウト編３&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;h3 id=&#34;urlの変更-セクション単位&#34;&gt;URLの変更(セクション単位)&lt;/h3&gt;

&lt;p&gt;config.toml の permalinks 設定を使用すると SECTION (コンテンツが置かれたフォルダの１階層目)単位で URL のパターンを指定する事ができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[permalinks]
  post = &amp;quot;/:year/:month/:title/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;左辺がセクション名で右辺がURLパターンです。&lt;br /&gt;
URLパターンで使用できるパラメータは以下の通りです。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;:year&lt;/th&gt;&lt;td&gt;年：数字4桁&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:month&lt;/th&gt;&lt;td&gt;月：数字2桁&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:monthname&lt;/th&gt;&lt;td&gt;月名：January, February ... December&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:day&lt;/th&gt;&lt;td&gt;日：数字2桁&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:weekday&lt;/th&gt;&lt;td&gt;曜日：日曜=0, 月曜=1 ... 土曜=6&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:weekdayname&lt;/th&gt;&lt;td&gt;曜日名：Sunday, Monday ... Saturday&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:yearday&lt;/th&gt;&lt;td&gt;年の日：1月1日=1, 1月2日=2 ... 12月31日=365 (or 366)&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:section&lt;/th&gt;&lt;td&gt;コンテンツのsection&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:title&lt;/th&gt;&lt;td&gt;コンテンツのtitle&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:slug&lt;/th&gt;&lt;td&gt;コンテンツのslug（なければtitle）&lt;td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;:filename&lt;/th&gt;&lt;td&gt;コンテンツのファイル名（拡張子なし）&lt;td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;エイリアス&#34;&gt;エイリアス&lt;/h3&gt;

&lt;p&gt;サイトを移行したりHugoでリプレースした時、旧サイトとURLが変わってしまい、旧URLから新URLへリダイレクトしたい事があります。&lt;br /&gt;
alias パラメータを使用すると、旧URLにリダイレクト用ページを生成する事ができます。&lt;/p&gt;

&lt;p&gt;リダイレクト先コンテンツのフロントマターに次のような設定を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
// YAML形式の場合
aliases:
  - a/b/c.html  // 拡張子まで指定する
  - d/e/        // 複数指定可能
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の設定を追加すると、新URLのコンテンツに変更はありませんが、旧URLにリダイレクトするための以下のようなページが生成されます。&lt;br /&gt;
旧URLにアクセスすると 0 秒後に新URLにリダイレクトします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;リダイレクト先コンテンツのURL&amp;quot;/&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;content-type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot;/&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0;url=リダイレクト先コンテンツのURL&amp;quot;/&amp;gt;
  &amp;lt;/head&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;クロスリファレンス&#34;&gt;クロスリファレンス&lt;/h3&gt;

&lt;p&gt;任意のコンテンツに対するURLを生成したい場合は ref または relref ショートコードを使用するのが便利です。&lt;br /&gt;
ref は指定したコンテンツの絶対パス、relref は相対パスを生成します。&lt;/p&gt;

&lt;p&gt;ショートコードを使用して以下のように記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; ref &amp;quot;post/sample.md&amp;quot; &amp;gt;}}     =&amp;gt; [baseurl]/post/sample/
{{&amp;lt; ref &amp;quot;sample.md&amp;quot; &amp;gt;}}          =&amp;gt; [baseurl]/post/sample/
{{&amp;lt; relref &amp;quot;post/sample.md&amp;quot; &amp;gt;}}  =&amp;gt; /post/sample/
{{&amp;lt; relref &amp;quot;sample.md&amp;quot; &amp;gt;}}       =&amp;gt; /post/sample/
{{&amp;lt; relref &amp;quot;sample.md#top&amp;quot; &amp;gt;}}   =&amp;gt; /post/sample/#top
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上の２番目、４番目のようにフォルダ名は省略可能ですが、同一ファイル名のコンテンツが複数存在する場合には結果は保証されませんので注意してください。&lt;br /&gt;
５番目のように anchor 付きでも指定できます。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（データファイル編）</title>
      <link>http://staff.feedtailor.jp/2016/07/13/hugo_13</link>
      <pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/07/13/hugo_13</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の &lt;strong&gt;データファイル&lt;/strong&gt;ついて。&lt;/p&gt;

&lt;p&gt;Hugoでは、YAML / JSON / TOML形式で記述したデータをサイトに表示することができます。
自社の製品データや販売実績、トピックス等をデータファイルとして保存しておくと、レイアウトやコンテンツに手を入れることなく表示データの更新が可能になります。&lt;/p&gt;

&lt;h3 id=&#34;使用方法&#34;&gt;使用方法&lt;/h3&gt;

&lt;p&gt;データファイルは &lt;code&gt;data&lt;/code&gt; フォルダに設置します。サブフォルダを作っても良いです。&lt;br /&gt;
設置したデータファイルは、テンプレートやショートコードから &lt;code&gt;.Site.Data&lt;/code&gt; 変数を介してアクセスできます。&lt;br /&gt;
具体的には、&lt;code&gt;.Site.Data&lt;/code&gt; に続けてサブフォルダ名、ファイル名を . (ドット)でつなげた変数に格納されます。&lt;br /&gt;
サブフォルダ名に . が入っていると変数を参照できなくなるので注意してください。&lt;/p&gt;

&lt;p&gt;例えば、日本の祝日リストのデータファイルを作成する場合は以下のようになります。&lt;/p&gt;

&lt;p&gt;まず、data/calendar/holidays.toml として祝日データファイルを保存します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;year_2016 = [
&amp;quot;1/1 元日&amp;quot;,
&amp;quot;1/11 成人の日&amp;quot;,
&amp;quot;2/11 建国記念の日&amp;quot;,
...
&amp;quot;12/23 天皇誕生日&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上のデータは変数 &lt;code&gt;.Site.Data.calendar.holidays&lt;/code&gt; に格納されますので、次のような記述でリストを表示できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
{{ range .Site.Data.calendar.holidays.year_2016 }}
  &amp;lt;li&amp;gt;{{ . }}&amp;lt;/li&amp;gt;
{{ end }}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;data-driven-content&#34;&gt;Data-driven Content&lt;/h2&gt;

&lt;p&gt;Hugo ではデータファイルに加え、ローカル環境または外部サーバにある JSON / CSV ファイルをビルド時に自動取得して表示することができます。&lt;/p&gt;

&lt;p&gt;データは getJSON, getCSV 関数を使用して取得します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// JSONの場合
{{ $dataJ := getJSON &amp;quot;url&amp;quot; }}

// CSVの場合
{{ $dataC := getCSV &amp;quot;separator&amp;quot; &amp;quot;url&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引数の url はスペース区切りで分割して書くこともできます。例えば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;https://gohugo.io&amp;quot; &amp;quot;/extras&amp;quot; &amp;quot;/datadrivencontent/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は結合した一つのURL&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;https://gohugo.io/extras/datadrivencontent/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として扱われます。&lt;/p&gt;

&lt;p&gt;ローカル環境のファイルを指定する場合は、ファイルをワークフォルダ（hugoのサイトフォルダ）内に置き、url はフォルダ内の相対パスで指定してください。&lt;/p&gt;

&lt;p&gt;CSVの場合は次のように行や列を指定して表示します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;table&amp;gt;
{{ range $i, $r := getCSV &amp;quot;,&amp;quot; &amp;quot;http://.../sample.csv” }}
{{ if gt $i 0 }}
&amp;lt;tr&amp;gt;
  &amp;lt;td&amp;gt;{{ index $r 0 }}&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;{{ index $r 1 }}&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;{{ index $r 2 }}&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
{{ end }}
{{ end }}
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;変数 &lt;code&gt;$i&lt;/code&gt; には行番号（0始まり）が、&lt;code&gt;$r&lt;/code&gt; には各行のデータが格納されます。&lt;br /&gt;
データは index 関数を使用して取得します。第１引数は行全体のデータ、第２引数は列番号（0始まり）です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;キャッシュ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;リモートデータはビルドまたはプレビュー（ライブリロード）時に取得しています。一度取得したデータはキャッシュされますので注意してください。&lt;br /&gt;
キャッシュされたデータはデフォルトでは &lt;code&gt;$TMPDIR/hugo_cache/&lt;/code&gt; に保存されますが、&lt;code&gt;hugo&lt;/code&gt; コマンドのオプション &lt;code&gt;--cacheDir&lt;/code&gt; でフォルダを変更することもできます。&lt;/p&gt;

&lt;p&gt;また、&lt;code&gt;--ignoreCache&lt;/code&gt; オプションを使用すると、キャッシュを使用せずビルドの度に毎回取得することもできます。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（テーマ編）</title>
      <link>http://staff.feedtailor.jp/2016/07/06/hugo_12</link>
      <pubDate>Wed, 06 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/07/06/hugo_12</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の &lt;strong&gt;テーマ（theme）&lt;/strong&gt;ついて。&lt;/p&gt;

&lt;p&gt;Hugoでは、WordPressや他のCMS、ブログと同じようにテーマを利用してデザインを変更できます。&lt;br /&gt;
また、自分で作成したレイアウトテンプレートや画像等をテーマとして纏めておくことで、コンテンツを変更することなくサイトのデザインを変更できるようになります。&lt;/p&gt;

&lt;p&gt;Hugoにはデフォルトのテーマがありませんので、新規サイト作成時にはお好みのテーマを選択して適用してください。テーマの適用後もデザインは自由にカスタマイズ可能です。&lt;/p&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;Hugo themes&lt;/a&gt; というサイトにコミュニティで作られたテーマが多数公開されています。&lt;br /&gt;
各テーマは GitHub で公開されていますので、以下のように git コマンドでインストールしてください。「gitって何？」という方は後述の zip ファイルをダウンロードしてインストールすることもできます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;全てのテーマをインストール (git)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone --recursive https://github.com/spf13/hugoThemes.git themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;特定のテーマをインストール (git)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir themes
$ cd theme
$ git clone テーマのURL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;URLは&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;GitHubのリポジトリ&lt;/a&gt;からインストールしたいテーマを選択し、画面右上にある緑の &amp;ldquo;Clone or download&amp;rdquo; ボタンで表示できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2016/07/hugo_12_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;特定のテーマをインストール (zip)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;GitHubのリポジトリ&lt;/a&gt;からインストールしたテーマを選択し、画面右上にある緑の &amp;ldquo;Clone or download&amp;rdquo; ボタンから &amp;ldquo;Download ZIP&amp;rdquo; を実行してください。&lt;br /&gt;
config.toml と同じ階層に themes フォルダを作成し、ダウンロードしたzipファイルを展開します。
展開したフォルダは hugo-uno-4bc5f0c635995c55723284be3b0f826c86efdd13 のように末尾に長い英数字（gitのリビジョン）がついているので、最後の - 以降を削除（hugo-uno に名前を変更）します。&lt;/p&gt;

&lt;h2 id=&#34;テーマを適用する&#34;&gt;テーマを適用する&lt;/h2&gt;

&lt;p&gt;テーマを適用する方法は２つあります。一つがコマンドラインの引数、もう一つは設定ファイルで指定です。&lt;/p&gt;

&lt;p&gt;コマンドラインでは以下のように &amp;ldquo;-t テーマ名&amp;rdquo; を追加します。&lt;code&gt;hugo server&lt;/code&gt; コマンドでも同様です。テーマ名は themes フォルダ内にあるテーマのフォルダ名です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo -t テーマ名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定ファイルで指定する場合は config.toml に以下のように記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# config.toml
theme = &amp;quot;テーマ名&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;テーマをカスタマイズする&#34;&gt;テーマをカスタマイズする&lt;/h2&gt;

&lt;p&gt;テーマフォルダ（themes/テーマ名）内の構造はサイトと同様で layouts、static、archetypes フォルダがあります。&lt;/p&gt;

&lt;p&gt;カスタマイズしたい場合はテーマフォルダ内のファイルを直接変更するのではなく、変更したいファイルを対応するサイトのフォルダ（layouts等）にコピーして編集します。
例えば、themes/テーマ名/&lt;strong&gt;layouts/defaults/single.html&lt;/strong&gt; を変更したい場合は、&lt;strong&gt;layouts/defaults/single.html&lt;/strong&gt; にファイルをコピーして変更します。&lt;br /&gt;
staticやarchetypesフォルダ内のファイルも同様です。&lt;/p&gt;

&lt;h2 id=&#34;テーマを作成する&#34;&gt;テーマを作成する&lt;/h2&gt;

&lt;p&gt;新たにテーマを作成する時は以下のコマンドを使用するのが便利です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new theme テーマ名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コマンドを実行すると themes/テーマ名 フォルダにテーマのひな型が作成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;themes/
└── テーマ名
    ├── LICENSE.md
    ├── archetypes
    │   └── default.md
    ├── layouts
    │   ├── 404.html
    │   ├── _default
    │   │   ├── list.html
    │   │   └── single.html
    │   ├── index.html
    │   └── partials
    │       ├── footer.html
    │       └── header.html
    ├── static
    │   ├── css
    │   └── js
    └── theme.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先ほどの layouts、static、archetypes フォルダとtheme.toml、各フォルダにはダミーのファイルやフォルダ（archetypes/default.md, static/css &amp;hellip;）が生成されますのでそれらを変更するのが良いでしょう。&lt;/p&gt;

&lt;p&gt;theme.toml には作者やライセンス、config.toml に記載する設定のサンプル等を記載します。ページ生成には影響しません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/themes/creation/&#34;&gt;http://gohugo.io/themes/creation/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
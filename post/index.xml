<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on feedtailor Inc. スタッフブログ</title>
    <link>http://staff.feedtailor.jp/post/</link>
    <description>Recent content in Posts on feedtailor Inc. スタッフブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 08 Jun 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://staff.feedtailor.jp/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>静的サイトジェネレータ「Hugo」v0.16 がリリースされました</title>
      <link>http://staff.feedtailor.jp/2016/06/08/hugo_08</link>
      <pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/06/08/hugo_08</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;2016/06/06(現地時間)に、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の v0.16 がリリースされました。&lt;br /&gt;
今回は、新バージョンの変更点をご紹介します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases/tag/v0.16&#34;&gt;リリースノーツ&lt;/a&gt; をみたところ、Hugoの開発着手からちょうど 3 年だそうです。
前バージョンである v0.15 からは約 6 ヶ月ぶりのアップデートになります。&lt;br /&gt;
バージョン番号こそ 0.16 ですが、不具合も少なく、十分に安定して使用できています。&lt;/p&gt;

&lt;h3 id=&#34;アップデート&#34;&gt;アップデート&lt;/h3&gt;

&lt;p&gt;Mac の Homebrew を利用している場合は、簡単にアップデートできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew update
$ brew upgrade hugo
$ hugo version
Hugo Static Site Generator v0.16 BuildDate: 2016-06-06T21:37:59+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;debian / ubuntu linuxは、公式リポジトリに登録されましたので、以下のコマンドでインストールできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Window版は &lt;a href=&#34;https://github.com/spf13/hugo/releases/tag/v0.16&#34;&gt;こちら&lt;/a&gt; からダウンロードして exe ファイルを置き換えてください。&lt;/p&gt;

&lt;h3 id=&#34;主な新機能&#34;&gt;主な新機能&lt;/h3&gt;

&lt;h4 id=&#34;partial-builds&#34;&gt;Partial Builds&lt;/h4&gt;

&lt;p&gt;前バージョンまでは、サイトのプレビュー中（&lt;code&gt;hugo server&lt;/code&gt;）にコンテンツの変更点を感知した時、サイト全体を再生成していましたが、今バージョンからは、ファイルシステムを監視し変更されたファイルだけを再読み込みすることで、必要な部分だけを再生成するように変更されています。&lt;br /&gt;
テストの結果、ビルド回数が 10% から最大 90% を減少したと記載されています。&lt;/p&gt;

&lt;h4 id=&#34;template-の改善&#34;&gt;Template の改善&lt;/h4&gt;

&lt;p&gt;今バージョンでは、Go 1.6 で導入された &lt;code&gt;block&lt;/code&gt; キーワードに対応しました。&lt;/p&gt;

&lt;h3 id=&#34;その他の機能改善-修正&#34;&gt;その他の機能改善・修正&lt;/h3&gt;

&lt;p&gt;その他、小さいけれども重要な機能改善・修正事項が多数記載されていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;設定ファイルの Live Reload 対応&lt;/li&gt;
&lt;li&gt;エラー終了時のエラーコード出力&lt;/li&gt;
&lt;li&gt;環境変数からオプションを取得&lt;/li&gt;
&lt;li&gt;themesDir オプションを追加&lt;/li&gt;
&lt;li&gt;ソースファイルベースの相対リンク&lt;/li&gt;
&lt;li&gt;ソート関数 ByLastmod を追加&lt;/li&gt;
&lt;li&gt;ソート関数 ByCount の一貫性改善&lt;/li&gt;
&lt;li&gt;テンプレート関数の追加 &lt;code&gt;readFile&lt;/code&gt; &lt;code&gt;countword&lt;/code&gt; &lt;code&gt;jsonify&lt;/code&gt; &lt;code&gt;slice&lt;/code&gt; &amp;hellip;&lt;/li&gt;
&lt;li&gt;404.html のページ生成無効化オプションを追加&lt;/li&gt;
&lt;li&gt;content, layout, static, theme のシンボリックリンク対応&lt;/li&gt;
&lt;li&gt;server 起動時に指定ポートが使用中の場合は起動中止&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この中ではエラーコード出力とserver起動時のポートチェックが特に嬉しいです。シェルスクリプトからの起動やエラー判定に役立ちます！&lt;br /&gt;
他には、設定ファイルのリロード、ByCountの一貫性改善、テンプレート関数の追加でしょうか。&lt;/p&gt;

&lt;p&gt;他にもまだまだ変更点がありますので、気になった点は動作検証してまた改めてご紹介したいと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（コンテンツ編２）</title>
      <link>http://staff.feedtailor.jp/2016/06/01/hugo_07</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/06/01/hugo_07</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; の &lt;strong&gt;archetype&lt;/strong&gt; について。&lt;/p&gt;

&lt;p&gt;Hugo では、新しいコンテンツを追加する時、予め用意した雛形からコピー作成することができます。この雛形のことを &lt;strong&gt;archetype&lt;/strong&gt; と呼びます。&lt;/p&gt;

&lt;p&gt;archetype を使用すると毎回フロントマターに同じ項目を追加したり、同じ書き出し文を書いたりする煩わしさから解放されます。&lt;/p&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;p&gt;以下、フロントマターの categories と tags という項目と&amp;rdquo;こんにちは XXX です。&amp;rdquo;という本文を archetype で生成する方法を例示します。&lt;br /&gt;
まず、雛形ファイルを作成します。archetypes/default.md という名前で次の内容を保存してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
# YAML形式の場合
categories:
  - &amp;quot;a&amp;quot;
  - &amp;quot;b&amp;quot;
tags:
  - &amp;quot;x&amp;quot;
  - &amp;quot;y&amp;quot;
---
こんにちは XXX です。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に hugo コマンドでコンテンツを追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/test.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hugoコマンドの第２引数は content ファルダからの相対パスを指定します。この例ではファイル content/post/test.md が生成されます。&lt;br /&gt;
生成されたファイルを開くと次のような内容になっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
categories = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;]
date = &amp;quot;2016-06-01T15:25:17+09:00&amp;quot;
tags = [&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;]
title = &amp;quot;test&amp;quot;

+++
こんにちは XXX です。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで注意事項が４点あります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;生成されるコンテンツのフロントマターは archetype の形式に関係なく、デフォルトでは toml 形式になる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config.toml に metaDataFormat: &amp;ldquo;yaml&amp;rdquo; を追加すると yaml 形式に変更できます&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;項目 date と title が自動的に追加される&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;date はコンテンツを生成した日時、title はコンテンツのファイル名が自動設定されます&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;フロントマターの項目がアルファベット順に並べ替えられる&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;（YAML形式の場合）インデントが崩れる場合がある&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;あくまで雛形ですので、各項目は適宜修正してください。
因みに本エントリの archetype は以下のようになっています。ご参考まで。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
author: &amp;quot;&amp;quot;
layout: &amp;quot;post&amp;quot;
banner: &amp;quot;banners/placeholder.png&amp;quot;
archives:
  - &amp;quot;2016&amp;quot;
  - &amp;quot;2016/01&amp;quot;
  - &amp;quot;2016/01/01&amp;quot;
url: &amp;quot;/2016/01/01/xxx&amp;quot;
categories:
  - &amp;quot;&amp;quot;
tags:
  - &amp;quot;&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;archetypeの検索順&#34;&gt;archetypeの検索順&lt;/h2&gt;

&lt;p&gt;適用されるarchetypeは以下の順に検索されます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;archetypes/[コンテンツのtype].md&lt;/li&gt;
&lt;li&gt;archetypes/default.md&lt;/li&gt;
&lt;li&gt;themes/[テーマ名]/archetypes/[コンテンツのtype].md&lt;/li&gt;
&lt;li&gt;themes/[テーマ名]/archetypes/default.md&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;コンテンツのtypeは &lt;a href=&#34;http://staff.feedtailor.jp/2016/05/11/hugo_05/&#34;&gt;レイアウト編３&lt;/a&gt; でご説明したようにコンテンツが置かれたフォルダの１階層目に相当します。
従って、post/test.md を生成する場合は以下の順に検索して最初に見つかったものが適用されます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;archetypes/post.md&lt;/li&gt;
&lt;li&gt;archetypes/default.md&lt;/li&gt;
&lt;li&gt;themes/[テーマ名]/archetypes/post.md&lt;/li&gt;
&lt;li&gt;themes/[テーマ名]/archetypes/default.md&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;コンテンツの type は通常、フォルダの１階層目から決定されるのですが、hugo コマンドで直接 type を指定することもできます。&lt;br /&gt;
以下は test.md に type=post を指定する例です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new test.md -k post

または

$ hugo new test.md --kind=post
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;以上のようにコンテンツの内容や種別毎に archetype を生成しておくととても便利です。&lt;br /&gt;
毎回古いコンテンツからコピー作成している方や同じフロントマター項目を都度追加している方は archetype の導入を検討してみてはいかがでしょうか。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（コンテンツ編１）</title>
      <link>http://staff.feedtailor.jp/2016/05/18/hugo_06</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/05/18/hugo_06</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; のコンテンツのフロントマター(Front Matter)ついて。&lt;/p&gt;

&lt;p&gt;Hugo では、コンテンツ（Markdownファイル）のタイトル、日付、カテゴリや任意のパラメータ等のメタデータを追加することができます。&lt;/p&gt;

&lt;p&gt;メタデータはコンテンツファイルの先頭で指定しますが、この部分をフロントマターと呼びます。&lt;br /&gt;
フロントマターは以下の３つの形式に対応しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/minoritea/items/c0de47b8beb813c655d4&#34;&gt;TOML形式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-05-18&amp;quot;
title = &amp;quot;フロントマターTOML形式&amp;quot;
categories = [
  &amp;quot;Hugo&amp;quot;, &amp;quot;静的サイトジェネレータ&amp;quot;
] 
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/YAML&#34;&gt;YAML形式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;---
date: &amp;quot;2016-05-18&amp;quot;
title: &amp;quot;フロントマターYAML形式&amp;quot;
categories:
  - &amp;quot;Hugo&amp;quot;
  - &amp;quot;静的サイトジェネレータ&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/JavaScript_Object_Notation&#34;&gt;JSON形式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;date&amp;quot;: &amp;quot;2016-05-18&amp;quot;,
    &amp;quot;title&amp;quot;: &amp;quot;フロントマターJSON形式&amp;quot;,
    &amp;quot;categories&amp;quot;: [
        &amp;quot;Hugo&amp;quot;,
        &amp;quot;静的サイトジェネレータ&amp;quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;必須パラメータ&#34;&gt;必須パラメータ&lt;/h3&gt;

&lt;table&gt;
&lt;tr&gt;&lt;td&gt;title&lt;/td&gt;&lt;td&gt;コンテンツのタイトル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;date&lt;/td&gt;&lt;td&gt;コンテンツの日付（ソートに使用されます）&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;オプションパラメータ&#34;&gt;オプションパラメータ&lt;/h3&gt;

&lt;table&gt;
&lt;tr&gt;&lt;td&gt;description&lt;/td&gt;&lt;td&gt;コンテンツの説明文&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;draft&lt;/td&gt;&lt;td&gt;下書きフラグ&lt;br&gt;true に設定するとビルド時に --buildDrafts オプションを&lt;br&gt;つけなければページが生成されません。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;publishdate&lt;/td&gt;&lt;td&gt;発行日&lt;br&gt;true に設定するとビルド時に --buildFuture オプションを&lt;br&gt;つけなければページが生成されません。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;コンテンツのタイプ&lt;br&gt;詳しくは&lt;a href=&#34;http://staff.feedtailor.jp/2016/05/11/hugo_05/&#34;&gt;前回のエントリ&lt;/a&gt;を参照ください。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;isCKJLanguage&lt;/td&gt;&lt;td&gt;日本語韓国語中国語を含む場合は true を設定してください。&lt;br&gt;サマリーや文字数カウントに影響します。&lt;br&gt;config.toml の hasCJKLanguage を true にすると&lt;br&gt;自動判定されますので省略可能です。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;weight&lt;/td&gt;&lt;td&gt;エントリの並び順を変更する時に使用します。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;slug&lt;/td&gt;&lt;td&gt;URLの末尾、ファイル名部分を変更します。&lt;br&gt;詳しくは&lt;a href=&#34;http://staff.feedtailor.jp/2016/05/11/hugo_05/&#34;&gt;前回のエントリ&lt;/a&gt;を参照ください。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;url&lt;/td&gt;&lt;td&gt;URLを変更します。&lt;br&gt;詳しくは&lt;a href=&#34;http://staff.feedtailor.jp/2016/05/11/hugo_05/&#34;&gt;前回のエントリ&lt;/a&gt;を参照ください。&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;カテゴリ-タグについて&#34;&gt;カテゴリ・タグについて&lt;/h3&gt;

&lt;p&gt;Hugo ではコンテンツをグルーピングするカテゴリやタグ等の分類のことを taxonomies と呼びます。&lt;/p&gt;

&lt;p&gt;コンテンツで指定した taxonomies は、画面に表示したり、グルーピングしたコンテンツのリストページの生成に使用できます。&lt;/p&gt;

&lt;p&gt;以下はコンテンツにカテゴリ &amp;ldquo;開発&amp;rdquo; とタグ &amp;ldquo;Hugo&amp;rdquo; &amp;ldquo;静的サイトジェネレータ&amp;rdquo; を追加する例です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
date: &amp;quot;2016-05-18&amp;quot;
title: &amp;quot;フロントマターYAML形式&amp;quot;
categories:
  - &amp;quot;ウェブサイト&amp;quot;
tags
  - &amp;quot;Hugo&amp;quot;
  - &amp;quot;静的サイトジェネレータ&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;taxonomies にはデフォルト値として &lt;strong&gt;categories&lt;/strong&gt; と &lt;strong&gt;tags&lt;/strong&gt; が設定されていますが、自由に追加、変更することができます。&lt;br /&gt;
categories, tags 以外の taxonomies を追加する場合は config.toml に定義を追加してください。この時、追加するものだけを記述すると tags, categories が使用できなくなりますので、残したい場合は以下のように全て記述してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[taxonomies]
  tag = &amp;quot;tags&amp;quot;
  category = &amp;quot;categories&amp;quot;
  series = &amp;quot;series&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のように記述すると、コンテンツのフロントマターで ”series&amp;rdquo; が使用できるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
date: &amp;quot;2016-05-18&amp;quot;
title: &amp;quot;フロントマターYAML形式&amp;quot;
categories:
  - &amp;quot;ウェブサイト&amp;quot;
tags:
  - &amp;quot;Hugo&amp;quot;
  - &amp;quot;静的サイトジェネレータ&amp;quot;
series:
  - &amp;quot;Hugoを使ったサイト構築&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ユーザ定義パラメータ&#34;&gt;ユーザ定義パラメータ&lt;/h3&gt;

&lt;p&gt;Hugo では、コンテンツに対して上で紹介した以外の任意のパラメータを追加することができます。&lt;br /&gt;
以下は camelCase というパラメータを追加した例です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
date: &amp;quot;2016-05-18&amp;quot;
title: &amp;quot;フロントマターYAML形式&amp;quot;
camelCase: true
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;予め定義されていないパラメータは全て params という変数に格納されます。また、パラメータ名は全て小文字に変換されます。&lt;br /&gt;
従って、上の camelCase パラメータをレイアウトで使用する場合は、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Params.camelcase }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように記述してください。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（レイアウト編３）</title>
      <link>http://staff.feedtailor.jp/2016/05/11/hugo_05</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/05/11/hugo_05</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; のレイアウトの決定方法とパーマリンクについて。&lt;/p&gt;

&lt;p&gt;Hugo では、コンテンツ（Markdownファイル）のフォルダ階層や記述するフロントマターによって使用するレイアウトやパーマリンク（生成されるパス）を変更することができます。&lt;/p&gt;

&lt;p&gt;標準構成では次のように content フォルダそのままの階層で HTML が生成されます。&lt;br /&gt;
※configファイルで uglyURLs というパラメータを true に変更すると [baseURL]/post/firstpost.html という構成にもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
└── content
    ├── post
    |   ├── firstpost.md   // &amp;lt;- [baseURL]/post/firstpost/
    |   ├── happy
    |   |   └── ness.md    // &amp;lt;- [baseURL]/post/happy/ness/
    |   └── secondpost.md  // &amp;lt;- [baseURL]/post/secondpost/
    └── quote
        ├── first.md       // &amp;lt;- [baseURL]/quote/first/
        └── second.md      // &amp;lt;- [baseURL]/quote/second/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下はURLやレイアウトを決定するために使用するパラメータ、変数です。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;パラメータ&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;th&gt;フロント&lt;br&gt;マター&lt;/th&gt;&lt;th&gt;変数&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;slug&lt;/th&gt;&lt;td&gt;URLのファイル名部分を変更するパラメータ。&lt;/td&gt;&lt;td&gt;◯&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;URLを変更するパラメータ。&lt;br&gt;baseURL からのパス全体を指定する。&lt;/td&gt;&lt;td&gt;◯&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;section&lt;/th&gt;&lt;td&gt;コンテンツが置かれたフォルダの１階層目。&lt;br&gt;リストページ生成やレイアウト決定に使用される。&lt;br&gt;content 直下の場合は空。&lt;/td&gt;&lt;td&gt;×&lt;/td&gt;&lt;td&gt;.Section&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;type&lt;/th&gt;&lt;td&gt;section と同じ値だが、フロントマターで&lt;br&gt;上書き可能。&lt;br&gt;content 直下の場合は &#34;page&#34; が設定される。&lt;/td&gt;&lt;td&gt;◯&lt;/td&gt;&lt;td&gt;.Type&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;例えば、コンテンツ content/a/b/c.md の場合、各値は以下のようになります。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;permalink&lt;/th&gt;&lt;td&gt; [baseURL]/a/b/c/index.html &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;section  &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;type     &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;このコンテンツのフロントマターに slug:&amp;ldquo;d&amp;rdquo; を追加すると生成されるファイルの位置が変わります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
// YAML形式のフロントマター
date: 2016-05-11
title: &amp;quot;サンプル&amp;quot;
slug: &amp;quot;d&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;slug     &lt;/th&gt;&lt;td&gt;&lt;strong&gt; d &lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;permalink&lt;/th&gt;&lt;td&gt;&lt;strong&gt;[baseURL]/a/b/d/index.html &lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;section  &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;type     &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;更にフロントマターで url: &amp;ldquo;x/y/z&amp;rdquo; を追加すると生成されるファイルの位置が変わります。slug と url を両方指定した場合は url が優先されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
date: 2016-05-11
title: &amp;quot;サンプル&amp;quot;
slug: &amp;quot;d&amp;quot;
url: &amp;quot;x/y/z&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;slug     &lt;/th&gt;&lt;td&gt; d &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;url      &lt;/th&gt;&lt;td&gt;&lt;strong&gt; x/y/z &lt;strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;permalink&lt;/th&gt;&lt;td&gt;&lt;strong&gt; [baseURL]/x/y/z/index.html &lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;section  &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;type     &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;このコンテンツのフロントマターで type:&amp;ldquo;e&amp;rdquo; を指定してもファイルの位置は変わりませんが、後述する通りレイアウトの検索順が変わります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
date: 2016-05-11
title: &amp;quot;サンプル&amp;quot;
slug: &amp;quot;d&amp;quot;
url: &amp;quot;x/y/z&amp;quot;
type: &amp;quot;e&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;slug     &lt;/th&gt;&lt;td&gt; d &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;url      &lt;/th&gt;&lt;td&gt; x/y/z &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;permalink&lt;/th&gt;&lt;td&gt;[baseURL]/x/y/z/index.html &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;section  &lt;/th&gt;&lt;td&gt; a &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;type     &lt;/th&gt;&lt;td&gt;&lt;strong&gt; e &lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;section-type-について&#34;&gt;Section / Type について&lt;/h3&gt;

&lt;p&gt;type と section は主にレイアウトの決定に使用され、Hugo では自動的に section 毎のリストページを生成します。&lt;/p&gt;

&lt;p&gt;例えば、本エントリ先頭にあげたフォルダ構成でいうと、content 直下のフォルダ post と quote が SECTION にあたり、それぞれ [baseURL]/post/index.html [baseURL]/quote/index.html というリストページが生成されます。&lt;/p&gt;

&lt;p&gt;この時、リストページに使用するレイアウトテンプレートは以下の順で検索されます。(&lt;strong&gt;SECTION&lt;/strong&gt;がセクション名です)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/section/&lt;strong&gt;SECTION&lt;/strong&gt;.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/section.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/list.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/section/&lt;strong&gt;SECTION&lt;/strong&gt;.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/_default/section.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/_default/list.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同様に各エントリの個別ページも type（指定されていなければ section）によって使用するレイアウトテンプレートが決定されます。
(&lt;strong&gt;LAYOUT&lt;/strong&gt; はフロントマターで指定する layout パラメータです)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/&lt;strong&gt;TYPE-or-SECTION&lt;/strong&gt;/&lt;strong&gt;LAYOUT&lt;/strong&gt;.html&lt;/li&gt;
&lt;li&gt;/layouts/&lt;strong&gt;TYPE-or-SECTION&lt;/strong&gt;/single.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/single.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/&lt;strong&gt;TYPE-or-SECTION&lt;/strong&gt;/&lt;strong&gt;LAYOUT&lt;/strong&gt;.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/&lt;strong&gt;TYPE-or-SECTION&lt;/strong&gt;/single.html&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/_default/single.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;冒頭で述べたように Hugo では、コンテンツのフォルダ構成やパラメータによって生成される位置やレイアウトが変更されます。&lt;br /&gt;
コンテンツは目的毎に分類しておくのが良いでしょう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（レイアウト編２）</title>
      <link>http://staff.feedtailor.jp/2016/04/27/hugo_04</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/04/27/hugo_04</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; のテンプレートの書き方について。&lt;/p&gt;

&lt;p&gt;Hugo では、テンプレートの記述に Go 言語の &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; ライブラリを使用しています。
その文法や変数の扱い方等を簡単にご説明したいと思います。&lt;/p&gt;

&lt;h3 id=&#34;基本文法&#34;&gt;基本文法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;テンプレートで変数や関数を使用するときは、中括弧（波括弧）２つで括ります。括弧内で改行してはいけません。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; {{ }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;引数はスペースで区切ります&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{{ printf &amp;quot;%#v&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;関数や変数は . を使用してアクセスします&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;.Params.bar
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;コメントは /*  */ で括ります。コメント内は改行しても構いません。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{{/*
      コメント
               */}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;変数&#34;&gt;変数&lt;/h3&gt;

&lt;p&gt;変数は、前述のように .名前 という形式で記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.Title
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/2016/04/20/hugo_03/&#34;&gt;前回&lt;/a&gt;ご紹介したように Hugo ではページの種類によって使用できる変数が異なります。詳しくは &lt;a href=&#34;http://gohugo.io/templates/variables/&#34;&gt;こちら&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;p&gt;変数は自分で定義して代入、参照することもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $address := &amp;quot;東京都千代田区&amp;quot;}}
{{ $address }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;関数&#34;&gt;関数&lt;/h3&gt;

&lt;p&gt;関数は、Go 言語の text/template で定義されているものと Hugo の独自関数が使用できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang-jp.org/pkg/text/template/&#34;&gt;Go言語 text/template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/templates/functions/&#34;&gt;Hugo 独自の関数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;制御文&#34;&gt;制御文&lt;/h3&gt;

&lt;p&gt;他の多くのテンプレートと同様に条件式やループが使用できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;title&amp;quot; }}{{ .Params.title }}{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;isset は .Params に &amp;ldquo;title&amp;rdquo; という名前の要素が含まれているかどうかを返します。上の式は with を使って書き換えることもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Params.title }}{{ . }}{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with を使用すると . に引数の値がセットされます。（ここでは .Params.title の値）&lt;/p&gt;

&lt;p&gt;ループは次のように書きます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range array }}
   現在の値は {{ . }} です。
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array には配列やマップ（連想配列）を指定します。range から end の間は . にループの次の値がセットされます。&lt;/p&gt;

&lt;h3 id=&#34;パイプ&#34;&gt;パイプ&lt;/h3&gt;

&lt;p&gt;Go テンプレートではパイプライン文字 | を使って、値やコマンドの結果を次のコマンドへ渡すことができます。渡された値は最後の引数として扱われます。&lt;br /&gt;
例えば、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if eq 1 1 }} 同じ {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は、パイプを使って次のように書き換えることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ eq 1 1 | if }} 同じ {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;コンテキスト&#34;&gt;コンテキスト&lt;/h3&gt;

&lt;p&gt;. （ドット）には現在参照できる値または変数群が格納されています。&lt;br /&gt;
例えばテンプレートの最上位では、そのページで使用できるデータ・変数が全て格納されていますが、range や with の中では現在の値のみが格納されています。&lt;br /&gt;
range や with の中でサイト全体の値を参照する場合は、 $. を使ってグローバルな値を取得することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range array }}
   現在の値は {{ . }} です。
   サイトの名称は {{ $.Site.Title }} です。
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;パラメータ&#34;&gt;パラメータ&lt;/h3&gt;

&lt;p&gt;Hugo では、サイト全体またはページ単位で独自のパラメータを定義することができます。&lt;br /&gt;
定義したパラメータはテンプレートから自由に参照できます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ページパラメータ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hugo では各ページの &lt;em&gt;フロントマター&lt;/em&gt; でタイトルや日付等の属性を埋め込みます。（ &lt;a href=&#34;http://staff.feedtailor.jp/2016/04/05/hugo_01/&#34;&gt;導入編&lt;/a&gt; の &amp;ldquo;記事の追加&amp;rdquo; を参照）&lt;br /&gt;
パラメータも同じく、このフロントマターで指定します。例えば、notoc というパラメータを追加した場合、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-05T12:00:00+09:00&amp;quot;
draft = true
title = &amp;quot;hello&amp;quot;
notoc = true

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ページテンプレートでは以下のように .Params.notoc で参照できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if not .Params.notoc }}
    &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
    {{ .TableOfContents }}
    &amp;lt;/div&amp;gt;
{{ end }}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;サイトパラメータ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;サイト全体のパラメータは config.toml ファイルで指定します。&lt;br /&gt;
config.toml では params の属性として追加してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://staff.feedtailor.jp/&amp;quot;
title   = &amp;quot;feedtailor Inc. スタッフブログ&amp;quot;

...

[params]
    author = &amp;quot;feedtailor Inc.&amp;quot;
    location = &amp;quot;Osaka, Japan&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サイトパラメータは以下のように .Site.Params.名前 で参照できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Site.Params.author }}&amp;lt;meta name=&amp;quot;author&amp;quot; content=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回は Hugo レイアウトテンプレートの基本的な文法をご説明しました。&lt;br /&gt;
これらを組み合わせてテンプレートをどのように書くかを次回以降でご紹介していこうと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、静的サイトジェネレータの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽に&lt;a href=&#34;http://www.feedtailor.jp/form/&#34;&gt;お問い合わせ&lt;/a&gt;ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（レイアウト編１）</title>
      <link>http://staff.feedtailor.jp/2016/04/20/hugo_03</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/04/20/hugo_03</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今回は、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; のレイアウトテンプレートについて書きたいと思います。&lt;/p&gt;

&lt;p&gt;Hugo では、テンプレートの記述に Go 言語の &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; ライブラリを使用しています。
一見複雑そうに見えますが、簡単な記法で多くのことを実現できます。&lt;/p&gt;

&lt;h3 id=&#34;テンプレートの種類&#34;&gt;テンプレートの種類&lt;/h3&gt;

&lt;p&gt;Hugo では、以下の３種類のテンプレートでサイトを構築します。&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Single&lt;/dt&gt;
&lt;dd&gt;単一のコンテンツを表示するページ&lt;/dd&gt;
&lt;dt&gt;List&lt;/dt&gt;
&lt;dd&gt;複数のコンテンツのリストを表示するページ&lt;/dd&gt;
&lt;dt&gt;Homepage&lt;/dt&gt;
&lt;dd&gt;ホームページ（トップページ）&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;多くのサイトでは、トップページからあるコンテンツのリストを表示し、そこから目的のコンテンツページを表示する構成になっていると思います。&lt;br /&gt;
上の３つを組み合わせることで複雑なサイトを構築できるようになります。&lt;/p&gt;

&lt;p&gt;Hugo では、その他に補助的なテンプレートが用意されています。何れも上のテンプレートに組み込んで（include）使用します。&lt;br /&gt;
種類によって、テンプレート内で使用出来る変数が異なります。&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Partial Templates&lt;/dt&gt;
&lt;dd&gt;ページ内の共通パーツ&lt;/dd&gt;
&lt;dt&gt;Content Views&lt;/dt&gt;
&lt;dd&gt;コンテンツを表示するパーツ&lt;/dd&gt;
&lt;dt&gt;Taxonomy Terms&lt;/dt&gt;
&lt;dd&gt;Taxonomy（カテゴリやタグなどの分類）のリストを表示するパーツ&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;トップページ&#34;&gt;トップページ&lt;/h3&gt;

&lt;p&gt;まずサイトのトップページを作りましょう。&lt;a href=&#34;http://staff.feedtailor.jp/2016/04/13/hugo_02/&#34;&gt;前回&lt;/a&gt; で config.toml に書いた baseurl で表示するページです。&lt;br /&gt;
ファイルは layouts フォルダ直下に index.html という名前で作成します。content フォルダ内ではありませんので注意してください。&lt;br /&gt;
以下は本ブログのトップページのソースコードです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;{{ with .Site.LanguageCode }}{{ . }}{{ else }}en-US{{ end }}&amp;quot;&amp;gt;

{{ partial &amp;quot;head&amp;quot; . }}

&amp;lt;body&amp;gt;
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;

&amp;lt;div id=&amp;quot;container&amp;quot;&amp;gt;
    {{ partial &amp;quot;header&amp;quot; . }}
    &amp;lt;div class=&amp;quot;outer&amp;quot;&amp;gt;
        {{ partial &amp;quot;article_list&amp;quot; . }}
        {{ partial &amp;quot;sidebar&amp;quot; . }}
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

{{ partial &amp;quot;footer&amp;quot; . }}

&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;多くの場合、ページのヘッダやフッタ等、複数のページで共通化できる部分があると思います。本ブログでは、headタグ、ページのヘッダ、ページ中央の記事のリスト、サイドバー、フッタを Partial テンプレートとして共通化しています。&lt;/p&gt;

&lt;p&gt;Partial テンプレートは layouts フォルダ内に partials フォルダを作成してそこに置きます。使用するときは、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;ファイル名(拡張子なし)&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書きます。例えば、上の {{ partial &amp;ldquo;head&amp;rdquo; . }} は layouts/partials/head.html を読み込んでいます。&lt;/p&gt;

&lt;p&gt;partial を使用する時、ファイル名の後ろの . （半角ドット）を忘れないようにしてください。&lt;br /&gt;
Go テンプレートでは . は、現在スコープのコンテキストを表しています。もう少し砕いていうと、その場で使える変数を入れている箱です。
上の Partial の例では、指定したファイルのテンプレートに . を渡している、つまりその場で使える全ての変数が Partial テンプレートでも使えますよ、ということです。
.Data のようにある変数だけを渡すこともできますが、良く分からなければ毎回 . を渡しても良いでしょう。&lt;/p&gt;

&lt;p&gt;その他のテンプレートや Partial の中身については順次ご説明します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;feedtailor&lt;/a&gt; では、SSGの利用に限らず、ウェブサイト静的化の御相談を承っておりますのでお気軽にご相談ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（フォルダ構成編）</title>
      <link>http://staff.feedtailor.jp/2016/04/13/hugo_02</link>
      <pubDate>Wed, 13 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/04/13/hugo_02</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/2016/04/05/hugo_01&#34;&gt;前回&lt;/a&gt;に引き続き、静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; について書きたいと思います。今回はフォルダ構成について。&lt;/p&gt;

&lt;h3 id=&#34;フォルダ構成&#34;&gt;フォルダ構成&lt;/h3&gt;

&lt;p&gt;Hugo では、記事や画像、レイアウトを種類毎にそれぞれ決まったフォルダに配置する必要があります。&lt;br /&gt;
新規サイトを作成する &lt;strong&gt;hugo new site&lt;/strong&gt; コマンドを利用すると、デフォルト設定に準じた以下のファイル・フォルダが生成されます。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/overview/configuration/&#34; target=&#34;_blank&#34;&gt;config.toml&lt;/a&gt;&lt;/th&gt;&lt;td&gt;サイト全体の設定ファイル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/content/archetypes/&#34; target=&#34;_blank&#34;&gt;archetypes&lt;/a&gt;&lt;/th&gt;&lt;td&gt;記事の雛形を置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/content/organization/&#34; target=&#34;_blank&#34;&gt;content&lt;/a&gt;&lt;/th&gt;&lt;td&gt;記事を置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/extras/datafiles/&#34; target=&#34;_blank&#34;&gt;data&lt;/a&gt;&lt;/th&gt;&lt;td&gt;データファイルを置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/layout/overview/&#34; target=&#34;_blank&#34;&gt;layouts&lt;/a&gt;&lt;/th&gt;&lt;td&gt;レイアウトを置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;a href=&#34;http://gohugo.io/themes/creation#toc_4&#34; target=&#34;_blank&#34;&gt;static&lt;/a&gt;&lt;/th&gt;&lt;td&gt;画像等の静的素材を置くフォルダ&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;その他に、テーマを置く &lt;strong&gt;&lt;a href=&#34;http://gohugo.io/themes/overview/&#34;&gt;themes&lt;/a&gt;&lt;/strong&gt; フォルダ、ファイルが出力される &lt;strong&gt;public&lt;/strong&gt; フォルダの位置がデフォルトで設定されています。&lt;/p&gt;

&lt;h3 id=&#34;config-tomlファイル&#34;&gt;config.tomlファイル&lt;/h3&gt;

&lt;p&gt;URLやタイトル、フォルダ構成等、サイト全体の設定を記載するファイルです。&lt;br /&gt;
デフォルトでは拡張子の通り、&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML形式&lt;/a&gt; で書きます。config.toml が存在しない場合は config.yaml、config.json の順に使用されます。&lt;/p&gt;

&lt;p&gt;生成直後は次のような内容ですので、ご利用の環境に合わせて変更してください。&lt;br /&gt;
定義されている項目は&lt;a href=&#34;http://gohugo.io/overview/configuration/&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前述のフォルダ構成を変更したり任意の項目を追加することもできます。&lt;/p&gt;

&lt;p&gt;設定値は以下のコマンドで確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo config
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;publicフォルダ&#34;&gt;publicフォルダ&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;hugo&lt;/strong&gt; コマンドで生成されるファイル群は public フォルダに出力されます。&lt;br /&gt;
このフォルダをウェブサーバに設置してサイトを公開します。&lt;/p&gt;

&lt;h3 id=&#34;archetypesフォルダ&#34;&gt;archetypesフォルダ&lt;/h3&gt;

&lt;p&gt;記事の雛形を置くフォルダです。&lt;br /&gt;
雛形ファイルは &lt;strong&gt;hugo new&lt;/strong&gt; コマンドで記事ファイルを生成する時に使用されます。雛形が見つからない場合は、日付、タイトル、下書きフラグのみの記事が生成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-13T14:31:25+09:00&amp;quot;
draft = true
title = &amp;quot;test&amp;quot;

+++


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;contentフォルダ&#34;&gt;contentフォルダ&lt;/h3&gt;

&lt;p&gt;記事を置くフォルダです。&lt;br /&gt;
このフォルダにあるファイルはHugoの変換処理を通ります。例えば、.md（Markdown形式）ファイルの内容は、HTMLに変換され、所定のレイアウトに埋め込まれてHTMLファイルとして出力されます。&lt;br /&gt;
変換処理が不要なファイルは後述する &lt;strong&gt;static&lt;/strong&gt; フォルダに置いてください。&lt;/p&gt;

&lt;h3 id=&#34;dataフォルダ&#34;&gt;dataフォルダ&lt;/h3&gt;

&lt;p&gt;データファイルを置くフォルダです。&lt;br /&gt;
データファイルは、任意の名前・値を定義することができるので、簡易なKey-Valueデータストアとして使用できます。&lt;br /&gt;
例えば、トピックスや会社の年表、製品情報等をデータファイルとして保存しておくと、レイアウトファイルを変更することなくデータのみを更新することができます。&lt;br /&gt;
因みに &lt;a href=&#34;http://www.feedtailor.jp/&#34; target=&#34;_blank&#34;&gt;弊社サイト&lt;/a&gt; の &amp;ldquo;WHAT&amp;rsquo;S NEW&amp;rdquo; の内容は、レイアウトに直接書くのではなく、以下のようにTOML形式のデータファイルに記載しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[news_row]]
  date        = &amp;quot;2016.03.14&amp;quot;
  title       = &#39;&amp;lt;a href=&amp;quot;http://staff.feedtailor.jp/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;スタッフブログ&amp;lt;/a&amp;gt;のデザインを変更しました(静的Webサイト化)&#39;

[[news_row]]
  date        = &amp;quot;2015.01.27&amp;quot;
  title       = &amp;quot;B2B向けサービス「SYNCNEL」を事業売却しました&amp;quot;
  url         = &amp;quot;http://feedtailor.jp/wp/?p=15686&amp;quot;

[[news_row]]
  date        = &amp;quot;2015.10.16&amp;quot;
  title       = &amp;quot;天気予報アプリ「そら案内」および関連全事業を無償譲渡しました&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;layoutフォルダ&#34;&gt;layoutフォルダ&lt;/h3&gt;

&lt;p&gt;HTMLのレイアウトを置くフォルダです。&lt;br /&gt;
このフォルダにあるレイアウトに &lt;strong&gt;content&lt;/strong&gt; フォルダ内の記事や &lt;strong&gt;data&lt;/strong&gt; フォルダのデータを埋め込んでHTMLを生成します。&lt;br /&gt;
レイアウト内の制御文やループはGo言語の &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/templateライブラリ&lt;/a&gt; を使って記述します。&lt;/p&gt;

&lt;h3 id=&#34;staticフォルダ&#34;&gt;staticフォルダ&lt;/h3&gt;

&lt;p&gt;JSやCSS、画像等の静的素材を置くフォルダです。&lt;br /&gt;
Hugoの変換処理が不要なファイルはこのフォルダに設置してください。&lt;strong&gt;public&lt;/strong&gt; フォルダにそのままコピーされます。&lt;/p&gt;

&lt;h3 id=&#34;themeフォルダ&#34;&gt;themeフォルダ&lt;/h3&gt;

&lt;p&gt;テーマを置くフォルダです。&lt;br /&gt;
Hugo では複数のテーマを保存しておいて、簡単に切り替えることができます。&lt;br /&gt;
&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;公開されているテーマ&lt;/a&gt; も沢山ありますので利用してみるのもよいでしょう。&lt;/p&gt;

&lt;p&gt;今回は以上です。&lt;br /&gt;
各フォルダの詳細についても順次書いていこうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレータHugoを使ったサイト構築（導入編）</title>
      <link>http://staff.feedtailor.jp/2016/04/05/hugo_01</link>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/04/05/hugo_01</guid>
      <description>

&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;これから何回かに分けて本サイト構築時に使用した静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; についてご紹介したいと思います。&lt;/p&gt;

&lt;h3 id=&#34;hugoとは&#34;&gt;Hugoとは？&lt;/h3&gt;

&lt;p&gt;Go言語で書かれた&lt;a href=&#34;http://staticgen.com&#34;&gt;静的サイトジェネレータ&lt;/a&gt;です。&lt;br /&gt;
代表的な静的サイトジェネレータとして、GitHub社が開発している&lt;a href=&#34;https://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;や&lt;a href=&#34;https://middlemanapp.com/jp/&#34;&gt;Middleman&lt;/a&gt;、
国産ではChatwork社が開発している&lt;a href=&#34;https://github.com/chatwork/Phest&#34;&gt;Phest&lt;/a&gt;等がありますが、Hugoを選んだ大きな理由は以下の３つです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;インストールが楽&lt;/li&gt;
&lt;li&gt;クロスプラットフォーム対応&lt;/li&gt;
&lt;li&gt;ページ生成が速い&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Win/Mac/Linux環境に対応していて、どの環境も実行ファイル１つです。簡易HTTPサーバも内蔵しているのでRubyやPHPのインストールはもちろんApacheさえも不要です。&lt;br /&gt;
ページ生成も高速で本ブログの規模であれば0.3秒くらいで生成されます。&lt;/p&gt;

&lt;h3 id=&#34;インストール&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;各プラットフォーム用の実行ファイルが提供されているので&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;リリース情報のページ&lt;/a&gt;からダウンロードしてください。
Windows 64bit版はhugo_0.15_windows_amd64.zip、MacOSX版はhugo_0.15_darwin_amd64.zipです。zipファイルから展開した実行ファイルは hugo（Winは hugo.exe）という名前に変更しておきましょう。&lt;br /&gt;
Mac版であれば&lt;a href=&#34;http://brew.sh/index_ja.html&#34;&gt;Homebrew&lt;/a&gt;からもインストールできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
$ brew update
$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;サイト作成&#34;&gt;サイト作成&lt;/h3&gt;

&lt;p&gt;新規サイトを作成するには以下のコマンドを実行します。hugo(.exe)を環境変数PATHに登録していない場合はダウンロードしたhugo(.exe)があるフォルダで実行しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site サイト名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで空のサイトが出来上がります。生成されたのはサイトの情報を入力する config.toml ファイルと空のフォルダ５つ（&lt;strong&gt;archetypes&lt;/strong&gt;, &lt;strong&gt;content&lt;/strong&gt;, &lt;strong&gt;data&lt;/strong&gt;, &lt;strong&gt;layouts&lt;/strong&gt;, &lt;strong&gt;static&lt;/strong&gt;）だけで中身はありません。
以降、hugo コマンドは config.toml ファイルのあるフォルダで実行しますので、hugo(.exe)を同じ場所に移動しておくとよいでしょう。&lt;/p&gt;

&lt;p&gt;生成された config.toml ファイルは以下のようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;baseurlがこのサイトを公開するURL、languageCodeはRSS出力に付与する文字コード、titleはサイトのタイトルです。環境に合わせて変更してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://example.com/&amp;quot;
languageCode = &amp;quot;ja&amp;quot;
title = &amp;quot;Hugo入門&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;テーマのインストール&#34;&gt;テーマのインストール&lt;/h3&gt;

&lt;p&gt;レイアウトを１から作るのは時間がかかるので、一般公開されているテーマを利用してみましょう。&lt;br /&gt;
Hugo公式サイトの&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;テーマ一覧のページ&lt;/a&gt;から好きなデザインを選択します。ここでは公式サイトの&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;クイックスタート&lt;/a&gt;と同じく &lt;a href=&#34;http://themes.gohugo.io/hugo-uno/&#34;&gt;hugo-uno&lt;/a&gt; テーマを使ってみます。
まずはサイトのトップフォルダ（config.tomlがあるフォルダ）に themes というフォルダを作って、そこにhugo-unoテーマを設置します。gitコマンドが使える方は以下で。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir themes
$ cd themes
$ git clone https://github.com/SenjinDarashiva/hugo-uno.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git コマンドが使えない方は &lt;a href=&#34;https://github.com/SenjinDarashiva/hugo-uno/archive/master.zip&#34;&gt;ここ&lt;/a&gt; からzipファイルをダウンロードして展開してください。フォルダ名は hugo-uno に変更してください。&lt;/p&gt;

&lt;h3 id=&#34;記事の追加&#34;&gt;記事の追加&lt;/h3&gt;

&lt;p&gt;記事は content フォルダに置きます。以下のコマンドでからの記事ファイルを作ることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new ファイル名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは post/hello.md という名前で作ってみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/hello.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コマンドを実行すると content フォルダ内に post フォルダが作成され、その中に hello.md ファイルが作られます。&lt;br /&gt;
標準設定ではファイルの場所・名前がそのままURLのパス部分になるので、この記事は http://サーバ名/post/hello/ というURLで公開されることになります。&lt;/p&gt;

&lt;p&gt;テキストエディタで hello.md を編集しましょう。生成された直後の hello.md ファイルの中身は以下のようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-05T12:00:00+09:00&amp;quot;
draft = true
title = &amp;quot;hello&amp;quot;

+++

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先頭の半角 + 3文字から次の + 3文字の行までを &lt;strong&gt;フロントマター&lt;/strong&gt; と呼び、記事のタイトルや日付、カテゴリ等ページの属性を指定します。&lt;br /&gt;
title がページのタイトルです。draft は下書きかどうかの状態で true が指定されているとプレビューやページ生成がされませんので false に指定するか削除しましょう。本文はフロントマター以降（この場合は７行目以降）に &lt;a href=&#34;https://ja.wikipedia.org/wiki/Markdown&#34;&gt;Markdown記法&lt;/a&gt; で記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-05T12:00:00+09:00&amp;quot;
title = &amp;quot;Hugoを始めました&amp;quot;

+++

こんにちは、**Hugo** を始めました。

### Markdown記法

Markdownの書き方は以下のサイトが参考になります。

- [Wikipedia](https://ja.wikipedia.org/wiki/Markdown)
- [Qiita](http://qiita.com/Qiita/items/c686397e4a0f4f11683d)
- [日本語Markdownユーザー会](http://www.markdown.jp/what-is-markdown/#markdown-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;プレビュー&#34;&gt;プレビュー&lt;/h3&gt;

&lt;p&gt;hugo は簡易HTTPサーバを内蔵していていつでもプレビューできます。プレビュー中は自動的にリロードがかかるため何もしなくても表示が逐次更新されます。
プレビュー機能を実行するには &lt;strong&gt;hugo server&lt;/strong&gt; コマンドを使用します。-t の後ろはテーマのフォルダ名を指定してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -t hugo-uno -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで &lt;a href=&#34;http://127.0.0.1:1313/&#34;&gt;http://127.0.0.1:1313/&lt;/a&gt; にアクセスすると作成したサイトが表示されます。終了するときは Ctrl+C を押してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2016/04/hugo_01_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;ページ生成&#34;&gt;ページ生成&lt;/h3&gt;

&lt;p&gt;プレビューで問題がないことを確認できたらページ生成です。以下のコマンドを実行してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo -t hugo-uno
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ウェブサイトとして公開するファイル一式が &lt;strong&gt;public&lt;/strong&gt; フォルダに出力されますので、このままウェブサーバに設置してください。&lt;/p&gt;

&lt;p&gt;今回はインストールからページ生成、ウェブサーバの公開までの流れを急ぎでご紹介しましたが、次回以降は各項目についてもう少し掘り下げていこうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第2回静的Webサイト勉強会を開催しました</title>
      <link>http://staff.feedtailor.jp/2016/03/30/swebmtg2</link>
      <pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/03/30/swebmtg2</guid>
      <description>&lt;p&gt;こんにちは、tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;今週 2016/03/28(月) に東京高円寺にある &lt;a href=&#34;http://www.val.co.jp&#34;&gt;ヴァル研究所様&lt;/a&gt; で &lt;a href=&#34;http://connpass.com/event/26420/&#34;&gt;第2回 静的Webサイト 勉強会&lt;/a&gt; を開催しました。&lt;/p&gt;

&lt;p&gt;勉強会は約60名様、その後の懇親会も半数の方が参加くださって大盛況でした。ありがとうございました。&lt;/p&gt;

&lt;p&gt;今回はゲストスピーカーとして &lt;a href=&#34;https://www.alleyoop.co.jp&#34;&gt;株式会社アリウープ&lt;/a&gt; の河野様 に講演いただきました。&lt;br /&gt;
名だたる大手企業のサイトを多数手掛けていらっしゃるので説得力が違います。静的サイトと動的要素の組み合わせ例とか今後の予測とか本当に勉強になりました。
弊社では現状フリーの静的サイトジェネレータしか実績がありませんので、機会があれば商用静的CMSについても調査、比較検討してみたいと思います。&lt;/p&gt;

&lt;p&gt;ライトニングトークの１つ目は &lt;a href=&#34;http://m2mtech.jp/&#34;&gt;M2Mテクノロジーズ株式会社&lt;/a&gt; 内山様からウェブサイトの改竄検知について。
シンプルな方法ですが、HTMLや画像をファイルレベルで差分を取るって有効だと感じました。&lt;/p&gt;

&lt;p&gt;２つ目は &lt;a href=&#34;http://classmethod.jp/&#34;&gt;クラスメソッド株式会社&lt;/a&gt; 鈴木様 からCloudFrontの利用について。
静的サイトはCDNと相性がいいので積極的に利用するのも良いかも。安めのサーバと組み合わせるとトータルコストが下がる可能性もありそうです。&lt;/p&gt;

&lt;p&gt;さて、私は大阪で行った &lt;a href=&#34;http://connpass.com/event/25507/&#34;&gt;第1回&lt;/a&gt; と同じく「静的サイトジェネレータHugoを使ったサイト運用」という題目で話してきました。&lt;br /&gt;
&lt;a href=&#34;http://staff.feedtailor.jp/2016/03/25/migration&#34;&gt;前回のエントリ&lt;/a&gt; でも書きましたが、既に６つほど静的サイトを構築していますので、その際に感じたことをざっくりでも共有できたらと思いまして。
話した内容は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;構築したサイトのご紹介

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.syncnel.biz/&#34;&gt;SYNCNELオフィシャルサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.feedtailor.jp&#34;&gt;弊社コーポレートサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.feedtailor.jp&#34;&gt;弊社社長ブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hitokoto.feedtailor.jp&#34;&gt;弊社スタッフのひとことブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;当ブログ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hugoでブログエントリの追加の実演&lt;/li&gt;
&lt;li&gt;構築／運用上の課題、メリット&lt;/li&gt;
&lt;li&gt;自作GUIのチラ見せ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;br /&gt;
個人的に非技術者の方が &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; を利用する上で１番の障害になっているのが黒い画面（コマンドライン）だと感じておりまして、私のプレゼンではそれをフォローするために作成したGUIをご紹介しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2016/03/swebmtg2_gui.png&#34; alt=&#34;GUI&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上段左から順に操作するとエントリの追加、バージョン管理からサーバへの反映まで出来るようになっています。各ボタンの機能を簡単にご紹介します。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;フォルダを開く&lt;/th&gt;&lt;td&gt;プロジェクトのフォルダを開く&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;更新&lt;/th&gt;&lt;td&gt;git pull コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;コンテンツを追加&lt;/th&gt;&lt;td&gt;hugo new コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;画像を追加&lt;/th&gt;&lt;td&gt;指定した画像のサムネイルを作成&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;プレビュー&lt;/th&gt;&lt;td&gt;hugo server コマンドの実行、ブラウザの起動&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;ビルド&lt;/th&gt;&lt;td&gt;hugo コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;登録&lt;/th&gt;&lt;td&gt;git add / commit / push コマンドの実行&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;アップロード&lt;/th&gt;&lt;td&gt;サーバへのファイル転送&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;JavaFXで作成したUIから、直接コマンドを実行したりシェルスクリプトを呼び出しているだけの簡単なものですが、黒い画面を排除するには十分で、
先に紹介した弊社の&lt;a href=&#34;http://hitokoto.feedtailor.jp/&#34;&gt;ひとことブログ&lt;/a&gt;はこれを使用して更新しています。&lt;/p&gt;

&lt;p&gt;懇親会でもいろんな方と話しましたが、まだまだ静的サイトの有用性や&lt;a href=&#34;http://staticgen.com&#34;&gt;静的サイトジェネレータ&lt;/a&gt;の存在が広まってないな、と感じました。
ご紹介したGUIのようなものや日本語の情報が増えて一般の方にも利用してもらいやすい環境ができれば良いなと思います。&lt;/p&gt;

&lt;p&gt;サイトの静的化に興味がある方や既に運用しているがコマンドラインの操作が煩わしい、というような方は是非ご相談ください。&lt;/p&gt;

&lt;p&gt;2016/3/31 一部加筆・修正しました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>スタッフブログを静的サイトに移行しました</title>
      <link>http://staff.feedtailor.jp/2016/03/25/migration</link>
      <pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2016/03/25/migration</guid>
      <description>&lt;p&gt;久しぶりの投稿になります、 tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/2014/04/18/45/&#34;&gt;2014年4月の開設&lt;/a&gt; からずっと &lt;a href=&#34;https://ja.wordpress.org/&#34;&gt;WordPress&lt;/a&gt; で運用していた本スタッフブログを静的サイトに移行しました。&lt;/p&gt;

&lt;p&gt;昨年末から弊社が管理しているウェブサイトを徐々に静的サイトに移行していて、これで既に６サイト目。今回も静的サイトジェネレータ &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; を使用しています。&lt;/p&gt;

&lt;p&gt;既存のテーマを拝借して、&lt;a href=&#34;https://ja.wordpress.org/&#34;&gt;WordPress&lt;/a&gt; から記事をエクスポートしたり何やかんや手を入れてトータル３日くらいで設置しました。その後も少しずつ修正してますが。
ちなみに本サイトは &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; で運用。ソースコードも &lt;a href=&#34;https://github.com/feedtailor/StaffBlog&#34;&gt;弊社のGitHub&lt;/a&gt; で公開しています。&lt;/p&gt;

&lt;p&gt;というわけで、構築した時のノウハウとか課題とか、本サイトを更新しながら備忘録的に書いていく予定です。静的Webサイトに関する勉強会もやってますので、興味のある方は是非ご参加ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://connpass.com/event/26420/&#34;&gt;第2回 静的Webサイト 勉強会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://connpass.com/event/25507/&#34;&gt;第1回 静的Webサイト 勉強会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;静的サイトへの移行については「なんでそんな面倒臭いことを？」とか「わざわざ移行する必要ある？」とか意見はあると思いますが、好きなテキストエディタを使って &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown記法&lt;/a&gt; で書けるので個人的にはとても気に入ってます。&lt;/p&gt;

&lt;p&gt;もちろん動的サイトじゃないと無理って言うところもあるので、全部置き換えることはできないしその必要もありませんが、Markdownで記事を書いてサクッと投稿、みたいな運用をしたい方は移行を検討してみても良いのではないでしょうか。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>超聖域: iOSアプリのビルドツール</title>
      <link>http://staff.feedtailor.jp/2015/08/11/1083</link>
      <pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2015/08/11/1083</guid>
      <description>

&lt;p&gt;iOSアプリ開発担当のふじしげ((&lt;a href=&#34;https://twitter.com/nakiwo&#34;&gt;@nakiwo&lt;/a&gt;)です。&lt;/p&gt;

&lt;p&gt;7/1 から 7/7 にかけて社内で行われた&lt;a href=&#34;http://feedtailor.jp/wp/?p=14425&#34;&gt;「超聖域」&lt;/a&gt; の結果レポートをまとめました。&lt;/p&gt;

&lt;p&gt;結論からいいますと、紆余曲折あって最終的は&amp;#8221;DSLな設定ファイルを利用するRubyGemを作ってみよう&amp;#8221;という取り組みになっています。&lt;/p&gt;

&lt;p&gt;フィードテイラーのiOSアプリビルドには、当初itok作のMakefileが利用されていました。xcodebuildを初めとするXcode付属のコマンドラインツールを組み合わせて、ビルドからデプロイを行うものです。Xcodeツール類のバージョンアップに伴う修正や新しい要件に対応するためこのMakefileの改造に着手。気づけば自分がメンテナンス担当に。&lt;/p&gt;

&lt;p&gt;日々細かい改良を施すというよりは、必要な時に少しまとまった時間をとって最低限の改良を行うにとどまる事が多かったのですが、超聖域という事で今まで気になりつつも放置していた部分に大きく手を入れよう試みを行いました。&lt;/p&gt;

&lt;h2 id=&#34;これまでの状況&#34;&gt;これまでの状況&lt;/h2&gt;

&lt;p&gt;これまでの状況はざっくりと以下のような感じです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Makefileに改造が必要になる。iOS2時代から綿々と受け継がれる秘伝のタレのレシピを紐解く。&lt;/li&gt;
&lt;li&gt;そのうちMakefileで何をやってるか分かってきたので改造開始。&lt;/li&gt;
&lt;li&gt;Makefile内のシェル芸の理解にかかる時間が多くなってきたので、慣れているRubyベースでRakefile化 (シェル苦手)&lt;/li&gt;
&lt;li&gt;Rakefileをメンテナンス&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Xcodeビルドツール類の情報は、現在ではネット上に沢山あるので基本的に困る事はないと思います。ツールとしてまとまったものとしては、&lt;a href=&#34;https://github.com/nomad/shenzhen&#34;&gt;SHENZHEN&lt;/a&gt;や、新しいところでは&lt;a href=&#34;https://github.com/KrauseFx/fastlane&#34;&gt;fastlane&lt;/a&gt;が有名どころです。(これらのツールのコードを読むと色々参考になるのでオススメ)&lt;/p&gt;

&lt;p&gt;社内のRakefileでは、xcodebuildを直接触って動作確認しつつ、ネット上の各種情報や既存の実装を参考に必要なエッセンスを取り込むような事をしていました。&lt;/p&gt;

&lt;h2 id=&#34;fastlane&#34;&gt;fastlane&lt;/h2&gt;

&lt;p&gt;先にあげましたが、新しめのツールとして &lt;a href=&#34;https://github.com/KrauseFx/fastlane&#34;&gt;fastlane&lt;/a&gt;があります。iOSアプリ開発にまつわる様々なタスクをなんでも自動化してしまおうという壮大なプロジェクト。試してみる価値大では？という印象を受けました。&lt;/p&gt;

&lt;p&gt;超聖域は、自前ツールのメンテナンスをやめてfastlaneで既存のタスクを置き換えようという試みからスタートする事に。&lt;/p&gt;

&lt;p&gt;設定ファイルであるFastfileで各種ツールの組み合わせを柔軟にカスタマイズ可能で、これを極めて今後はこれ一本で！と勢い勇んで取り掛かりました。しかしいざやってみると細かい挙動を理解するのに一苦労。&lt;/p&gt;

&lt;p&gt;fastlaneはそれぞれ単体で利用可能なツール類を組み合わせて利用する仕組みになっています。細かい挙動を知るにはそれら単体ツールの挙動をよく知る必要が有ります。それに加えてfastlane自体の挙動もよく理解している必要があり、思ったより学習コストが高い印象を受けました。&lt;/p&gt;

&lt;p&gt;ドキュメントに記載されていない挙動を理解するためにfastlaneツール類のソースコードを読む事しばし。そのうちに色々知見が得られました。残念ながらfastlane自体を使いこなすにはいたりませんでしたが、得られた知見を元に元の社内ツールを改良するというアプローチに方向転換しました。&lt;/p&gt;

&lt;p&gt;(fastlane自体はやりたい事にうまくはまると良いツールだと思いますので今後も注目していきたいと思っています)&lt;/p&gt;

&lt;h2 id=&#34;gem化したコマンドラインツールへの置き換え&#34;&gt;Gem化したコマンドラインツールへの置き換え&lt;/h2&gt;

&lt;p&gt;社内Rakefileは必要最低限の機能しかない規模の小さいもので見通しは良い状態にあります。ただ、いくつか問題があったのでそれを潰していく事にしました。&lt;/p&gt;

&lt;p&gt;まず既存のRakefileで抱えていた問題点から。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1つのRakefileだけで構成。gitで管理してはいるものの、バージョン管理が曖昧な状態。&lt;/li&gt;
&lt;li&gt;Rakefile内に全ての必要なコードが書かれている。別途Gemを取り込むということができない構造&lt;/li&gt;
&lt;li&gt;Rakefileのタスクの挙動を変更するために別途YAMLの設定ファイルを利用している。Ruby DSLな設定ファイルが使えればもう少し柔軟な記述ができるのに..。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;問題点を解消するために以下のような構成に変更することにしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rakefileではなく、Gem化した専用コマンドツール化する。バージョン管理と依存Gemの取り込みが容易になる。&lt;/li&gt;
&lt;li&gt;設定ファイルはYAMLではなくDSL化した専用ファイルにする。設定ファイル内の記述が柔軟に。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここからはiOS周りの話ではなく、&amp;#8221;GemやRuby DSLを作ったことが無い人間によるコマンドラインツール作成&amp;#8221;、という内容になります。&lt;/p&gt;

&lt;p&gt;作ったコマンドは&amp;#8221;ftbuild&amp;#8221;と命名しました。(今の所一般公開予定はありません)&lt;/p&gt;

&lt;h2 id=&#34;gemの作成&#34;&gt;Gemの作成&lt;/h2&gt;

&lt;p&gt;bundlerでGemのひな形を作成することができるのでこれを利用。(&lt;a href=&#34;http://bundler.io/v1.10/bundle_gem.html&#34;&gt;&lt;code&gt;bundle gem&lt;/code&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;gempsec自体じっくり見るのは初めてでしたが、cocoapodsのpodspecと似た構造なのですんなり理解できました。&lt;/p&gt;

&lt;p&gt;(cocoapodsはRubyGemsやBundlerを真似て作られているので似ていて当然)&lt;/p&gt;

&lt;p&gt;Gem化する事で、ツールのバージョン管理と、依存Gemの取り込みが一般的な方法でできるようになりました。&lt;/p&gt;

&lt;p&gt;このGemは一般公開する予定が無いので、privateなgitリポジトリに置きます。&lt;/p&gt;

&lt;p&gt;利用する際は、bundlerのGemfileで以下のようにリポジトリを直接指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &amp;quot;ftbuild&amp;quot;, :git =&amp;gt; &#39;url/to/ftbuild.git&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にgemspecに依存Gemを追加。今回は以下のようなGemを利用しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://whatisthor.com&#34;&gt;Thor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;サブコマンドを持つコマンドラインインターフェースを簡単に作成できる。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/defunkt/colored&#34;&gt;colored&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ターミナルへのテキスト色付け。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/JEG2/highline&#34;&gt;highline&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ユーザとの対話。パスワード伏字機能アリ。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/supermarin/xcpretty&#34;&gt;xcpretty&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;xcodebuildの出力をいい感じに整形。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ckruse/CFPropertyList&#34;&gt;CFPropertyList&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;plistの操作。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/aws/aws-sdk-ruby&#34;&gt;aws-sdk-resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;s3の操作用。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あとは元のRakefileに実装していた諸々機能をThorベースでコマンド化していきます。&lt;/p&gt;

&lt;h2 id=&#34;dsl&#34;&gt;DSL&lt;/h2&gt;

&lt;p&gt;昨今の開発シーンでは、RubyベースのDSLを設定ファイルとして利用する事がよくあります。(Gemfile、Podfile、Rakefile、Fastfile、etc..)&lt;/p&gt;

&lt;p&gt;fastlaneのソースを読んでいる際、DSLの設定ファイルの取り扱いのコードが案外あっさりしている事がわかったので実装してみました。(参考にしたのは&lt;a href=&#34;https://github.com/KrauseFx/deliver/tree/d6dcdaf0bcc8c15befe25def1664ec0ae1a2f304/lib/deliver/deliverfile&#34;&gt;このあたり&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;基本はRubyで書かれた設定ファイルを読み込んでinstance_evalするだけです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;content = File.read(path)
self.instance_eval(content)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは上の例でselfとなっているオブジェクトに、設定項目に対応するメソッドを用意します。&lt;/p&gt;

&lt;p&gt;例えば設定ファイルに&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hogehoge &amp;quot;xyz&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という項目を作りたい場合は、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def hogehoge(val)
  # valを保存
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というメソッドを作って値を保存するなり好きなように料理します。&lt;/p&gt;

&lt;p&gt;単純な値設定のみの項目であれば、method_missing を実装して処理を共通化するとすっきりします。(&lt;a href=&#34;https://github.com/KrauseFx/deliver/blob/d6dcdaf0bcc8c15befe25def1664ec0ae1a2f304/lib/deliver/deliverfile/dsl.rb#L19-L61&#34;&gt;参考コード&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;ここまでの段階だけでも設定ファイル側では、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dir_path = &amp;quot;path_to_dir&amp;quot;

hogehoge dir_path + &amp;quot;_1&amp;quot;
hogehoge dir_path + &amp;quot;_2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のような記述が可能になり、YAMLの設定ファイルより記述力が格段に増します。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;fastlaneは要注目。&lt;/li&gt;
&lt;li&gt;fastlane配下の各種ツールは単体で使える。必要なものだけつまみ食いするのも有効。&lt;/li&gt;
&lt;li&gt;RubyGem・Ruby DSLの作成は思ったより敷居が低かった。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当初の作戦(fastlaneへの移行)とは違う方向になりましたが、結果的には社内ツールが利用・メンテナンス共にすっきりした状態に移行できました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>超聖域：JavaFXのGradleビルド</title>
      <link>http://staff.feedtailor.jp/2015/08/10/1013</link>
      <pubDate>Mon, 10 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2015/08/10/1013</guid>
      <description>

&lt;p&gt;営業兼開発の tamaoki (&lt;a href=&#34;https://twitter.com/t0shiya&#34;&gt;@t0shiya&lt;/a&gt;) です。&lt;/p&gt;

&lt;p&gt;7月1日〜7日まで弊社の９周年記念(?)として&lt;a href=&#34;http://feedtailor.jp/wp/?p=14425&#34;&gt;「超聖域」&lt;/a&gt;なるイベントが開催されました。&lt;/p&gt;

&lt;p&gt;「超聖域」っていうのは、期間中は通常業務をやらなくていいので自由に作りたいものを作ってねー、というもので、私は対外的な業務があるので100%開発とは行かなかったのですが、2日間くらいはがっつり開発できました。&lt;/p&gt;

&lt;p&gt;で、何をやったかというと以前から着手していた &lt;a href=&#34;http://www.syncnel.biz&#34;&gt;SYNCNEL&lt;/a&gt; のJavaFXアプリケーションのGradleビルドスクリプトを書いてました。&lt;/p&gt;

&lt;h1 id=&#34;javafx&#34;&gt;JavaFX&lt;/h1&gt;

&lt;p&gt;JavaFXとはJavaのGUIツールキットでJDK8からは標準で提供されています。&lt;/p&gt;

&lt;p&gt;SYNCNELでは以前からWindows専用アプリケーションをいくつかご提供していたのですが、個人的に「Macでも使いたい」とか「Java8の新機能（ラムダ式とか）を使ってみたい」との思いから（主に後者）、JavaFXでデスクトップアプリを作り始めました。&lt;/p&gt;

&lt;p&gt;JavaFXではSelf-Containedなアプリ（ルー語みたい？）、つまりJavaの実行環境を内包した単独実行できるアプリケーションを作る機能が用意されていて、比較的簡単にデスクトップアプリが作成できます。&lt;/p&gt;

&lt;p&gt;簡単とは言いましたが、はまるポイントは幾つもあったので、今回はその内のビルドスクリプトについてご紹介します。&lt;/p&gt;

&lt;h1 id=&#34;gradleビルドスクリプト&#34;&gt;Gradleビルドスクリプト&lt;/h1&gt;

&lt;p&gt;アプリ自体はコードが書ければできあがるんですが、それを公開するとなるといろいろやることがあります。&lt;/p&gt;

&lt;p&gt;一般の方に使っていただくにはインストーラを用意したり、コードにサインしたり、・・・・・・。&lt;/p&gt;

&lt;p&gt;JavaFXアプリをビルドするための方法は標準でOracleから提供されているんですが、これがなぜかAntのタスクで。&lt;/p&gt;

&lt;p&gt;既にあるGradleスクリプトから外部タスクとして実行する手もあったんですがなんか気持ちよくないので、Gradleのタスクとして直接実行するようにしました。&lt;/p&gt;

&lt;p&gt;JARファイル作成までは探せば情報があるんですが、その先がなくて、試行錯誤の末、できあがったのが以下の build.gradle です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import groovy.xml.NamespaceBuilder

apply plugin: &#39;java&#39;
apply plugin: &#39;idea&#39;

version = &#39;アプリのバージョン&#39;

def vender_name    = &#39;ベンダー名&#39;
def jar_name       = &#39;JARファイル名&#39;
def app_name       = &#39;アプリ名&#39;
def app_width      = &#39;アプリのウィンドウ幅&#39;
def app_height     = &#39;アプリのウィンドウ高さ&#39;
def app_main_class = &#39;JavaFXのアプリケーションクラス&#39;

configurations { antfx }

...

dependencies {
    // 環境変数からJDKのロケーションを取得
    antfx files(&amp;quot;${project.property(&#39;org.gradle.java.home&#39;)}/lib/ant-javafx.jar&amp;quot;)
    // 依存ライブラリ
    compile ... 
}

task fx_deploy(dependsOn: &#39;classes&#39;) &amp;lt;&amp;lt; {
    def jar_dir  = &amp;quot;${buildDir}/libs&amp;quot;
    def jar_file = &amp;quot;${jar_dir}/${jar_name}-${version}.jar&amp;quot;

    def fx = NamespaceBuilder.newInstance(ant, &#39;javafx:com.sun.javafx.tools.ant&#39;)
    ant.taskdef(
            resource: &#39;com/sun/javafx/tools/ant/antlib.xml&#39;,
            uri: &#39;javafx:com.sun.javafx.tools.ant&#39;,
            // src/main/deploy をクラスパスに追加
            classpath: &#39;src/main/deploy:&#39; + configurations.antfx.asPath)

    fx.application(
            id: jar_name,
            name: app_name,
            version: version,
            mainClass: app_main_class)

    copy {
        into jar_dir
        from configurations.runtime
    }

    fx.jar(destfile: jar_file) {
        application(refid: jar_name)
        fileset(dir: &amp;quot;${buildDir}/resources/main&amp;quot;)
        fileset(dir: &amp;quot;${buildDir}/classes/main&amp;quot;)
        resources {
            fileset(dir: jar_dir)
        }
    }

    fx.deploy(
            outdir: distsDir,
            outfile: jar_name,
            width: app_width,
            height: app_height,
            nativeBundles: &#39;all&#39;,
            verbose: true) {
        application(refid: jar_name)
        resources {
            fileset(dir: jar_dir)
        }
        info(title: app_name, vendor: vender_name)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アプリやOSX用dmgのアイコン等のプラットフォーム固有のファイルは src/main/deploy/package/(macosx|windows) 以下に置いてください。&lt;/p&gt;

&lt;p&gt;後はタスクを実行するだけで、OSXならdmgファイル、Windowsならmsiファイル(WIXが必要) まで出来上がり。署名すれば、MacAppStore にも出せます。&lt;/p&gt;

&lt;p&gt;Androidアプリをデスクトップに移植とかしたい人はJavaFXを検討するのもいいかもしれません。&lt;/p&gt;

&lt;p&gt;ということで、ビルドしたアプリケーションは近日中に SYNCNEL Content Manager（仮名）としてリリース予定です！！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>顔写真にTwitterのアイコンをかぶせる iMasks を公開しました</title>
      <link>http://staff.feedtailor.jp/2015/08/06/1041</link>
      <pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2015/08/06/1041</guid>
      <description>

&lt;p&gt;聖域ブログのまっただ中を失礼します。暑さに負けてばかりの itok です。&lt;/p&gt;

&lt;p&gt;世間は夏休みですね。同窓会とかオフ会とかそんな機会も多いのではないでしょうか。&lt;/p&gt;

&lt;p&gt;せっかくみんな集まったから集合写真を、、、せっかく写真撮ったからシェアしよう、、、でもこれをシェアするのはプライバシーが・・・ってこと、ありませんか？&lt;/p&gt;

&lt;p&gt;そんなときにはこの新作アプリ iMasks です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/jp/app/id1013687357&amp;mt=8&#34; target=_blank&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/3a32a3262646918bc6b4c57662b6c293.png&#34; alt=&#34;Icon-60@2x&#34; width=&#34;120&#34; height=&#34;120&#34; class=&#34;alignnone size-full wp-image-1042&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;iMasksは写真に写っている顔にTwitterアイコンをかぶせるためのアプリです。みんなで撮った写真をSNSにシェアしたいけどプライバシーには考慮したい、そんな場合にぜひお使いください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/jp/app/id1013687357&amp;mt=8&#34; target=_blank&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2014/04/Download_on_the_App_Store_Badge_JP_135x40_1004.png&#34; alt=&#34;AppStoreからダウンロード&#34; width=&#34;135&#34; height=&#34;40&#34; class=&#34;alignnone size-full wp-image-58&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;基本的な使い方&#34;&gt;基本的な使い方&lt;/h3&gt;

&lt;p&gt;起動するとフォロー・フォロワーのアイコン一覧が表示されます（Twitterと連携しなくても使えます）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.05.45.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.05.45.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.05.45&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1045&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;写真を選択すると、写真上の顔を自動認識して緑の枠が付きます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.05.55.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.05.55.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.05.55&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1046&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下のアイコン一覧から、長押し + ドラッグでアイコンを顔に持っていき、枠が赤くなったときにはなすと&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.06.02.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.06.02.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.06.02&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1047&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;顔の部分にぴたっとアイコンがはまりました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.06.06.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.06.06.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.06.06&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1048&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitterのアイコンがない場合（あるいはTwitterと連携しない場合）はツールバー右のiMasksアイコンをドラッグしましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.06.18.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.06.18.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.06.18&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1050&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちらも顔にぴたっとね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.06.201.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.06.201.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.06.20&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1051&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;さて、もちろん顔認識は完璧ではありませんので、すべての顔を認識できるわけではありません。でも大丈夫。顔以外の場所にも自由に配置できますし、自由に動かせます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.06.33.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.06.33.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.06.33&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1052&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;アイコンを外したい場合は、タップしてください。削除メニューが表示されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.11.58.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.11.58.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.11.58&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1053&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;保存する場合は左上のプレビューボタンをタップ。完成（顔認識の枠は消えています）をプレビューして保存してください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.06.46.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.06.46.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.06.46&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1054&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;保存後、シェアなどが可能になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.13.44.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.13.44.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.13.44&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1055&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ツールバー左のアカウント名をタップするとフォロー・フォロワー・リストの切り替えができます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.07.08.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.07.08.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.07.08&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1056&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;基本操作はこれで以上です。簡単ですね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/jp/app/id1013687357&amp;mt=8&#34; target=_blank&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2014/04/Download_on_the_App_Store_Badge_JP_135x40_1004.png&#34; alt=&#34;AppStoreからダウンロード&#34; width=&#34;135&#34; height=&#34;40&#34; class=&#34;alignnone size-full wp-image-58&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;写真エクステンション対応&#34;&gt;写真エクステンション対応&lt;/h3&gt;

&lt;p&gt;さて、この iMasks。iOS8でのエクステンションに対応していまして、なんと標準の写真アプリから直接使うことができます。&lt;/p&gt;

&lt;p&gt;写真アプリで写真を選択し、編集画面へ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.07.32.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.07.32.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.07.32&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1057&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;その他ボタンをタップ。まだ何も使えないですので、もう一度「その他」選択。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.07.36.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.07.36.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.07.36&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1058&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;エクステンションで使えるアプリの一覧が表示されますのでiMasksをオンにします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.07.41.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.07.41.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.07.41&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1059&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;するとiMasksが使えるようになりました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.07.45.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.07.45.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.07.45&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1060&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;写真アプリ内でも基本的な操作は同じです。ただ、ここで編集したものは&lt;strong&gt;オリジナルの写真を上書き&lt;/strong&gt;し、上書き後には取り消せませんので注意してください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.07.55.png&#34;&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2015/08/20150806_iOS-Simulator-Screen-Shot-2015.08.06-11.07.55.png&#34; alt=&#34;20150806_iOS Simulator Screen Shot 2015.08.06 11.07.55&#34; width=&#34;337&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-1061&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/jp/app/id1013687357&amp;mt=8&#34; target=_blank&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2014/04/Download_on_the_App_Store_Badge_JP_135x40_1004.png&#34; alt=&#34;AppStoreからダウンロード&#34; width=&#34;135&#34; height=&#34;40&#34; class=&#34;alignnone size-full wp-image-58&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ドラッグ &amp;amp; ドロップで簡単に編集できますので、こういう写真もあっという間に作れます。&lt;/p&gt;

&lt;div id=&#34;fb-root&#34;&gt;
&lt;/div&gt;

&lt;div class=&#34;fb-post&#34; data-href=&#34;https://www.facebook.com/photo.php?fbid=911727465553891&amp;set=a.909163625810275.1073741837.100001499392456&amp;type=1&#34; data-width=&#34;500&#34;&gt;
  &lt;div class=&#34;fb-xfbml-parse-ignore&#34;&gt;
    &lt;blockquote cite=&#34;https://www.facebook.com/photo.php?fbid=911727465553891&amp;set=a.909163625810275.1073741837.100001499392456&amp;type=1&#34;&gt;
      &amp;#x30a4;&amp;#x30e9;&amp;#x30a4;&amp;#x30b6;&amp;#x5973;&amp;#x53f2;&amp;#x3068;#Picport&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;無料です（大事なことですが&lt;strong&gt;無料&lt;/strong&gt;です）のでどうぞお試しくださいませ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/jp/app/id1013687357&amp;mt=8&#34; target=_blank&gt;&lt;img src=&#34;http://staff.feedtailor.jp/images/2014/04/Download_on_the_App_Store_Badge_JP_135x40_1004.png&#34; alt=&#34;AppStoreからダウンロード&#34; width=&#34;135&#34; height=&#34;40&#34; class=&#34;alignnone size-full wp-image-58&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>超聖域：Cocos2d-xでスライドパズルを作った</title>
      <link>http://staff.feedtailor.jp/2015/08/05/1003</link>
      <pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2015/08/05/1003</guid>
      <description>

&lt;p&gt;ブログを投稿するのは初めてになります。フィードテイラーでは今一番新入りのアンコウテルオ（通称アンテル）です。&lt;/p&gt;

&lt;p&gt;さて、入社して間もなく&lt;a href=&#34;http://feedtailor.jp/wp/?p=14425&#34;&gt;社内1週間ハッカソン「超聖域」を行うことにしました (7月1日 〜 7月7日)&lt;/a&gt;というイベントが開催されました。&lt;/p&gt;

&lt;p&gt;タイトルにもある通り、私はスライドパズルというカジュアルゲームを作ってみました。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;作ったもの-スライドパズル&#34;&gt;作ったもの -&amp;gt; スライドパズル&lt;/h2&gt;

&lt;p&gt;スライドパズルって何？って方はGoogle画像検索してもらえれば「あーこれね！」ってなるんじゃないでしょうか。そうです、よくお土産物屋なんかで見かけるパズルの玩具ですね。15パズルとも呼ばれます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.google.co.jp/search?q=%E3%82%B9%E3%83%A9%E3%82%A4%E3%83%89%E3%83%91%E3%82%BA%E3%83%AB&amp;amp;es_sm=91&amp;amp;qscrl=1&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ved=0CAcQ_AUoAWoVChMI17uC9KD_xgIVgaSUCh2qiQSV&amp;amp;biw=1609&amp;amp;bih=1318&#34;&gt;スライドパズル &amp;#8211; Google 検索&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;で、少々殺風景ながら実際の画面がこんな感じ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/07/IMG_3223.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-1008&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/IMG_3223-168x300.png&#34; alt=&#34;IMG_3223&#34; width=&#34;168&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;デバッグ表示なんかも出たまんまでありますが、デモということでご了承ください。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;使ったもの-cocos2d-x-c&#34;&gt;使ったもの -&amp;gt; Cocos2d-x(C++)&lt;/h2&gt;

&lt;p&gt;Cocos2d-xとは、クロスプラットフォームでの2Dゲーム開発に特化したゲーム開発フレームワークです。国内でもモンストなど数々のヒットゲームアプリでも使用されています。&lt;/p&gt;

&lt;p&gt;クロスプラットフォーム対応ということで、iOS、AndroidなどOSの垣根を越えた開発が容易なため、個人で開発されてる方々にも人気が高い印象。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jp.cocos.com/&#34;&gt;Cocos2d-x: オープンソースゲーム開発プラットフォーム&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このCocos2d-x、言語としては以下の言語で開発できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Javascript&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lua&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はC++で開発しました。理由はC++を書いてみたかった！というだけです。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;個人的な超聖域に対してのコンセプト&#34;&gt;個人的な超聖域に対してのコンセプト&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;――未習得技術を使って一週間（5日間）でどこまでできるか？&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;実際まったく新しいことを、これだけの期間取って1から習得（学習）するというのは、最近ではなかなか無かったので、久しぶりにどこまで出来るか試してみたいという気持ちがありました。&lt;/p&gt;

&lt;p&gt;ちなみに私は普段Webエンジニアとして働いています。なのでC++を触る機会は普段0です。&lt;/p&gt;

&lt;p&gt;もちろん基本的な文法はWebの言語にも通じるところは多々ありますが、画像を表示-&amp;gt;アニメーション-&amp;gt;その結果を判定して……など、普段Webのバックエンドの開発とは実装する内容が違うので、まっさらな感覚です。&lt;/p&gt;

&lt;p&gt;果たして動くデモまで作ることが出来るのか……という不安を抱えながらでしたが、最低限デモ出来るまでに作ることができました。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;成果物&#34;&gt;成果物&lt;/h2&gt;

&lt;p&gt;ではどんな感じで出来上がったかというのがこちら。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/07/IMG_3222.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-1010&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/IMG_3222-168x300.png&#34; alt=&#34;IMG_3222&#34; width=&#34;168&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一応それっぽく形だけタイトル画面も用意。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/07/IMG_3223.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-1008&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/IMG_3223-168x300.png&#34; alt=&#34;IMG_3223&#34; width=&#34;168&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;隣り合ったマスが空いているパネルをタップすると、空いている方向へスライドアニメーション。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/07/IMG_3224.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-1011&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/IMG_3224-168x300.png&#34; alt=&#34;IMG_3224&#34; width=&#34;168&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「15」を動かせば完成というクリア間近の状態。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/07/IMG_3225.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-1012&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/IMG_3225-168x300.png&#34; alt=&#34;IMG_3225&#34; width=&#34;168&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;すべて然るべき位置に揃えると「16」のパネルが埋まってクリア表示。&lt;/p&gt;

&lt;p&gt;この後もう一度プレイする or タイトル画面に戻るというだけ。お土産物の玩具の要件を満たしたくらいの感じですね。&lt;/p&gt;

&lt;p&gt;やはりデジタルなゲームとして作る以上はちょっと寂しいので、タイマーを付けたり、パズルのバリエーションを増やしたり、あとはもっと見た目をリッチにしたりと色々やり残した感はあります。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;拘ったポイントとしては、初期のパネル配置。これは完全にランダムで配置してしまうとクリアできない詰みの状態が発生しまので、ちゃんとパネルが揃った状態で配置してから、辻褄が合うようにシャッフルしています。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;さいごに&#34;&gt;さいごに&lt;/h2&gt;

&lt;p&gt;一週間まるまる「業務以外で何してもいいよ」というのは、楽しみな反面いざ直面すると、何をするかの選択など、なかなかに戸惑うこともありました。&lt;/p&gt;

&lt;p&gt;今となっては、ここはもっと準備しておけば！といった反省点もありますが、新しいことを1からやってみてリフレッシュにもなったし、自分の幅も少しは広がったと感じています。&lt;/p&gt;

&lt;p&gt;そして、こういった取り組みを業務の時間を使ってチャレンジさせてもらえる環境が非常にありがたいと思います。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>超聖域: Unityでゲームを作ろうとした話</title>
      <link>http://staff.feedtailor.jp/2015/08/03/965</link>
      <pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://staff.feedtailor.jp/2015/08/03/965</guid>
      <description>

&lt;p&gt;フィードテイラーの赤魔道士&lt;a href=&#34;http://twitter.com/sumihiro&#34; target=&#34;_blank&#34;&gt;すみひろ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;先日、フィードテイラー社内で「&lt;a href=&#34;http://feedtailor.jp/wp/?p=14540&#34; target=&#34;_blank&#34;&gt;超聖域！1週間(2015/07/01〜2015/07/07)ぶっ通しでハッカソン&lt;/a&gt;」というイベントが開催されました。&lt;/p&gt;

&lt;p&gt;各スタッフからレポートが上がっていますが、私からもやってみたことのレポートを報告します。&lt;/p&gt;

&lt;h2 id=&#34;何をしたか&#34;&gt;何をしたか&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://japan.unity3d.com/unity/&#34; target=&#34;_blank&#34;&gt;Unity&lt;/a&gt;を使用してゲーム作りに挑戦してみました。&lt;/p&gt;

&lt;p&gt;ちなみに今までに本格的なゲーム作成の経験はありません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://japan.unity3d.com/unity/&#34; target=&#34;_blank&#34;&gt;Unity&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://japan.unity3d.com/unity/&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-966&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/F8EE9162-5D47-48DC-B63D-47FEC8D17C54-300x200.png&#34; alt=&#34;F8EE9162-5D47-48DC-B63D-47FEC8D17C54&#34; width=&#34;300&#34; height=&#34;200&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://japan.unity3d.com/unity/&#34;&gt;http://japan.unity3d.com/unity/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;なぜか&#34;&gt;なぜか&lt;/h2&gt;

&lt;p&gt;フィードテイラーにおける私の普段のメインの業務はiOSのアプリ作成です。&lt;/p&gt;

&lt;p&gt;アプリといえば色々なジャンンルがありますが、担当するアプリの多くはユーティリティや仕事効率化のジャンルに含まれるアプリです。&lt;/p&gt;

&lt;p&gt;例えば「玄関で降水確率をお知らせする&lt;a href=&#34;http://sorayoujin.feedtailor.jp/&#34; target=&#34;_blank&#34;&gt;そら用心&lt;/a&gt;」や「勝手にTwitterのタイムラインから画像を集めてくる&lt;a href=&#34;http://feedtailor.jp/wp/?p=13172&#34; target=&#34;_blank&#34;&gt;Nyatter&lt;/a&gt;」などを担当しました。&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;玄関に行けば降水確率を声でお知らせするiPhoneアプリ「そら用心」をリリースしました！&#34; href=&#34;http://staff.feedtailor.jp/2014/12/02/647&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-668&#34; src=&#34;http://staff.feedtailor.jp/images/2014/12/sorabeacon_for_press-300x300.jpg&#34; alt=&#34;そらビーコン&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;br /&gt; 玄関に行けば降水確率を声でお知らせするiPhoneアプリ「そら用心」をリリースしました！&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[&lt;img class=&#34;alignnone size-medium wp-image-985&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/3ee82baae43444b9c60393c472b24bb9-300x120.png&#34; alt=&#34;スクリーンショット 2015-07-28 16.59.21&#34; width=&#34;300&#34; height=&#34;120&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Twitterでニヤニヤしよう!!画像収集支援iPhoneアプリ「Nyatter(ニヤッター)」を公開します](&lt;a href=&#34;http://feedtailor.jp/wp/?p=13172&#34;&gt;http://feedtailor.jp/wp/?p=13172&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;このようなアプリでキモになってくるのは「バックグラウンドで自動的に処理して云々」や「サーバとの連携が云々」であって、「リアルタイムにユーザーの操作を受け付ける」という部分ではありません。&lt;/p&gt;

&lt;p&gt;常日頃から「目の前の問題を殴る道具はたくさん持っている方がいい」と考えている私としては、新しいものに挑戦する良い機会と判断してゲーム作りに取り組みました。&lt;/p&gt;

&lt;h2 id=&#34;何を作ろうとしたか&#34;&gt;何を作ろうとしたか&lt;/h2&gt;

&lt;p&gt;まず、&lt;a href=&#34;https://www.ingress.com/&#34; target=&#34;_blank&#34;&gt;Ingress&lt;/a&gt;というゲームが流行っておりまして、私も流行りに乗っかってハマっています。（陣営は緑。レベル15です。）&lt;/p&gt;

&lt;p&gt;Ingressについてのわかりやすい解説は、実は三菱東京UFJ銀行のサイトに掲載されていますので、そちらをご確認いただければ大体の仕組みや雰囲気をご理解いただけるのではないでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bk.mufg.jp/ingress/&#34; target=&#34;_blank&#34;&gt;BTMU × Ingress タイアップ | 三菱東京UFJ銀行&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bk.mufg.jp/ingress/&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-967&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/92BD6BC5-1CFF-4307-8E26-F20909546F56-300x189.png&#34; alt=&#34;92BD6BC5-1CFF-4307-8E26-F20909546F56&#34; width=&#34;300&#34; height=&#34;189&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bk.mufg.jp/ingress/&#34;&gt;http://www.bk.mufg.jp/ingress/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;詳しい解説は省きますが、ゲームの中で3個の「ポータル（拠点）」を「リンク」でつないで三角形「コントロールフィールド（通称、CF）」を作るという作業があります。&lt;/p&gt;

&lt;p&gt;基本ルールの中にあるこの作業がほどよい感じに複雑で、それを詰将棋のようにお題を解く「詰イングレス」という遊び方があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://plus.google.com/communities/109394012439402992158/stream/c2801c8e-c06a-464d-bd2c-5b838d316e08&#34;&gt;詰イングレス&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://plus.google.com/communities/109394012439402992158/stream/c2801c8e-c06a-464d-bd2c-5b838d316e08&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-968&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/b8a4f8b2d3a67d0989db45709febd095-300x168.png&#34; alt=&#34;スクリーンショット 2015-07-28 11.22.41&#34; width=&#34;300&#34; height=&#34;168&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://plus.google.com/communities/109394012439402992158/stream/c2801c8e-c06a-464d-bd2c-5b838d316e08&#34;&gt;https://plus.google.com/communities/109394012439402992158/stream/c2801c8e-c06a-464d-bd2c-5b838d316e08&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「限られたポータルでいくつのCFを効率良く作るか」を競うゲームは頭の体操にも良く、一部のエージェント（Ingressのプレイヤー）から大人気のようです。&lt;/p&gt;

&lt;p&gt;その詰イングレスを存分に遊べるゲーム「詰めCF」を作ってみました。&lt;/p&gt;

&lt;h2 id=&#34;どうなったか&#34;&gt;どうなったか&lt;/h2&gt;

&lt;p&gt;「お題を選択してCFを作る」という部分までなんとか実装したに留まってしまいました。&lt;/p&gt;

&lt;p&gt;もう少し作り込めると期待して開始したのですが、なかなか思い通りには進まず。&lt;/p&gt;

&lt;p&gt;スクリーンショットだけ公開しておきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/07/801d466d45e2aa1bf15e0d9a29e159c3.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-969&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/801d466d45e2aa1bf15e0d9a29e159c3-152x300.png&#34; alt=&#34;スクリーンショット 2015-07-28 11.34.45&#34; width=&#34;152&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/07/dacc3943d6778772efcfa50ca36ef080.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-970&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/dacc3943d6778772efcfa50ca36ef080-151x300.png&#34; alt=&#34;スクリーンショット 2015-07-28 11.47.08&#34; width=&#34;151&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/07/4f228dfe4b4c572400d2071cd305f3a4.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-971&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/4f228dfe4b4c572400d2071cd305f3a4-151x300.png&#34; alt=&#34;スクリーンショット 2015-07-28 11.37.25&#34; width=&#34;151&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;レベルを選択すればポータルが生えたフィールドが現れる。ポータルを二つ選択するとリンクが張られ、リンク3本に囲まれるとフィールドが出現します。&lt;/p&gt;

&lt;p&gt;スコアはフィールドの総面積で決定されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/07/b35e69985a32bb494e5df1e991970e5d.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-972&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/b35e69985a32bb494e5df1e991970e5d-151x300.png&#34; alt=&#34;スクリーンショット 2015-07-28 15.32.14&#34; width=&#34;151&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;エディットモードもあり、ユーザーの皆さんが自由にお題を作って公開できるようにと考えていたのですが、そこまでの実装は期間内に追いつきませんでした。&lt;/p&gt;

&lt;p&gt;結果的には自分に対して惨敗となってしまいましたが、たくさんの知見を得ることができました。新しい環境って難しいけど楽しいものですね。&lt;/p&gt;

&lt;p&gt;よって、ここからが本題。&lt;/p&gt;

&lt;p&gt;以下に、詰めCFを作るにあたって参考にしたサイトやツールなどをご紹介します。&lt;/p&gt;

&lt;h2 id=&#34;何を使ったか&#34;&gt;何を使ったか&lt;/h2&gt;

&lt;p&gt;まずは&lt;a href=&#34;http://japan.unity3d.com/unity/&#34;&gt;Unity&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;ユーザー登録は必要ですが、基本的には無料で使用できます。&lt;/p&gt;

&lt;p&gt;無料のライセンスは有料版のProライセンスに機能の違いがあるのに加え、以下の条件で提供されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://japan.unity3d.com/company/legal/eula&#34;&gt;http://japan.unity3d.com/company/legal/eula&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;組織規模による Unity 無料版の使用制限&lt;/p&gt;

&lt;p&gt;各プラットフォーム向けの無料アドオン製品も含む、Unity Free(以下、「Unity 無料版」)のライセンスは、直前会計年度の総収益が US$100,000 を超える事業体、または組織全体の直前会計年度の総予算が US$100,000 を超える教育機関、学校機関、非営利団体、政府組織には許諾されず、それらの事業体または組織による Unity 無料版の使用は認められません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一番の注意点は「直前会計年度の総収益が US$100,000 を超える事業体」という条件でしょうか。ベンチャー企業に対する「この条件を超えるまでは無料で、超えたら払ってね」というメッセージのようにも読めます。&lt;/p&gt;

&lt;h3 id=&#34;アセット&#34;&gt;アセット&lt;/h3&gt;

&lt;p&gt;Unityのプロジェクト内で使用できるライブラリをアセットと呼びます。アセットは &lt;a href=&#34;https://www.assetstore.unity3d.com/jp/&#34; target=&#34;_blank&#34;&gt;Asset Store&lt;/a&gt;で販売、または無料で配布され、3Dモデルやオーディオ素材だけでなく、外部サービスとの連携のためのSDKやエディタを拡張するツールなどまで取り扱われています。&lt;/p&gt;

&lt;p&gt;また、GitHubなどで無料で公開されている場合もあります。このようなアセットもプロジェクチにインポートしようすることもできます。&lt;/p&gt;

&lt;p&gt;今回のプロジェクトで使用したアセットをご紹介します。&lt;/p&gt;

&lt;h4 id=&#34;a-href-https-www-assetstore-unity3d-com-jp-content-710-target-blank-json-object-a&#34;&gt;&lt;a href=&#34;https://www.assetstore.unity3d.com/jp/#!/content/710&#34; target=&#34;_blank&#34;&gt;JSON Object&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/07/2704CFF9-ABE8-44D7-A657-77BA35AB353C.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-973&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/2704CFF9-ABE8-44D7-A657-77BA35AB353C-300x282.png&#34; alt=&#34;2704CFF9-ABE8-44D7-A657-77BA35AB353C&#34; width=&#34;300&#34; height=&#34;282&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.assetstore.unity3d.com/jp/#!/content/710&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.assetstore.unity3d.com/jp/#!/content/710&#34;&gt;https://www.assetstore.unity3d.com/jp/#!/content/710&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JSONのパーサ。&lt;/p&gt;

&lt;p&gt;今回はステージのデータをJSONで用意したので、それの読み書きに使用しました。&lt;/p&gt;

&lt;p&gt;JSONの文字列からJSONObjectを作成します。JSONObjectからはさらにJSONObject、または数値、文字列が取得できます。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;// JSONのテキストからJSONObjectを作成する&lt;/p&gt;

&lt;p&gt;JSONObject json = new JSONObject(jsonText);&lt;/p&gt;

&lt;p&gt;// 型によって取得できるものが異なる&lt;/p&gt;

&lt;p&gt;JSONObject stage = json.GetField(&amp;#8220;stage&amp;#8221;);&lt;/p&gt;

&lt;p&gt;string title = (string)json.GetField(&amp;#8220;title&amp;#8221;).str;&lt;/p&gt;

&lt;p&gt;int count = (int)json.GetField(&amp;#8220;count&amp;#8221;).n;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;a-href-https-github-com-naichilab-unity-fademanager-blob-master-readme-ja-md-target-blank-unity-fademanager-a&#34;&gt;&lt;a href=&#34;https://github.com/naichilab/Unity-FadeManager/blob/master/README.ja.md&#34; target=&#34;_blank&#34;&gt;Unity-FadeManager&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/naichilab/Unity-FadeManager/blob/master/README.ja.md&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-974&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/BB54CCBD-BE6F-4690-AA07-3862AD6F7B5B-300x165.png&#34; alt=&#34;BB54CCBD-BE6F-4690-AA07-3862AD6F7B5B&#34; width=&#34;300&#34; height=&#34;165&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/naichilab/Unity-FadeManager/blob/master/README.ja.md&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/naichilab/Unity-FadeManager/blob/master/README.ja.md&#34;&gt;https://github.com/naichilab/Unity-FadeManager/blob/master/README.ja.md&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;シーンの切り替えをフェードイン、フェードアウトで行うアセット。&lt;/p&gt;

&lt;p&gt;メニュー画面からゲーム画面に切り替える場面で使用しました。パッと瞬間的に画面が切り替わるとユーザは面食らってしまい安く感じてしまいますが、フェードイン、フェードアウトを使うだけでグッと「それっぽく」なりました。&lt;/p&gt;

&lt;p&gt;フェードイン、フェードアウトをさせるときはこのように書きます。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;// シーンの名前とフェードする秒数を渡す&lt;/p&gt;

&lt;p&gt;FadeManager.Instance.LoadLevel (&amp;#8220;Scene1&amp;#8243;, 2.0f);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;a-href-http-itween-pixelplacement-com-index-php-target-blank-itween-a&#34;&gt;&lt;a href=&#34;http://itween.pixelplacement.com/index.php&#34; target=&#34;_blank&#34;&gt;iTween&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://itween.pixelplacement.com/index.php&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-975&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/E689A6F1-8051-4BF0-9A54-7F58FD64E6DF-300x225.png&#34; alt=&#34;E689A6F1-8051-4BF0-9A54-7F58FD64E6DF&#34; width=&#34;300&#34; height=&#34;225&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://itween.pixelplacement.com/index.php&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://itween.pixelplacement.com/index.php&#34;&gt;http://itween.pixelplacement.com/index.php&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;定番のアセット。「ここからここへ滑らかに動かす」ような処理を簡単に書くことができるようになるアセットです。&lt;/p&gt;

&lt;p&gt;リンクが伸びていく処理で使用されています。リンクにはこのようなコードを書きました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;void Start () {&lt;/p&gt;

&lt;p&gt;string easeType = &amp;#8220;easeInOutExpo&amp;#8221;;&lt;/p&gt;

&lt;p&gt;float time = 0.5f;&lt;/p&gt;

&lt;p&gt;// 起点から終点まで伸びる&lt;/p&gt;

&lt;p&gt;// 移動&lt;/p&gt;

&lt;p&gt;Vector3 target = transform.position; // 本来あるべき位置&lt;/p&gt;

&lt;p&gt;Vector3 start = FirstPortal.transform.position; // リンク元の位置&lt;/p&gt;

&lt;p&gt;transform.position = start;&lt;/p&gt;

&lt;p&gt;iTween.MoveTo(gameObject,iTween.Hash(&amp;#8220;x&amp;#8221;,target.x, &amp;#8220;y&amp;#8221;, target.y, &amp;#8220;z&amp;#8221;, target.z,&amp;#8221;easeType&amp;#8221;,easeType,&amp;#8221;time&amp;#8221;,time));&lt;/p&gt;

&lt;p&gt;// 長さ&lt;/p&gt;

&lt;p&gt;float scale = transform.localScale.x; // 本来の長さ&lt;/p&gt;

&lt;p&gt;transform.localScale = new Vector3(0f,transform.localScale.y,transform.localScale.z); // 長さを0に&lt;/p&gt;

&lt;p&gt;iTween.ScaleTo(gameObject,iTween.Hash(&amp;#8220;x&amp;#8221;,scale,&amp;#8221;easeType&amp;#8221;,easeType,&amp;#8221;time&amp;#8221;,time));&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最終的には2個のポータル間の中心に配置され、長さはホータル間の距離になるので、最初に片方のポータルの位置に長さ0の状態で配置し、長さと位置が同時に変わることで「伸びていく」ように見せることができました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://itween.pixelplacement.com/documentation.php&#34; target=&#34;_blank&#34;&gt;ドキュメント&lt;/a&gt;を見ると様々操作が簡単にできることがわかります。&lt;/p&gt;

&lt;h4 id=&#34;a-href-http-www-protoolsforunity3d-com-prototype-target-blank-prototype-a&#34;&gt;&lt;a href=&#34;http://www.protoolsforunity3d.com/prototype/&#34; target=&#34;_blank&#34;&gt;Prototype&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://www.protoolsforunity3d.com/prototype/&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-976&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/D6592C9B-0E7C-4DA1-978F-AE9E86B29AD9-300x168.png&#34; alt=&#34;D6592C9B-0E7C-4DA1-978F-AE9E86B29AD9&#34; width=&#34;300&#34; height=&#34;168&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.protoolsforunity3d.com/prototype/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.protoolsforunity3d.com/prototype/&#34;&gt;http://www.protoolsforunity3d.com/prototype/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;プロトタイプを簡単に作成できることで有名なアセットです。&lt;/p&gt;

&lt;p&gt;通常ならば&lt;a href=&#34;https://www.blender.org/features/2-75/&#34; target=&#34;_blank&#34;&gt;Blender&lt;/a&gt;などを使って作成する3Dオブジェクトを簡単な設定で作ることができます。&lt;/p&gt;

&lt;p&gt;もちろん、細かな自由な形の3Dオブジェクトを作るにはBlenderなどが必要ですが、Prototypeではメッシュの頂点数を自由に設定することができるので、変形させることも簡単になっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/07/1f64bd9842c29bc6fe3b120d186a7bfd.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-977&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/1f64bd9842c29bc6fe3b120d186a7bfd-300x220.png&#34; alt=&#34;スクリーンショット 2015-07-28 14.27.57&#34; width=&#34;300&#34; height=&#34;220&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ポータルやリンク、また床などをこのアセットを使用して作成しました。&lt;/p&gt;

&lt;h4 id=&#34;a-href-https-ilih-ru-unity-assets-uiwidgets-target-blank-new-ui-widgets-a&#34;&gt;&lt;a href=&#34;https://ilih.ru/unity-assets/UIWidgets/&#34; target=&#34;_blank&#34;&gt;New UI Widgets&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://ilih.ru/unity-assets/UIWidgets/&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-978&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/01533F3D-5D2F-454C-808F-6694F1935CAD-300x159.png&#34; alt=&#34;01533F3D-5D2F-454C-808F-6694F1935CAD&#34; width=&#34;300&#34; height=&#34;159&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ilih.ru/unity-assets/UIWidgets/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://ilih.ru/unity-assets/UIWidgets/&#34;&gt;https://ilih.ru/unity-assets/UIWidgets/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;標準のUIパーツでは作ることが難しい複雑なUIを作るアセットです。&lt;/p&gt;

&lt;p&gt;コンボボックス、リストビュー、プログレスバー、スピナー、タブ、ツールチップ、通知、ドラッグできるウインドウなどなど多彩なパーツを含み、またそれぞれのパーツのリデザインも簡単にできることがウリです。&lt;/p&gt;

&lt;p&gt;特に使いたかったのはリストビューです。動的に数が変わるアイテムの一覧を出そうとすると標準のUIではうまくできず、こちらを利用しました。&lt;/p&gt;

&lt;p&gt;iOSのUITableViewのようにできればベストでしたが、そこまではできませんでした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://staff.feedtailor.jp/images/2015/07/dacc3943d6778772efcfa50ca36ef0801.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-979&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/dacc3943d6778772efcfa50ca36ef0801-151x300.png&#34; alt=&#34;スクリーンショット 2015-07-28 11.47.08&#34; width=&#34;151&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回は結局ここでしか使わなかったんですけどね…&lt;/p&gt;

&lt;h3 id=&#34;エディタ&#34;&gt;エディタ&lt;/h3&gt;

&lt;h4 id=&#34;a-href-https-code-visualstudio-com-target-blank-visual-studio-code-a&#34;&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-980&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/7FFA3930-F64A-43F5-83E0-22EDBEB41B4F-300x198.png&#34; alt=&#34;7FFA3930-F64A-43F5-83E0-22EDBEB41B4F&#34; width=&#34;300&#34; height=&#34;198&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unityには標準で&lt;a href=&#34;http://docs.unity3d.com/ja/current/Manual/MonoDevelop.html&#34; target=&#34;_blank&#34;&gt;MonoDevelop&lt;/a&gt;というIDEが入っています。しかし、このMonoDevelopがMacの日本語環境下ではとても使いづらい…具体的にはデフォルトの設定では日本語が正しく入力できなかったりします。&lt;/p&gt;

&lt;p&gt;そのため、開発者は&lt;a href=&#34;http://www.sublimetext.com/3&#34; target=&#34;_blank&#34;&gt;Sublime Text 3&lt;/a&gt;などのエディタを使用してコードを書くのですが、超聖域が始まる少し前にリリースされた&lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;Visual Studio Code&lt;/a&gt;を使用してみました。&lt;/p&gt;

&lt;p&gt;結論から言うと、非常に使いやすかったです。名前からお分かりかもしれませんが、Visual Studio CodeはWindowsを作っているMicrosoft製のツールです。&lt;/p&gt;

&lt;p&gt;Windowsを作っているMicrosoftと、Macを作っているAppleは、いわばライバルの関係にあります。そのライバルが作ったツールなんて…と高を括って試してみたのですが、実際にはとても使いやすいツールでした。&lt;/p&gt;

&lt;p&gt;Unityからの呼び出しもスムーズですし、プロジェクトの設定を読み込ませればコード補完もきっちりと動作します。&lt;/p&gt;

&lt;p&gt;UnityとVisual Studio Codeの連携の設定の仕方は、こちらの記事が参考になりました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/STAR_ZERO/items/6708b69d18eb8c815963&#34; target=&#34;_blank&#34;&gt;UnityでVisual Studio Codeを使う &amp;#8211; Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/STAR_ZERO/items/6708b69d18eb8c815963&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://qiita.com/STAR_ZERO/items/6708b69d18eb8c815963&#34;&gt;http://qiita.com/STAR_ZERO/items/6708b69d18eb8c815963&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;バージョンの違いにより、一部で設定の方法が変わっている可能性があります。&lt;/p&gt;

&lt;h2 id=&#34;参考にしたもの&#34;&gt;参考にしたもの&lt;/h2&gt;

&lt;p&gt;実は超聖域開始前に「完全にニュートラルな状態から入るのは無理がある」と判断し、Unityの入門書を1冊読みました。&lt;/p&gt;

&lt;p&gt;その本はとてもわかりやすく参考になり入門書としてはとても良いと思うのですが、一部の内容に技術書として不適切であると判断できる内容が含まれているため、具体的な書名の掲載は控えます。&lt;/p&gt;

&lt;p&gt;Youtubeなどの動画サイトでレクチャーも多く公開されており、それらもとても参考になりました。開発中に閲覧したサイトや動画をいくつかご紹介します。&lt;/p&gt;

&lt;h3 id=&#34;はじめての-unity-http-japan-unity3d-com-developer-document-tutorial-my-first-unity&#34;&gt;&lt;a href=&#34;http://japan.unity3d.com/developer/document/tutorial/my-first-unity/&#34;&gt;はじめての Unity&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://japan.unity3d.com/developer/document/tutorial/my-first-unity/&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-981&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/C80F93E7-8918-4F54-AF30-3AC40ADC2DF8-300x124.png&#34; alt=&#34;C80F93E7-8918-4F54-AF30-3AC40ADC2DF8&#34; width=&#34;300&#34; height=&#34;124&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://japan.unity3d.com/developer/document/tutorial/my-first-unity/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://japan.unity3d.com/developer/document/tutorial/my-first-unity/&#34;&gt;http://japan.unity3d.com/developer/document/tutorial/my-first-unity/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;公式サイトによる最も初歩的なステップガイド。&lt;/p&gt;

&lt;p&gt;よくあるブロック崩しを作ります。ただし、まだ途中までしかなく、スマホへのパブリッシュ手法などは近日公開のままです。&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-www-youtube-com-watch-v-ep0rlbqrcvc-target-blank-unity-5-tutorial-basics-a&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Ep0rlBQRcVc&#34; target=&#34;_blank&#34;&gt;Unity 5 Tutorial : Basics&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Ep0rlBQRcVc&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Ep0rlBQRcVc&#34;&gt;https://www.youtube.com/watch?v=Ep0rlBQRcVc&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unityの基本的な操作や使い方、書き出しまでを一通り。&lt;/p&gt;

&lt;h3 id=&#34;a-href-https-www-youtube-com-playlist-list-plt-y3hw1v3qtebh8fqv1duouih9nf0k6c-target-blank-3dbuzz-modern-ui-development-in-unity-4-6-a&#34;&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLt_Y3Hw1v3QTEbh8fQV1DUOUIh9nF0k6c&#34; target=&#34;_blank&#34;&gt;3DBuzz Modern UI Development in Unity 4.6&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLt_Y3Hw1v3QTEbh8fQV1DUOUIh9nF0k6c&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLt_Y3Hw1v3QTEbh8fQV1DUOUIh9nF0k6c&#34;&gt;https://www.youtube.com/playlist?list=PLt_Y3Hw1v3QTEbh8fQV1DUOUIh9nF0k6c&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;全10回に渡る、UI用のパーツの使い方のチュートリアル。&lt;/p&gt;

&lt;p&gt;UI用のパーツは通常のパーツとは異なりレイアウトを自動で行ったりする仕組みなど、メニューや設定画面で使いやすい仕組みが用意されています。&lt;/p&gt;

&lt;h2 id=&#34;今後の展開&#34;&gt;今後の展開&lt;/h2&gt;

&lt;p&gt;「詰めCF」自体は私にとってとても興味深いゲームですので…もしかするといつの日かリリースされるかもしれません。&lt;/p&gt;

&lt;p&gt;また、Unityを実際に触ることによって、使用する前とはずいぶんと印象が変わった部分がありました。&lt;/p&gt;

&lt;h3 id=&#34;開発環境が想像以上にカオス&#34;&gt;開発環境が想像以上にカオス&lt;/h3&gt;

&lt;p&gt;これはiOSでももちろんそうなのですが、複数人で一つのプロジェクトを回すことがあります。その際に重要なことは他人と自分の触るファイルをできるだけ分けることであると思います。&lt;/p&gt;

&lt;p&gt;Unityではメタファイルが存在していたり、プロジェクト設定が個人の環境別になっていなかったりと扱うのが相当に面倒に見えました。&lt;/p&gt;

&lt;p&gt;上手に運用するための手法はこちらが参考になりそうです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tsubakit1.hateblo.jp/entry/20140613/1402670011&#34; target=&#34;_blank&#34;&gt;Unity開発者が複数人で開発を進める上で覚えておくと幸せになる9つの事&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tsubakit1.hateblo.jp/entry/20140613/1402670011&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tsubakit1.hateblo.jp/entry/20140613/1402670011&#34;&gt;http://tsubakit1.hateblo.jp/entry/20140613/1402670011&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;また、スクウェア・エニックスさんが公開されているこの資料もとても参考になります。そして、本当に大変そうです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://japan.unity3d.com/unite/unite2015/files/DAY2_1500_room2_Hamaguchi.pdf&#34; target=&#34;_blank&#34;&gt;MEVIUS FINAL FANTASY におけるUnity開発事例&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://japan.unity3d.com/unite/unite2015/files/DAY2_1500_room2_Hamaguchi.pdf&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://japan.unity3d.com/unite/unite2015/files/DAY2_1500_room2_Hamaguchi.pdf&#34;&gt;http://japan.unity3d.com/unite/unite2015/files/DAY2_1500_room2_Hamaguchi.pdf&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ゲーム以外でも意外と使えそう&#34;&gt;ゲーム以外でも意外と使えそう&lt;/h3&gt;

&lt;p&gt;ちょうどこのようなツイートがありました。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;
  &lt;p dir=&#34;ltr&#34; lang=&#34;ja&#34;&gt;
    見える動くデモって教材としても良いと思う。 インフラエンジニアがUnityをやるべきたった一つの理由 &lt;a href=&#34;https://twitter.com/hashtag/engineer?src=hash&#34;&gt;#engineer&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/iaas?src=hash&#34;&gt;#iaas&lt;/a&gt; &lt;a href=&#34;http://t.co/Hi4gwVrMOp&#34;&gt;http://t.co/Hi4gwVrMOp&lt;/a&gt; &lt;a href=&#34;https://twitter.com/SlideShare&#34;&gt;@SlideShare&lt;/a&gt;さんから
  &lt;/p&gt;
  
  &lt;p&gt;
    — アンコウテルオ (@ankou1060) &lt;a href=&#34;https://twitter.com/ankou1060/status/625479919938592768&#34;&gt;2015, 7月 27&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;「何かをしている感」というのはコンソールやターミナルではなかなか伝わりにくいです。&lt;/p&gt;

&lt;p&gt;ドラマや映画でもテキストがどんどんスクロールしていく様子より、よくわからないボタンがチカチカと光ってゲージがギュイーンと伸びてアラートがガンガン上がってるような様子の方が映えますよね。&lt;/p&gt;

&lt;p&gt;上記スライドでも挙げられていますが、Unityはネットワークソケットをそのまま使えますので外部との連携がとても柔軟にできます。&lt;/p&gt;

&lt;p&gt;そして表現力の豊かさとその便利さはまさにUnityのウリですので、どんなUIでも自由に表現することができます。&lt;/p&gt;

&lt;p&gt;例えば、MYOという腕のジェスチャーを非常に細かく取れるガジェットがあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.thalmic.com/myo/&#34; target=&#34;_blank&#34;&gt;MYO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.thalmic.com/myo/&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-982&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/arm-dble-tap-300x260.jpg&#34; alt=&#34;arm-dble-tap&#34; width=&#34;300&#34; height=&#34;260&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.thalmic.com/myo/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.thalmic.com/myo/&#34;&gt;https://www.thalmic.com/myo/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このガジェットは&lt;a href=&#34;http://developerblog.myo.com/setting-myo-package-unity/&#34; target=&#34;_blank&#34;&gt;Unityに対応している&lt;/a&gt;ので、Unityで作ったUIをジェスチャーで操作することが可能です。&lt;/p&gt;

&lt;p&gt;これらを組み合わせて映画「マイノリティ・リポート」であったような未来の操作環境を作って、「EC2のサーバーの死活監視を行う」ような超現実的な泥臭いことができるのです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://penginez.com/archives/3498&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-983&#34; src=&#34;http://staff.feedtailor.jp/images/2015/07/873F7A0F-A244-4607-B3C8-246903D0463A-300x158.png&#34; alt=&#34;873F7A0F-A244-4607-B3C8-246903D0463A&#34; width=&#34;300&#34; height=&#34;158&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://penginez.com/archives/3498&#34; target=&#34;_blank&#34;&gt;10年前でもこの未来感!映画『マイノリティ・リポート』にあった未来技術11選&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://penginez.com/archives/3498&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://penginez.com/archives/3498&#34;&gt;http://penginez.com/archives/3498&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;すごくワクワクしませんか？まあ、実際にやるかやらないかというと、&lt;strong&gt;やらない&lt;/strong&gt;んですけど。&lt;/p&gt;

&lt;p&gt;ともかく、ゲームだけではなく、状態監視にも使えそうなUnity。今後は表現の方法の一つとして利用できるツールとして、「目の前の問題を殴る道具」として役に立ちそうです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>